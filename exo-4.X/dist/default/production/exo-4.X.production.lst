

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Thu Oct 16 09:08:33 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	18F26K83
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=3
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36   000000                     
    37                           ; Generated 12/10/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F26K83 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   003FE0                     bsr             equ	16352
    72   003FE9                     fsr0            equ	16361
    73   003FEA                     fsr0h           equ	16362
    74   003FE9                     fsr0l           equ	16361
    75   003FE1                     fsr1            equ	16353
    76   003FE2                     fsr1h           equ	16354
    77   003FE1                     fsr1l           equ	16353
    78   003FD9                     fsr2            equ	16345
    79   003FDA                     fsr2h           equ	16346
    80   003FD9                     fsr2l           equ	16345
    81   003FEF                     indf0           equ	16367
    82   003FE7                     indf1           equ	16359
    83   003FDF                     indf2           equ	16351
    84   003FD2                     intcon          equ	16338
    85   0039E5                     nvmcon          equ	14821
    86   003FF9                     pcl             equ	16377
    87   003FFA                     pclath          equ	16378
    88   003FFB                     pclatu          equ	16379
    89   003FEB                     plusw0          equ	16363
    90   003FE3                     plusw1          equ	16355
    91   003FDB                     plusw2          equ	16347
    92   003FED                     postdec0        equ	16365
    93   003FE5                     postdec1        equ	16357
    94   003FDD                     postdec2        equ	16349
    95   003FEE                     postinc0        equ	16366
    96   003FE6                     postinc1        equ	16358
    97   003FDE                     postinc2        equ	16350
    98   003FEC                     preinc0         equ	16364
    99   003FE4                     preinc1         equ	16356
   100   003FDC                     preinc2         equ	16348
   101   003FF3                     prod            equ	16371
   102   003FF4                     prodh           equ	16372
   103   003FF3                     prodl           equ	16371
   104   003FD8                     status          equ	16344
   105   003FF5                     tablat          equ	16373
   106   003FF6                     tblptr          equ	16374
   107   003FF7                     tblptrh         equ	16375
   108   003FF6                     tblptrl         equ	16374
   109   003FF8                     tblptru         equ	16376
   110   003FFD                     tosl            equ	16381
   111   003FE8                     wreg            equ	16360
   112   003700                     CIOCON          equ	14080	;# 
   113   003701                     RXERRCNT        equ	14081	;# 
   114   003702                     TXERRCNT        equ	14082	;# 
   115   003703                     BRGCON1         equ	14083	;# 
   116   003704                     BRGCON2         equ	14084	;# 
   117   003705                     BRGCON3         equ	14085	;# 
   118   003706                     RXFCON0         equ	14086	;# 
   119   003707                     RXFCON1         equ	14087	;# 
   120   003708                     RXF6SIDH        equ	14088	;# 
   121   003709                     RXF6SIDL        equ	14089	;# 
   122   00370A                     RXF6EIDH        equ	14090	;# 
   123   00370B                     RXF6EIDL        equ	14091	;# 
   124   00370C                     RXF7SIDH        equ	14092	;# 
   125   00370D                     RXF7SIDL        equ	14093	;# 
   126   00370E                     RXF7EIDH        equ	14094	;# 
   127   00370F                     RXF7EIDL        equ	14095	;# 
   128   003710                     RXF8SIDH        equ	14096	;# 
   129   003711                     RXF8SIDL        equ	14097	;# 
   130   003712                     RXF8EIDH        equ	14098	;# 
   131   003713                     RXF8EIDL        equ	14099	;# 
   132   003714                     RXF9SIDH        equ	14100	;# 
   133   003715                     RXF9SIDL        equ	14101	;# 
   134   003716                     RXF9EIDH        equ	14102	;# 
   135   003717                     RXF9EIDL        equ	14103	;# 
   136   003718                     RXF10SIDH       equ	14104	;# 
   137   003719                     RXF10SIDL       equ	14105	;# 
   138   00371A                     RXF10EIDH       equ	14106	;# 
   139   00371B                     RXF10EIDL       equ	14107	;# 
   140   00371C                     RXF11SIDH       equ	14108	;# 
   141   00371D                     RXF11SIDL       equ	14109	;# 
   142   00371E                     RXF11EIDH       equ	14110	;# 
   143   00371F                     RXF11EIDL       equ	14111	;# 
   144   003720                     RXF12SIDH       equ	14112	;# 
   145   003721                     RXF12SIDL       equ	14113	;# 
   146   003722                     RXF12EIDH       equ	14114	;# 
   147   003723                     RXF12EIDL       equ	14115	;# 
   148   003724                     RXF13SIDH       equ	14116	;# 
   149   003725                     RXF13SIDL       equ	14117	;# 
   150   003726                     RXF13EIDH       equ	14118	;# 
   151   003727                     RXF13EIDL       equ	14119	;# 
   152   003728                     RXF14SIDH       equ	14120	;# 
   153   003729                     RXF14SIDL       equ	14121	;# 
   154   00372A                     RXF14EIDH       equ	14122	;# 
   155   00372B                     RXF14EIDL       equ	14123	;# 
   156   00372C                     RXF15SIDH       equ	14124	;# 
   157   00372D                     RXF15SIDL       equ	14125	;# 
   158   00372E                     RXF15EIDH       equ	14126	;# 
   159   00372F                     RXF15EIDL       equ	14127	;# 
   160   003730                     SDFLC           equ	14128	;# 
   161   003731                     RXFBCON0        equ	14129	;# 
   162   003732                     RXFBCON1        equ	14130	;# 
   163   003733                     RXFBCON2        equ	14131	;# 
   164   003734                     RXFBCON3        equ	14132	;# 
   165   003735                     RXFBCON4        equ	14133	;# 
   166   003736                     RXFBCON5        equ	14134	;# 
   167   003737                     RXFBCON6        equ	14135	;# 
   168   003738                     RXFBCON7        equ	14136	;# 
   169   003739                     MSEL0           equ	14137	;# 
   170   00373A                     MSEL1           equ	14138	;# 
   171   00373B                     MSEL2           equ	14139	;# 
   172   00373C                     MSEL3           equ	14140	;# 
   173   00373D                     BSEL0           equ	14141	;# 
   174   00373E                     BIE0            equ	14142	;# 
   175   00373F                     TXBIE           equ	14143	;# 
   176   003740                     B0CON           equ	14144	;# 
   177   003741                     B0SIDH          equ	14145	;# 
   178   003742                     B0SIDL          equ	14146	;# 
   179   003743                     B0EIDH          equ	14147	;# 
   180   003744                     B0EIDL          equ	14148	;# 
   181   003745                     B0DLC           equ	14149	;# 
   182   003746                     B0D0            equ	14150	;# 
   183   003747                     B0D1            equ	14151	;# 
   184   003748                     B0D2            equ	14152	;# 
   185   003749                     B0D3            equ	14153	;# 
   186   00374A                     B0D4            equ	14154	;# 
   187   00374B                     B0D5            equ	14155	;# 
   188   00374C                     B0D6            equ	14156	;# 
   189   00374D                     B0D7            equ	14157	;# 
   190   00374E                     CANSTAT_RO9     equ	14158	;# 
   191   00374F                     CANCON_RO9      equ	14159	;# 
   192   003750                     B1CON           equ	14160	;# 
   193   003751                     B1SIDH          equ	14161	;# 
   194   003752                     B1SIDL          equ	14162	;# 
   195   003753                     B1EIDH          equ	14163	;# 
   196   003754                     B1EIDL          equ	14164	;# 
   197   003755                     B1DLC           equ	14165	;# 
   198   003756                     B1D0            equ	14166	;# 
   199   003757                     B1D1            equ	14167	;# 
   200   003758                     B1D2            equ	14168	;# 
   201   003759                     B1D3            equ	14169	;# 
   202   00375A                     B1D4            equ	14170	;# 
   203   00375B                     B1D5            equ	14171	;# 
   204   00375C                     B1D6            equ	14172	;# 
   205   00375D                     B1D7            equ	14173	;# 
   206   00375E                     CANSTAT_RO8     equ	14174	;# 
   207   00375F                     CANCON_RO8      equ	14175	;# 
   208   003760                     B2CON           equ	14176	;# 
   209   003761                     B2SIDH          equ	14177	;# 
   210   003762                     B2SIDL          equ	14178	;# 
   211   003763                     B2EIDH          equ	14179	;# 
   212   003764                     B2EIDL          equ	14180	;# 
   213   003765                     B2DLC           equ	14181	;# 
   214   003766                     B2D0            equ	14182	;# 
   215   003767                     B2D1            equ	14183	;# 
   216   003768                     B2D2            equ	14184	;# 
   217   003769                     B2D3            equ	14185	;# 
   218   00376A                     B2D4            equ	14186	;# 
   219   00376B                     B2D5            equ	14187	;# 
   220   00376C                     B2D6            equ	14188	;# 
   221   00376D                     B2D7            equ	14189	;# 
   222   00376E                     CANSTAT_RO7     equ	14190	;# 
   223   00376F                     CANCON_RO7      equ	14191	;# 
   224   003770                     B3CON           equ	14192	;# 
   225   003771                     B3SIDH          equ	14193	;# 
   226   003772                     B3SIDL          equ	14194	;# 
   227   003773                     B3EIDH          equ	14195	;# 
   228   003774                     B3EIDL          equ	14196	;# 
   229   003775                     B3DLC           equ	14197	;# 
   230   003776                     B3D0            equ	14198	;# 
   231   003777                     B3D1            equ	14199	;# 
   232   003778                     B3D2            equ	14200	;# 
   233   003779                     B3D3            equ	14201	;# 
   234   00377A                     B3D4            equ	14202	;# 
   235   00377B                     B3D5            equ	14203	;# 
   236   00377C                     B3D6            equ	14204	;# 
   237   00377D                     B3D7            equ	14205	;# 
   238   00377E                     CANSTAT_RO6     equ	14206	;# 
   239   00377F                     CANCON_RO6      equ	14207	;# 
   240   003780                     B4CON           equ	14208	;# 
   241   003781                     B4SIDH          equ	14209	;# 
   242   003782                     B4SIDL          equ	14210	;# 
   243   003783                     B4EIDH          equ	14211	;# 
   244   003784                     B4EIDL          equ	14212	;# 
   245   003785                     B4DLC           equ	14213	;# 
   246   003786                     B4D0            equ	14214	;# 
   247   003787                     B4D1            equ	14215	;# 
   248   003788                     B4D2            equ	14216	;# 
   249   003789                     B4D3            equ	14217	;# 
   250   00378A                     B4D4            equ	14218	;# 
   251   00378B                     B4D5            equ	14219	;# 
   252   00378C                     B4D6            equ	14220	;# 
   253   00378D                     B4D7            equ	14221	;# 
   254   00378E                     CANSTAT_RO5     equ	14222	;# 
   255   00378F                     CANCON_RO5      equ	14223	;# 
   256   003790                     B5CON           equ	14224	;# 
   257   003791                     B5SIDH          equ	14225	;# 
   258   003792                     B5SIDL          equ	14226	;# 
   259   003793                     B5EIDH          equ	14227	;# 
   260   003794                     B5EIDL          equ	14228	;# 
   261   003795                     B5DLC           equ	14229	;# 
   262   003796                     B5D0            equ	14230	;# 
   263   003797                     B5D1            equ	14231	;# 
   264   003798                     B5D2            equ	14232	;# 
   265   003799                     B5D3            equ	14233	;# 
   266   00379A                     B5D4            equ	14234	;# 
   267   00379B                     B5D5            equ	14235	;# 
   268   00379C                     B5D6            equ	14236	;# 
   269   00379D                     B5D7            equ	14237	;# 
   270   00379E                     CANSTAT_RO4     equ	14238	;# 
   271   00379F                     CANCON_RO4      equ	14239	;# 
   272   0037A0                     RXF0SIDH        equ	14240	;# 
   273   0037A1                     RXF0SIDL        equ	14241	;# 
   274   0037A2                     RXF0EIDH        equ	14242	;# 
   275   0037A3                     RXF0EIDL        equ	14243	;# 
   276   0037A4                     RXF1SIDH        equ	14244	;# 
   277   0037A5                     RXF1SIDL        equ	14245	;# 
   278   0037A6                     RXF1EIDH        equ	14246	;# 
   279   0037A7                     RXF1EIDL        equ	14247	;# 
   280   0037A8                     RXF2SIDH        equ	14248	;# 
   281   0037A9                     RXF2SIDL        equ	14249	;# 
   282   0037AA                     RXF2EIDH        equ	14250	;# 
   283   0037AB                     RXF2EIDL        equ	14251	;# 
   284   0037AC                     RXF3SIDH        equ	14252	;# 
   285   0037AD                     RXF3SIDL        equ	14253	;# 
   286   0037AE                     RXF3EIDH        equ	14254	;# 
   287   0037AF                     RXF3EIDL        equ	14255	;# 
   288   0037B0                     RXF4SIDH        equ	14256	;# 
   289   0037B1                     RXF4SIDL        equ	14257	;# 
   290   0037B2                     RXF4EIDH        equ	14258	;# 
   291   0037B3                     RXF4EIDL        equ	14259	;# 
   292   0037B4                     RXF5SIDH        equ	14260	;# 
   293   0037B5                     RXF5SIDL        equ	14261	;# 
   294   0037B6                     RXF5EIDH        equ	14262	;# 
   295   0037B7                     RXF5EIDL        equ	14263	;# 
   296   0037B8                     RXM0SIDH        equ	14264	;# 
   297   0037B9                     RXM0SIDL        equ	14265	;# 
   298   0037BA                     RXM0EIDH        equ	14266	;# 
   299   0037BB                     RXM0EIDL        equ	14267	;# 
   300   0037BC                     RXM1SIDH        equ	14268	;# 
   301   0037BD                     RXM1SIDL        equ	14269	;# 
   302   0037BE                     RXM1EIDH        equ	14270	;# 
   303   0037BF                     RXM1EIDL        equ	14271	;# 
   304   0037C0                     TXB2CON         equ	14272	;# 
   305   0037C1                     TXB2SIDH        equ	14273	;# 
   306   0037C2                     TXB2SIDL        equ	14274	;# 
   307   0037C3                     TXB2EIDH        equ	14275	;# 
   308   0037C4                     TXB2EIDL        equ	14276	;# 
   309   0037C5                     TXB2DLC         equ	14277	;# 
   310   0037C6                     TXB2D0          equ	14278	;# 
   311   0037C7                     TXB2D1          equ	14279	;# 
   312   0037C8                     TXB2D2          equ	14280	;# 
   313   0037C9                     TXB2D3          equ	14281	;# 
   314   0037CA                     TXB2D4          equ	14282	;# 
   315   0037CB                     TXB2D5          equ	14283	;# 
   316   0037CC                     TXB2D6          equ	14284	;# 
   317   0037CD                     TXB2D7          equ	14285	;# 
   318   0037CE                     CANSTAT_R03     equ	14286	;# 
   319   0037CF                     CANCON_R03      equ	14287	;# 
   320   0037D0                     TXB1CON         equ	14288	;# 
   321   0037D1                     TXB1SIDH        equ	14289	;# 
   322   0037D2                     TXB1SIDL        equ	14290	;# 
   323   0037D3                     TXB1EIDH        equ	14291	;# 
   324   0037D4                     TXB1EIDL        equ	14292	;# 
   325   0037D5                     TXB1DLC         equ	14293	;# 
   326   0037D6                     TXB1D0          equ	14294	;# 
   327   0037D7                     TXB1D1          equ	14295	;# 
   328   0037D8                     TXB1D2          equ	14296	;# 
   329   0037D9                     TXB1D3          equ	14297	;# 
   330   0037DA                     TXB1D4          equ	14298	;# 
   331   0037DB                     TXB1D5          equ	14299	;# 
   332   0037DC                     TXB1D6          equ	14300	;# 
   333   0037DD                     TXB1D7          equ	14301	;# 
   334   0037DE                     CANSTAT_RO2     equ	14302	;# 
   335   0037DF                     CANCON_RO2      equ	14303	;# 
   336   0037E0                     TXB0CON         equ	14304	;# 
   337   0037E1                     TXB0SIDH        equ	14305	;# 
   338   0037E2                     TXB0SIDL        equ	14306	;# 
   339   0037E3                     TXB0EIDH        equ	14307	;# 
   340   0037E4                     TXB0EIDL        equ	14308	;# 
   341   0037E5                     TXB0DLC         equ	14309	;# 
   342   0037E6                     TXB0D0          equ	14310	;# 
   343   0037E7                     TXB0D1          equ	14311	;# 
   344   0037E8                     TXB0D2          equ	14312	;# 
   345   0037E9                     TXB0D3          equ	14313	;# 
   346   0037EA                     TXB0D4          equ	14314	;# 
   347   0037EB                     TXB0D5          equ	14315	;# 
   348   0037EC                     TXB0D6          equ	14316	;# 
   349   0037ED                     TXB0D7          equ	14317	;# 
   350   0037EE                     CANSTAT_RO1     equ	14318	;# 
   351   0037EF                     CANCON_RO1      equ	14319	;# 
   352   0037F0                     RXB1CON         equ	14320	;# 
   353   0037F1                     RXB1SIDH        equ	14321	;# 
   354   0037F2                     RXB1SIDL        equ	14322	;# 
   355   0037F3                     RXB1EIDH        equ	14323	;# 
   356   0037F4                     RXB1EIDL        equ	14324	;# 
   357   0037F5                     RXB1DLC         equ	14325	;# 
   358   0037F6                     RXB1D0          equ	14326	;# 
   359   0037F7                     RXB1D1          equ	14327	;# 
   360   0037F8                     RXB1D2          equ	14328	;# 
   361   0037F9                     RXB1D3          equ	14329	;# 
   362   0037FA                     RXB1D4          equ	14330	;# 
   363   0037FB                     RXB1D5          equ	14331	;# 
   364   0037FC                     RXB1D6          equ	14332	;# 
   365   0037FD                     RXB1D7          equ	14333	;# 
   366   0037FE                     CANSTAT_RO0     equ	14334	;# 
   367   0037FF                     CANCON_RO0      equ	14335	;# 
   368   003880                     STATUS_CSHAD    equ	14464	;# 
   369   003881                     WREG_CSHAD      equ	14465	;# 
   370   003882                     BSR_CSHAD       equ	14466	;# 
   371   003883                     SHADCON         equ	14467	;# 
   372   003884                     STATUS_SHAD     equ	14468	;# 
   373   003885                     WREG_SHAD       equ	14469	;# 
   374   003886                     BSR_SHAD        equ	14470	;# 
   375   003887                     PCLATH_SHAD     equ	14471	;# 
   376   003888                     PCLATU_SHAD     equ	14472	;# 
   377   003889                     FSR0SH          equ	14473	;# 
   378   003889                     FSR0L_SHAD      equ	14473	;# 
   379   00388A                     FSR0H_SHAD      equ	14474	;# 
   380   00388B                     FSR1SH          equ	14475	;# 
   381   00388B                     FSR1L_SHAD      equ	14475	;# 
   382   00388C                     FSR1H_SHAD      equ	14476	;# 
   383   00388D                     FSR2SH          equ	14477	;# 
   384   00388D                     FSR2L_SHAD      equ	14477	;# 
   385   00388E                     FSR2H_SHAD      equ	14478	;# 
   386   00388F                     PRODSH          equ	14479	;# 
   387   00388F                     PRODL_SHAD      equ	14479	;# 
   388   003890                     PRODH_SHAD      equ	14480	;# 
   389   00389D                     IVTADL          equ	14493	;# 
   390   00389E                     IVTADH          equ	14494	;# 
   391   00389F                     IVTADU          equ	14495	;# 
   392   00395B                     WDTCON0         equ	14683	;# 
   393   00395C                     WDTCON1         equ	14684	;# 
   394   00395D                     WDTPSL          equ	14685	;# 
   395   00395E                     WDTPSH          equ	14686	;# 
   396   00395F                     WDTTMR          equ	14687	;# 
   397   003960                     CRCDATA         equ	14688	;# 
   398   003960                     CRCDATL         equ	14688	;# 
   399   003961                     CRCDATH         equ	14689	;# 
   400   003962                     CRCACC          equ	14690	;# 
   401   003962                     CRCACCL         equ	14690	;# 
   402   003963                     CRCACCH         equ	14691	;# 
   403   003964                     CRCSHFT         equ	14692	;# 
   404   003964                     CRCSHIFTL       equ	14692	;# 
   405   003965                     CRCSHIFTH       equ	14693	;# 
   406   003966                     CRCXOR          equ	14694	;# 
   407   003966                     CRCXORL         equ	14694	;# 
   408   003967                     CRCXORH         equ	14695	;# 
   409   003968                     CRCCON0         equ	14696	;# 
   410   003969                     CRCCON1         equ	14697	;# 
   411   003976                     SCANLADR        equ	14710	;# 
   412   003976                     SCANLADRL       equ	14710	;# 
   413   003977                     SCANLADRH       equ	14711	;# 
   414   003978                     SCANLADRU       equ	14712	;# 
   415   003979                     SCANHADR        equ	14713	;# 
   416   003979                     SCANHADRL       equ	14713	;# 
   417   00397A                     SCANHADRH       equ	14714	;# 
   418   00397B                     SCANHADRU       equ	14715	;# 
   419   00397C                     SCANCON0        equ	14716	;# 
   420   00397D                     SCANTRIG        equ	14717	;# 
   421   003980                     IPR0            equ	14720	;# 
   422   003981                     IPR1            equ	14721	;# 
   423   003982                     IPR2            equ	14722	;# 
   424   003983                     IPR3            equ	14723	;# 
   425   003984                     IPR4            equ	14724	;# 
   426   003985                     IPR5            equ	14725	;# 
   427   003986                     IPR6            equ	14726	;# 
   428   003987                     IPR7            equ	14727	;# 
   429   003988                     IPR8            equ	14728	;# 
   430   003989                     IPR9            equ	14729	;# 
   431   003990                     PIE0            equ	14736	;# 
   432   003991                     PIE1            equ	14737	;# 
   433   003992                     PIE2            equ	14738	;# 
   434   003993                     PIE3            equ	14739	;# 
   435   003994                     PIE4            equ	14740	;# 
   436   003995                     PIE5            equ	14741	;# 
   437   003996                     PIE6            equ	14742	;# 
   438   003997                     PIE7            equ	14743	;# 
   439   003998                     PIE8            equ	14744	;# 
   440   003999                     PIE9            equ	14745	;# 
   441   0039A0                     PIR0            equ	14752	;# 
   442   0039A1                     PIR1            equ	14753	;# 
   443   0039A2                     PIR2            equ	14754	;# 
   444   0039A3                     PIR3            equ	14755	;# 
   445   0039A4                     PIR4            equ	14756	;# 
   446   0039A5                     PIR5            equ	14757	;# 
   447   0039A6                     PIR6            equ	14758	;# 
   448   0039A7                     PIR7            equ	14759	;# 
   449   0039A8                     PIR8            equ	14760	;# 
   450   0039A9                     PIR9            equ	14761	;# 
   451   0039C0                     PMD0            equ	14784	;# 
   452   0039C1                     PMD1            equ	14785	;# 
   453   0039C2                     PMD2            equ	14786	;# 
   454   0039C3                     PMD3            equ	14787	;# 
   455   0039C4                     PMD4            equ	14788	;# 
   456   0039C5                     PMD5            equ	14789	;# 
   457   0039C6                     PMD6            equ	14790	;# 
   458   0039C7                     PMD7            equ	14791	;# 
   459   0039D0                     BORCON          equ	14800	;# 
   460   0039D1                     VREGCON         equ	14801	;# 
   461   0039D8                     CPUDOZE         equ	14808	;# 
   462   0039D9                     OSCCON1         equ	14809	;# 
   463   0039DA                     OSCCON2         equ	14810	;# 
   464   0039DB                     OSCCON3         equ	14811	;# 
   465   0039DC                     OSCSTAT         equ	14812	;# 
   466   0039DC                     OSCSTAT1        equ	14812	;# 
   467   0039DD                     OSCEN           equ	14813	;# 
   468   0039DE                     OSCTUNE         equ	14814	;# 
   469   0039DF                     OSCFRQ          equ	14815	;# 
   470   0039E0                     NVMADRL         equ	14816	;# 
   471   0039E1                     NVMADRH         equ	14817	;# 
   472   0039E3                     NVMDAT          equ	14819	;# 
   473   0039E5                     NVMCON1         equ	14821	;# 
   474   0039E6                     NVMCON2         equ	14822	;# 
   475   0039EF                     PRLOCK          equ	14831	;# 
   476   0039F1                     ISRPR           equ	14833	;# 
   477   0039F2                     MAINPR          equ	14834	;# 
   478   0039F3                     DMA1PR          equ	14835	;# 
   479   0039F4                     DMA2PR          equ	14836	;# 
   480   0039F7                     SCANPR          equ	14839	;# 
   481   003A00                     RA0PPS          equ	14848	;# 
   482   003A01                     RA1PPS          equ	14849	;# 
   483   003A02                     RA2PPS          equ	14850	;# 
   484   003A03                     RA3PPS          equ	14851	;# 
   485   003A04                     RA4PPS          equ	14852	;# 
   486   003A05                     RA5PPS          equ	14853	;# 
   487   003A06                     RA6PPS          equ	14854	;# 
   488   003A07                     RA7PPS          equ	14855	;# 
   489   003A08                     RB0PPS          equ	14856	;# 
   490   003A09                     RB1PPS          equ	14857	;# 
   491   003A0A                     RB2PPS          equ	14858	;# 
   492   003A0B                     RB3PPS          equ	14859	;# 
   493   003A0C                     RB4PPS          equ	14860	;# 
   494   003A0D                     RB5PPS          equ	14861	;# 
   495   003A0E                     RB6PPS          equ	14862	;# 
   496   003A0F                     RB7PPS          equ	14863	;# 
   497   003A10                     RC0PPS          equ	14864	;# 
   498   003A11                     RC1PPS          equ	14865	;# 
   499   003A12                     RC2PPS          equ	14866	;# 
   500   003A13                     RC3PPS          equ	14867	;# 
   501   003A14                     RC4PPS          equ	14868	;# 
   502   003A15                     RC5PPS          equ	14869	;# 
   503   003A16                     RC6PPS          equ	14870	;# 
   504   003A17                     RC7PPS          equ	14871	;# 
   505   003A40                     ANSELA          equ	14912	;# 
   506   003A41                     WPUA            equ	14913	;# 
   507   003A42                     ODCONA          equ	14914	;# 
   508   003A43                     SLRCONA         equ	14915	;# 
   509   003A44                     INLVLA          equ	14916	;# 
   510   003A45                     IOCAP           equ	14917	;# 
   511   003A46                     IOCAN           equ	14918	;# 
   512   003A47                     IOCAF           equ	14919	;# 
   513   003A50                     ANSELB          equ	14928	;# 
   514   003A51                     WPUB            equ	14929	;# 
   515   003A52                     ODCONB          equ	14930	;# 
   516   003A53                     SLRCONB         equ	14931	;# 
   517   003A54                     INLVLB          equ	14932	;# 
   518   003A55                     IOCBP           equ	14933	;# 
   519   003A56                     IOCBN           equ	14934	;# 
   520   003A57                     IOCBF           equ	14935	;# 
   521   003A5A                     RB1I2C          equ	14938	;# 
   522   003A5B                     RB2I2C          equ	14939	;# 
   523   003A60                     ANSELC          equ	14944	;# 
   524   003A61                     WPUC            equ	14945	;# 
   525   003A62                     ODCONC          equ	14946	;# 
   526   003A63                     SLRCONC         equ	14947	;# 
   527   003A64                     INLVLC          equ	14948	;# 
   528   003A65                     IOCCP           equ	14949	;# 
   529   003A66                     IOCCN           equ	14950	;# 
   530   003A67                     IOCCF           equ	14951	;# 
   531   003A6A                     RC3I2C          equ	14954	;# 
   532   003A6B                     RC4I2C          equ	14955	;# 
   533   003A81                     WPUE            equ	14977	;# 
   534   003A84                     INLVLE          equ	14980	;# 
   535   003A85                     IOCEP           equ	14981	;# 
   536   003A86                     IOCEN           equ	14982	;# 
   537   003A87                     IOCEF           equ	14983	;# 
   538   003ABF                     PPSLOCK         equ	15039	;# 
   539   003AC0                     INT0PPS         equ	15040	;# 
   540   003AC1                     INT1PPS         equ	15041	;# 
   541   003AC2                     INT2PPS         equ	15042	;# 
   542   003AC3                     T0CKIPPS        equ	15043	;# 
   543   003AC4                     T1CKIPPS        equ	15044	;# 
   544   003AC5                     T1GPPS          equ	15045	;# 
   545   003AC6                     T3CKIPPS        equ	15046	;# 
   546   003AC7                     T3GPPS          equ	15047	;# 
   547   003AC8                     T5CKIPPS        equ	15048	;# 
   548   003AC9                     T5GPPS          equ	15049	;# 
   549   003ACA                     T2INPPS         equ	15050	;# 
   550   003ACB                     T4INPPS         equ	15051	;# 
   551   003ACC                     T6INPPS         equ	15052	;# 
   552   003ACD                     CCP1PPS         equ	15053	;# 
   553   003ACE                     CCP2PPS         equ	15054	;# 
   554   003ACF                     CCP3PPS         equ	15055	;# 
   555   003AD0                     CCP4PPS         equ	15056	;# 
   556   003AD1                     SMT1WINPPS      equ	15057	;# 
   557   003AD2                     SMT1SIGPPS      equ	15058	;# 
   558   003AD3                     SMT2WINPPS      equ	15059	;# 
   559   003AD4                     SMT2SIGPPS      equ	15060	;# 
   560   003AD5                     CWG1INPPS       equ	15061	;# 
   561   003AD6                     CWG2INPPS       equ	15062	;# 
   562   003AD7                     CWG3INPPS       equ	15063	;# 
   563   003AD8                     MD1CARLPPS      equ	15064	;# 
   564   003AD9                     MD1CARHPPS      equ	15065	;# 
   565   003ADA                     MD1SRCPPS       equ	15066	;# 
   566   003ADB                     CLCIN0PPS       equ	15067	;# 
   567   003ADC                     CLCIN1PPS       equ	15068	;# 
   568   003ADD                     CLCIN2PPS       equ	15069	;# 
   569   003ADE                     CLCIN3PPS       equ	15070	;# 
   570   003ADF                     ADACTPPS        equ	15071	;# 
   571   003AE0                     SPI1SCKPPS      equ	15072	;# 
   572   003AE1                     SPI1SDIPPS      equ	15073	;# 
   573   003AE2                     SPI1SSPPS       equ	15074	;# 
   574   003AE3                     I2C1SCLPPS      equ	15075	;# 
   575   003AE4                     I2C1SDAPPS      equ	15076	;# 
   576   003AE5                     I2C2SCLPPS      equ	15077	;# 
   577   003AE6                     I2C2SDAPPS      equ	15078	;# 
   578   003AE7                     U1RXPPS         equ	15079	;# 
   579   003AE8                     U1CTSPPS        equ	15080	;# 
   580   003AEA                     U2RXPPS         equ	15082	;# 
   581   003AEB                     U2CTSPPS        equ	15083	;# 
   582   003AED                     CANRXPPS        equ	15085	;# 
   583   003BC9                     DMA2BUF         equ	15305	;# 
   584   003BCA                     DMA2DCNT        equ	15306	;# 
   585   003BCA                     DMA2DCNTL       equ	15306	;# 
   586   003BCB                     DMA2DCNTH       equ	15307	;# 
   587   003BCC                     DMA2DPTR        equ	15308	;# 
   588   003BCC                     DMA2DPTRL       equ	15308	;# 
   589   003BCD                     DMA2DPTRH       equ	15309	;# 
   590   003BCE                     DMA2DSZ         equ	15310	;# 
   591   003BCE                     DMA2DSZL        equ	15310	;# 
   592   003BCF                     DMA2DSZH        equ	15311	;# 
   593   003BD0                     DMA2DSA         equ	15312	;# 
   594   003BD0                     DMA2DSAL        equ	15312	;# 
   595   003BD1                     DMA2DSAH        equ	15313	;# 
   596   003BD2                     DMA2SCNT        equ	15314	;# 
   597   003BD2                     DMA2SCNTL       equ	15314	;# 
   598   003BD3                     DMA2SCNTH       equ	15315	;# 
   599   003BD4                     DMA2SPTR        equ	15316	;# 
   600   003BD4                     DMA2SPTRL       equ	15316	;# 
   601   003BD5                     DMA2SPTRH       equ	15317	;# 
   602   003BD6                     DMA2SPTRU       equ	15318	;# 
   603   003BD7                     DMA2SSZ         equ	15319	;# 
   604   003BD7                     DMA2SSZL        equ	15319	;# 
   605   003BD8                     DMA2SSZH        equ	15320	;# 
   606   003BD9                     DMA2SSA         equ	15321	;# 
   607   003BD9                     DMA2SSAL        equ	15321	;# 
   608   003BDA                     DMA2SSAH        equ	15322	;# 
   609   003BDB                     DMA2SSAU        equ	15323	;# 
   610   003BDC                     DMA2CON0        equ	15324	;# 
   611   003BDD                     DMA2CON1        equ	15325	;# 
   612   003BDE                     DMA2AIRQ        equ	15326	;# 
   613   003BDF                     DMA2SIRQ        equ	15327	;# 
   614   003BE9                     DMA1BUF         equ	15337	;# 
   615   003BEA                     DMA1DCNT        equ	15338	;# 
   616   003BEA                     DMA1DCNTL       equ	15338	;# 
   617   003BEB                     DMA1DCNTH       equ	15339	;# 
   618   003BEC                     DMA1DPTR        equ	15340	;# 
   619   003BEC                     DMA1DPTRL       equ	15340	;# 
   620   003BED                     DMA1DPTRH       equ	15341	;# 
   621   003BEE                     DMA1DSZ         equ	15342	;# 
   622   003BEE                     DMA1DSZL        equ	15342	;# 
   623   003BEF                     DMA1DSZH        equ	15343	;# 
   624   003BF0                     DMA1DSA         equ	15344	;# 
   625   003BF0                     DMA1DSAL        equ	15344	;# 
   626   003BF1                     DMA1DSAH        equ	15345	;# 
   627   003BF2                     DMA1SCNT        equ	15346	;# 
   628   003BF2                     DMA1SCNTL       equ	15346	;# 
   629   003BF3                     DMA1SCNTH       equ	15347	;# 
   630   003BF4                     DMA1SPTR        equ	15348	;# 
   631   003BF4                     DMA1SPTRL       equ	15348	;# 
   632   003BF5                     DMA1SPTRH       equ	15349	;# 
   633   003BF6                     DMA1SPTRU       equ	15350	;# 
   634   003BF7                     DMA1SSZ         equ	15351	;# 
   635   003BF7                     DMA1SSZL        equ	15351	;# 
   636   003BF8                     DMA1SSZH        equ	15352	;# 
   637   003BF9                     DMA1SSA         equ	15353	;# 
   638   003BF9                     DMA1SSAL        equ	15353	;# 
   639   003BFA                     DMA1SSAH        equ	15354	;# 
   640   003BFB                     DMA1SSAU        equ	15355	;# 
   641   003BFC                     DMA1CON0        equ	15356	;# 
   642   003BFD                     DMA1CON1        equ	15357	;# 
   643   003BFE                     DMA1AIRQ        equ	15358	;# 
   644   003BFF                     DMA1SIRQ        equ	15359	;# 
   645   003C56                     CLC4CON         equ	15446	;# 
   646   003C57                     CLC4POL         equ	15447	;# 
   647   003C58                     CLC4SEL0        equ	15448	;# 
   648   003C59                     CLC4SEL1        equ	15449	;# 
   649   003C5A                     CLC4SEL2        equ	15450	;# 
   650   003C5B                     CLC4SEL3        equ	15451	;# 
   651   003C5C                     CLC4GLS0        equ	15452	;# 
   652   003C5D                     CLC4GLS1        equ	15453	;# 
   653   003C5E                     CLC4GLS2        equ	15454	;# 
   654   003C5F                     CLC4GLS3        equ	15455	;# 
   655   003C60                     CLC3CON         equ	15456	;# 
   656   003C61                     CLC3POL         equ	15457	;# 
   657   003C62                     CLC3SEL0        equ	15458	;# 
   658   003C63                     CLC3SEL1        equ	15459	;# 
   659   003C64                     CLC3SEL2        equ	15460	;# 
   660   003C65                     CLC3SEL3        equ	15461	;# 
   661   003C66                     CLC3GLS0        equ	15462	;# 
   662   003C67                     CLC3GLS1        equ	15463	;# 
   663   003C68                     CLC3GLS2        equ	15464	;# 
   664   003C69                     CLC3GLS3        equ	15465	;# 
   665   003C6A                     CLC2CON         equ	15466	;# 
   666   003C6B                     CLC2POL         equ	15467	;# 
   667   003C6C                     CLC2SEL0        equ	15468	;# 
   668   003C6D                     CLC2SEL1        equ	15469	;# 
   669   003C6E                     CLC2SEL2        equ	15470	;# 
   670   003C6F                     CLC2SEL3        equ	15471	;# 
   671   003C70                     CLC2GLS0        equ	15472	;# 
   672   003C71                     CLC2GLS1        equ	15473	;# 
   673   003C72                     CLC2GLS2        equ	15474	;# 
   674   003C73                     CLC2GLS3        equ	15475	;# 
   675   003C74                     CLC1CON         equ	15476	;# 
   676   003C75                     CLC1POL         equ	15477	;# 
   677   003C76                     CLC1SEL0        equ	15478	;# 
   678   003C77                     CLC1SEL1        equ	15479	;# 
   679   003C78                     CLC1SEL2        equ	15480	;# 
   680   003C79                     CLC1SEL3        equ	15481	;# 
   681   003C7A                     CLC1GLS0        equ	15482	;# 
   682   003C7B                     CLC1GLS1        equ	15483	;# 
   683   003C7C                     CLC1GLS2        equ	15484	;# 
   684   003C7D                     CLC1GLS3        equ	15485	;# 
   685   003C7E                     CLCDATA0        equ	15486	;# 
   686   003CE5                     CLKRCON         equ	15589	;# 
   687   003CE6                     CLKRCLK         equ	15590	;# 
   688   003CFA                     MD1CON0         equ	15610	;# 
   689   003CFB                     MD1CON1         equ	15611	;# 
   690   003CFC                     MD1SRC          equ	15612	;# 
   691   003CFD                     MD1CARL         equ	15613	;# 
   692   003CFE                     MD1CARH         equ	15614	;# 
   693   003D10                     SPI1RXB         equ	15632	;# 
   694   003D11                     SPI1TXB         equ	15633	;# 
   695   003D12                     SPI1TCNT        equ	15634	;# 
   696   003D12                     SPI1TCNTL       equ	15634	;# 
   697   003D13                     SPI1TCNTH       equ	15635	;# 
   698   003D14                     SPI1CON0        equ	15636	;# 
   699   003D15                     SPI1CON1        equ	15637	;# 
   700   003D16                     SPI1CON2        equ	15638	;# 
   701   003D17                     SPI1STATUS      equ	15639	;# 
   702   003D18                     SPI1TWIDTH      equ	15640	;# 
   703   003D19                     SPI1BAUD        equ	15641	;# 
   704   003D1A                     SPI1INTF        equ	15642	;# 
   705   003D1B                     SPI1INTE        equ	15643	;# 
   706   003D1C                     SPI1CLK         equ	15644	;# 
   707   003D54                     I2C2RXB         equ	15700	;# 
   708   003D55                     I2C2TXB         equ	15701	;# 
   709   003D56                     I2C2CNT         equ	15702	;# 
   710   003D57                     I2C2ADB0        equ	15703	;# 
   711   003D58                     I2C2ADB1        equ	15704	;# 
   712   003D59                     I2C2ADR0        equ	15705	;# 
   713   003D5A                     I2C2ADR1        equ	15706	;# 
   714   003D5B                     I2C2ADR2        equ	15707	;# 
   715   003D5C                     I2C2ADR3        equ	15708	;# 
   716   003D5D                     I2C2CON0        equ	15709	;# 
   717   003D5E                     I2C2CON1        equ	15710	;# 
   718   003D5F                     I2C2CON2        equ	15711	;# 
   719   003D60                     I2C2ERR         equ	15712	;# 
   720   003D61                     I2C2STAT0       equ	15713	;# 
   721   003D62                     I2C2STAT1       equ	15714	;# 
   722   003D63                     I2C2PIR         equ	15715	;# 
   723   003D64                     I2C2PIE         equ	15716	;# 
   724   003D65                     I2C2CLK         equ	15717	;# 
   725   003D66                     I2C2BTO         equ	15718	;# 
   726   003D6A                     I2C1RXB         equ	15722	;# 
   727   003D6B                     I2C1TXB         equ	15723	;# 
   728   003D6C                     I2C1CNT         equ	15724	;# 
   729   003D6D                     I2C1ADB0        equ	15725	;# 
   730   003D6E                     I2C1ADB1        equ	15726	;# 
   731   003D6F                     I2C1ADR0        equ	15727	;# 
   732   003D70                     I2C1ADR1        equ	15728	;# 
   733   003D71                     I2C1ADR2        equ	15729	;# 
   734   003D72                     I2C1ADR3        equ	15730	;# 
   735   003D73                     I2C1CON0        equ	15731	;# 
   736   003D74                     I2C1CON1        equ	15732	;# 
   737   003D75                     I2C1CON2        equ	15733	;# 
   738   003D76                     I2C1ERR         equ	15734	;# 
   739   003D77                     I2C1STAT0       equ	15735	;# 
   740   003D78                     I2C1STAT1       equ	15736	;# 
   741   003D79                     I2C1PIR         equ	15737	;# 
   742   003D7A                     I2C1PIE         equ	15738	;# 
   743   003D7B                     I2C1CLK         equ	15739	;# 
   744   003D7C                     I2C1BTO         equ	15740	;# 
   745   003DD0                     U2RXB           equ	15824	;# 
   746   003DD0                     U2RXBL          equ	15824	;# 
   747   003DD1                     U2RXCHK         equ	15825	;# 
   748   003DD2                     U2TXB           equ	15826	;# 
   749   003DD2                     U2TXBL          equ	15826	;# 
   750   003DD3                     U2TXCHK         equ	15827	;# 
   751   003DD4                     U2P1            equ	15828	;# 
   752   003DD4                     U2P1L           equ	15828	;# 
   753   003DD5                     U2P1H           equ	15829	;# 
   754   003DD6                     U2P2            equ	15830	;# 
   755   003DD6                     U2P2L           equ	15830	;# 
   756   003DD7                     U2P2H           equ	15831	;# 
   757   003DD8                     U2P3            equ	15832	;# 
   758   003DD8                     U2P3L           equ	15832	;# 
   759   003DD9                     U2P3H           equ	15833	;# 
   760   003DDA                     U2CON0          equ	15834	;# 
   761   003DDB                     U2CON1          equ	15835	;# 
   762   003DDC                     U2CON2          equ	15836	;# 
   763   003DDD                     U2BRG           equ	15837	;# 
   764   003DDD                     U2BRGL          equ	15837	;# 
   765   003DDE                     U2BRGH          equ	15838	;# 
   766   003DDF                     U2FIFO          equ	15839	;# 
   767   003DE0                     U2UIR           equ	15840	;# 
   768   003DE1                     U2ERRIR         equ	15841	;# 
   769   003DE2                     U2ERRIE         equ	15842	;# 
   770   003DE8                     U1RXB           equ	15848	;# 
   771   003DE8                     U1RXBL          equ	15848	;# 
   772   003DE9                     U1RXCHK         equ	15849	;# 
   773   003DEA                     U1TXB           equ	15850	;# 
   774   003DEA                     U1TXBL          equ	15850	;# 
   775   003DEB                     U1TXCHK         equ	15851	;# 
   776   003DEC                     U1P1            equ	15852	;# 
   777   003DEC                     U1P1L           equ	15852	;# 
   778   003DED                     U1P1H           equ	15853	;# 
   779   003DEE                     U1P2            equ	15854	;# 
   780   003DEE                     U1P2L           equ	15854	;# 
   781   003DEF                     U1P2H           equ	15855	;# 
   782   003DF0                     U1P3            equ	15856	;# 
   783   003DF0                     U1P3L           equ	15856	;# 
   784   003DF1                     U1P3H           equ	15857	;# 
   785   003DF2                     U1CON0          equ	15858	;# 
   786   003DF3                     U1CON1          equ	15859	;# 
   787   003DF4                     U1CON2          equ	15860	;# 
   788   003DF5                     U1BRG           equ	15861	;# 
   789   003DF5                     U1BRGL          equ	15861	;# 
   790   003DF6                     U1BRGH          equ	15862	;# 
   791   003DF7                     U1FIFO          equ	15863	;# 
   792   003DF8                     U1UIR           equ	15864	;# 
   793   003DF9                     U1ERRIR         equ	15865	;# 
   794   003DFA                     U1ERRIE         equ	15866	;# 
   795   003E9C                     DAC1CON1        equ	16028	;# 
   796   003E9E                     DAC1CON0        equ	16030	;# 
   797   003EB8                     CM2CON0         equ	16056	;# 
   798   003EB9                     CM2CON1         equ	16057	;# 
   799   003EBA                     CM2NCH          equ	16058	;# 
   800   003EBB                     CM2PCH          equ	16059	;# 
   801   003EBC                     CM1CON0         equ	16060	;# 
   802   003EBD                     CM1CON1         equ	16061	;# 
   803   003EBE                     CM1NCH          equ	16062	;# 
   804   003EBF                     CM1PCH          equ	16063	;# 
   805   003EC0                     CMOUT           equ	16064	;# 
   806   003EC1                     FVRCON          equ	16065	;# 
   807   003EC3                     ZCDCON          equ	16067	;# 
   808   003EC9                     HLVDCON0        equ	16073	;# 
   809   003ECA                     HLVDCON1        equ	16074	;# 
   810   003ED7                     ADCP            equ	16087	;# 
   811   003EDE                     ADLTH           equ	16094	;# 
   812   003EDE                     ADLTHL          equ	16094	;# 
   813   003EDF                     ADLTHH          equ	16095	;# 
   814   003EE0                     ADUTH           equ	16096	;# 
   815   003EE0                     ADUTHL          equ	16096	;# 
   816   003EE1                     ADUTHH          equ	16097	;# 
   817   003EE2                     ADERR           equ	16098	;# 
   818   003EE2                     ADERRL          equ	16098	;# 
   819   003EE3                     ADERRH          equ	16099	;# 
   820   003EE4                     ADSTPT          equ	16100	;# 
   821   003EE4                     ADSTPTL         equ	16100	;# 
   822   003EE5                     ADSTPTH         equ	16101	;# 
   823   003EE6                     ADFLTR          equ	16102	;# 
   824   003EE6                     ADFLTRL         equ	16102	;# 
   825   003EE7                     ADFLTRH         equ	16103	;# 
   826   003EE8                     ADACC           equ	16104	;# 
   827   003EE8                     ADACCL          equ	16104	;# 
   828   003EE9                     ADACCH          equ	16105	;# 
   829   003EEA                     ADACCU          equ	16106	;# 
   830   003EEB                     ADCNT           equ	16107	;# 
   831   003EEC                     ADRPT           equ	16108	;# 
   832   003EED                     ADPREV          equ	16109	;# 
   833   003EED                     ADPREVL         equ	16109	;# 
   834   003EEE                     ADPREVH         equ	16110	;# 
   835   003EEF                     ADRES           equ	16111	;# 
   836   003EEF                     ADRESL          equ	16111	;# 
   837   003EF0                     ADRESH          equ	16112	;# 
   838   003EF1                     ADPCH           equ	16113	;# 
   839   003EF3                     ADACQ           equ	16115	;# 
   840   003EF3                     ADACQL          equ	16115	;# 
   841   003EF4                     ADACQH          equ	16116	;# 
   842   003EF5                     ADCAP           equ	16117	;# 
   843   003EF6                     ADPRE           equ	16118	;# 
   844   003EF6                     ADPREL          equ	16118	;# 
   845   003EF7                     ADPREH          equ	16119	;# 
   846   003EF8                     ADCON0          equ	16120	;# 
   847   003EF9                     ADCON1          equ	16121	;# 
   848   003EFA                     ADCON2          equ	16122	;# 
   849   003EFB                     ADCON3          equ	16123	;# 
   850   003EFC                     ADSTAT          equ	16124	;# 
   851   003EFD                     ADREF           equ	16125	;# 
   852   003EFE                     ADACT           equ	16126	;# 
   853   003EFF                     ADCLK           equ	16127	;# 
   854   003F00                     SMT2TMR         equ	16128	;# 
   855   003F00                     SMT2TMRL        equ	16128	;# 
   856   003F01                     SMT2TMRH        equ	16129	;# 
   857   003F02                     SMT2TMRU        equ	16130	;# 
   858   003F03                     SMT2CPR         equ	16131	;# 
   859   003F03                     SMT2CPRL        equ	16131	;# 
   860   003F04                     SMT2CPRH        equ	16132	;# 
   861   003F05                     SMT2CPRU        equ	16133	;# 
   862   003F06                     SMT2CPW         equ	16134	;# 
   863   003F06                     SMT2CPWL        equ	16134	;# 
   864   003F07                     SMT2CPWH        equ	16135	;# 
   865   003F08                     SMT2CPWU        equ	16136	;# 
   866   003F09                     SMT2PR          equ	16137	;# 
   867   003F09                     SMT2PRL         equ	16137	;# 
   868   003F0A                     SMT2PRH         equ	16138	;# 
   869   003F0B                     SMT2PRU         equ	16139	;# 
   870   003F0C                     SMT2CON0        equ	16140	;# 
   871   003F0D                     SMT2CON1        equ	16141	;# 
   872   003F0E                     SMT2STAT        equ	16142	;# 
   873   003F0F                     SMT2CLK         equ	16143	;# 
   874   003F10                     SMT2SIG         equ	16144	;# 
   875   003F11                     SMT2WIN         equ	16145	;# 
   876   003F12                     SMT1TMR         equ	16146	;# 
   877   003F12                     SMT1TMRL        equ	16146	;# 
   878   003F13                     SMT1TMRH        equ	16147	;# 
   879   003F14                     SMT1TMRU        equ	16148	;# 
   880   003F15                     SMT1CPR         equ	16149	;# 
   881   003F15                     SMT1CPRL        equ	16149	;# 
   882   003F16                     SMT1CPRH        equ	16150	;# 
   883   003F17                     SMT1CPRU        equ	16151	;# 
   884   003F18                     SMT1CPW         equ	16152	;# 
   885   003F18                     SMT1CPWL        equ	16152	;# 
   886   003F19                     SMT1CPWH        equ	16153	;# 
   887   003F1A                     SMT1CPWU        equ	16154	;# 
   888   003F1B                     SMT1PR          equ	16155	;# 
   889   003F1B                     SMT1PRL         equ	16155	;# 
   890   003F1C                     SMT1PRH         equ	16156	;# 
   891   003F1D                     SMT1PRU         equ	16157	;# 
   892   003F1E                     SMT1CON0        equ	16158	;# 
   893   003F1F                     SMT1CON1        equ	16159	;# 
   894   003F20                     SMT1STAT        equ	16160	;# 
   895   003F21                     SMT1CLK         equ	16161	;# 
   896   003F22                     SMT1SIG         equ	16162	;# 
   897   003F23                     SMT1WIN         equ	16163	;# 
   898   003F38                     NCO1ACC         equ	16184	;# 
   899   003F38                     NCO1ACCL        equ	16184	;# 
   900   003F39                     NCO1ACCH        equ	16185	;# 
   901   003F3A                     NCO1ACCU        equ	16186	;# 
   902   003F3B                     NCO1INC         equ	16187	;# 
   903   003F3B                     NCO1INCL        equ	16187	;# 
   904   003F3C                     NCO1INCH        equ	16188	;# 
   905   003F3D                     NCO1INCU        equ	16189	;# 
   906   003F3E                     NCO1CON         equ	16190	;# 
   907   003F3F                     NCO1CLK         equ	16191	;# 
   908   003F40                     CWG3CLK         equ	16192	;# 
   909   003F40                     CWG3CLKCON      equ	16192	;# 
   910   003F41                     CWG3ISM         equ	16193	;# 
   911   003F42                     CWG3DBR         equ	16194	;# 
   912   003F43                     CWG3DBF         equ	16195	;# 
   913   003F44                     CWG3CON0        equ	16196	;# 
   914   003F45                     CWG3CON1        equ	16197	;# 
   915   003F46                     CWG3AS0         equ	16198	;# 
   916   003F47                     CWG3AS1         equ	16199	;# 
   917   003F48                     CWG3STR         equ	16200	;# 
   918   003F49                     CWG2CLK         equ	16201	;# 
   919   003F49                     CWG2CLKCON      equ	16201	;# 
   920   003F4A                     CWG2ISM         equ	16202	;# 
   921   003F4B                     CWG2DBR         equ	16203	;# 
   922   003F4C                     CWG2DBF         equ	16204	;# 
   923   003F4D                     CWG2CON0        equ	16205	;# 
   924   003F4E                     CWG2CON1        equ	16206	;# 
   925   003F4F                     CWG2AS0         equ	16207	;# 
   926   003F50                     CWG2AS1         equ	16208	;# 
   927   003F51                     CWG2STR         equ	16209	;# 
   928   003F52                     CWG1CLK         equ	16210	;# 
   929   003F52                     CWG1CLKCON      equ	16210	;# 
   930   003F53                     CWG1ISM         equ	16211	;# 
   931   003F54                     CWG1DBR         equ	16212	;# 
   932   003F55                     CWG1DBF         equ	16213	;# 
   933   003F56                     CWG1CON0        equ	16214	;# 
   934   003F57                     CWG1CON1        equ	16215	;# 
   935   003F58                     CWG1AS0         equ	16216	;# 
   936   003F59                     CWG1AS1         equ	16217	;# 
   937   003F5A                     CWG1STR         equ	16218	;# 
   938   003F5E                     CCPTMRS0        equ	16222	;# 
   939   003F5F                     CCPTMRS1        equ	16223	;# 
   940   003F60                     PWM8DC          equ	16224	;# 
   941   003F60                     PWM8DCL         equ	16224	;# 
   942   003F61                     PWM8DCH         equ	16225	;# 
   943   003F62                     PWM8CON         equ	16226	;# 
   944   003F64                     PWM7DC          equ	16228	;# 
   945   003F64                     PWM7DCL         equ	16228	;# 
   946   003F65                     PWM7DCH         equ	16229	;# 
   947   003F66                     PWM7CON         equ	16230	;# 
   948   003F68                     PWM6DC          equ	16232	;# 
   949   003F68                     PWM6DCL         equ	16232	;# 
   950   003F69                     PWM6DCH         equ	16233	;# 
   951   003F6A                     PWM6CON         equ	16234	;# 
   952   003F6C                     PWM5DC          equ	16236	;# 
   953   003F6C                     PWM5DCL         equ	16236	;# 
   954   003F6D                     PWM5DCH         equ	16237	;# 
   955   003F6E                     PWM5CON         equ	16238	;# 
   956   003F70                     CCPR4           equ	16240	;# 
   957   003F70                     CCPR4L          equ	16240	;# 
   958   003F71                     CCPR4H          equ	16241	;# 
   959   003F72                     CCP4CON         equ	16242	;# 
   960   003F73                     CCP4CAP         equ	16243	;# 
   961   003F74                     CCPR3           equ	16244	;# 
   962   003F74                     CCPR3L          equ	16244	;# 
   963   003F75                     CCPR3H          equ	16245	;# 
   964   003F76                     CCP3CON         equ	16246	;# 
   965   003F77                     CCP3CAP         equ	16247	;# 
   966   003F78                     CCPR2           equ	16248	;# 
   967   003F78                     CCPR2L          equ	16248	;# 
   968   003F79                     CCPR2H          equ	16249	;# 
   969   003F7A                     CCP2CON         equ	16250	;# 
   970   003F7B                     CCP2CAP         equ	16251	;# 
   971   003F7C                     CCPR1           equ	16252	;# 
   972   003F7C                     CCPR1L          equ	16252	;# 
   973   003F7D                     CCPR1H          equ	16253	;# 
   974   003F7E                     CCP1CON         equ	16254	;# 
   975   003F7F                     CCP1CAP         equ	16255	;# 
   976   003F80                     RXB0CON         equ	16256	;# 
   977   003F81                     RXB0SIDH        equ	16257	;# 
   978   003F82                     RXB0SIDL        equ	16258	;# 
   979   003F83                     RXB0EIDH        equ	16259	;# 
   980   003F84                     RXB0EIDL        equ	16260	;# 
   981   003F85                     RXB0DLC         equ	16261	;# 
   982   003F86                     RXB0D0          equ	16262	;# 
   983   003F87                     RXB0D1          equ	16263	;# 
   984   003F88                     RXB0D2          equ	16264	;# 
   985   003F89                     RXB0D3          equ	16265	;# 
   986   003F8A                     RXB0D4          equ	16266	;# 
   987   003F8B                     RXB0D5          equ	16267	;# 
   988   003F8C                     RXB0D6          equ	16268	;# 
   989   003F8D                     RXB0D7          equ	16269	;# 
   990   003F8E                     CANSTAT         equ	16270	;# 
   991   003F8F                     CANCON          equ	16271	;# 
   992   003F90                     COMSTAT         equ	16272	;# 
   993   003F91                     ECANCON         equ	16273	;# 
   994   003F92                     T6TMR           equ	16274	;# 
   995   003F92                     TMR6            equ	16274	;# 
   996   003F93                     T6PR            equ	16275	;# 
   997   003F93                     PR6             equ	16275	;# 
   998   003F94                     T6CON           equ	16276	;# 
   999   003F95                     T6HLT           equ	16277	;# 
  1000   003F96                     T6CLKCON        equ	16278	;# 
  1001   003F96                     T6CLK           equ	16278	;# 
  1002   003F97                     T6RST           equ	16279	;# 
  1003   003F98                     TMR5            equ	16280	;# 
  1004   003F98                     TMR5L           equ	16280	;# 
  1005   003F99                     TMR5H           equ	16281	;# 
  1006   003F9A                     T5CON           equ	16282	;# 
  1007   003F9A                     TMR5CON         equ	16282	;# 
  1008   003F9B                     T5GCON          equ	16283	;# 
  1009   003F9B                     TMR5GCON        equ	16283	;# 
  1010   003F9C                     T5GATE          equ	16284	;# 
  1011   003F9C                     TMR5GATE        equ	16284	;# 
  1012   003F9D                     T5CLK           equ	16285	;# 
  1013   003F9D                     TMR5CLK         equ	16285	;# 
  1014   003F9D                     PR5             equ	16285	;# 
  1015   003F9E                     T4TMR           equ	16286	;# 
  1016   003F9E                     TMR4            equ	16286	;# 
  1017   003F9F                     T4PR            equ	16287	;# 
  1018   003F9F                     PR4             equ	16287	;# 
  1019   003FA0                     T4CON           equ	16288	;# 
  1020   003FA1                     T4HLT           equ	16289	;# 
  1021   003FA2                     T4CLKCON        equ	16290	;# 
  1022   003FA2                     T4CLK           equ	16290	;# 
  1023   003FA3                     T4RST           equ	16291	;# 
  1024   003FA4                     TMR3            equ	16292	;# 
  1025   003FA4                     TMR3L           equ	16292	;# 
  1026   003FA5                     TMR3H           equ	16293	;# 
  1027   003FA6                     T3CON           equ	16294	;# 
  1028   003FA6                     TMR3CON         equ	16294	;# 
  1029   003FA7                     T3GCON          equ	16295	;# 
  1030   003FA7                     TMR3GCON        equ	16295	;# 
  1031   003FA8                     T3GATE          equ	16296	;# 
  1032   003FA8                     TMR3GATE        equ	16296	;# 
  1033   003FA9                     T3CLK           equ	16297	;# 
  1034   003FA9                     TMR3CLK         equ	16297	;# 
  1035   003FA9                     PR3             equ	16297	;# 
  1036   003FAA                     T2TMR           equ	16298	;# 
  1037   003FAA                     TMR2            equ	16298	;# 
  1038   003FAB                     T2PR            equ	16299	;# 
  1039   003FAB                     PR2             equ	16299	;# 
  1040   003FAC                     T2CON           equ	16300	;# 
  1041   003FAD                     T2HLT           equ	16301	;# 
  1042   003FAE                     T2CLKCON        equ	16302	;# 
  1043   003FAE                     T2CLK           equ	16302	;# 
  1044   003FAF                     T2RST           equ	16303	;# 
  1045   003FB0                     TMR1            equ	16304	;# 
  1046   003FB0                     TMR1L           equ	16304	;# 
  1047   003FB1                     TMR1H           equ	16305	;# 
  1048   003FB2                     T1CON           equ	16306	;# 
  1049   003FB2                     TMR1CON         equ	16306	;# 
  1050   003FB3                     T1GCON          equ	16307	;# 
  1051   003FB3                     TMR1GCON        equ	16307	;# 
  1052   003FB4                     T1GATE          equ	16308	;# 
  1053   003FB4                     TMR1GATE        equ	16308	;# 
  1054   003FB5                     T1CLK           equ	16309	;# 
  1055   003FB5                     TMR1CLK         equ	16309	;# 
  1056   003FB5                     PR1             equ	16309	;# 
  1057   003FB6                     TMR0L           equ	16310	;# 
  1058   003FB6                     TMR0            equ	16310	;# 
  1059   003FB7                     TMR0H           equ	16311	;# 
  1060   003FB7                     PR0             equ	16311	;# 
  1061   003FB8                     T0CON0          equ	16312	;# 
  1062   003FB9                     T0CON1          equ	16313	;# 
  1063   003FBA                     LATA            equ	16314	;# 
  1064   003FBB                     LATB            equ	16315	;# 
  1065   003FBC                     LATC            equ	16316	;# 
  1066   003FC2                     TRISA           equ	16322	;# 
  1067   003FC3                     TRISB           equ	16323	;# 
  1068   003FC4                     TRISC           equ	16324	;# 
  1069   003FCA                     PORTA           equ	16330	;# 
  1070   003FCB                     PORTB           equ	16331	;# 
  1071   003FCC                     PORTC           equ	16332	;# 
  1072   003FCE                     PORTE           equ	16334	;# 
  1073   003FD2                     INTCON0         equ	16338	;# 
  1074   003FD3                     INTCON1         equ	16339	;# 
  1075   003FD4                     IVTLOCK         equ	16340	;# 
  1076   003FD5                     IVTBASE         equ	16341	;# 
  1077   003FD5                     IVTBASEL        equ	16341	;# 
  1078   003FD6                     IVTBASEH        equ	16342	;# 
  1079   003FD7                     IVTBASEU        equ	16343	;# 
  1080   003FD8                     STATUS          equ	16344	;# 
  1081   003FD9                     FSR2            equ	16345	;# 
  1082   003FD9                     FSR2L           equ	16345	;# 
  1083   003FDA                     FSR2H           equ	16346	;# 
  1084   003FDB                     PLUSW2          equ	16347	;# 
  1085   003FDC                     PREINC2         equ	16348	;# 
  1086   003FDD                     POSTDEC2        equ	16349	;# 
  1087   003FDE                     POSTINC2        equ	16350	;# 
  1088   003FDF                     INDF2           equ	16351	;# 
  1089   003FE0                     BSR             equ	16352	;# 
  1090   003FE1                     FSR1            equ	16353	;# 
  1091   003FE1                     FSR1L           equ	16353	;# 
  1092   003FE2                     FSR1H           equ	16354	;# 
  1093   003FE3                     PLUSW1          equ	16355	;# 
  1094   003FE4                     PREINC1         equ	16356	;# 
  1095   003FE5                     POSTDEC1        equ	16357	;# 
  1096   003FE6                     POSTINC1        equ	16358	;# 
  1097   003FE7                     INDF1           equ	16359	;# 
  1098   003FE8                     WREG            equ	16360	;# 
  1099   003FE9                     FSR0            equ	16361	;# 
  1100   003FE9                     FSR0L           equ	16361	;# 
  1101   003FEA                     FSR0H           equ	16362	;# 
  1102   003FEB                     PLUSW0          equ	16363	;# 
  1103   003FEC                     PREINC0         equ	16364	;# 
  1104   003FED                     POSTDEC0        equ	16365	;# 
  1105   003FEE                     POSTINC0        equ	16366	;# 
  1106   003FEF                     INDF0           equ	16367	;# 
  1107   003FF0                     PCON0           equ	16368	;# 
  1108   003FF1                     PCON1           equ	16369	;# 
  1109   003FF3                     PROD            equ	16371	;# 
  1110   003FF3                     PRODL           equ	16371	;# 
  1111   003FF4                     PRODH           equ	16372	;# 
  1112   003FF5                     TABLAT          equ	16373	;# 
  1113   003FF6                     TBLPTR          equ	16374	;# 
  1114   003FF6                     TBLPTRL         equ	16374	;# 
  1115   003FF7                     TBLPTRH         equ	16375	;# 
  1116   003FF8                     TBLPTRU         equ	16376	;# 
  1117   003FF9                     PCLAT           equ	16377	;# 
  1118   003FF9                     PCL             equ	16377	;# 
  1119   003FFA                     PCLATH          equ	16378	;# 
  1120   003FFB                     PCLATU          equ	16379	;# 
  1121   003FFC                     STKPTR          equ	16380	;# 
  1122   003FFD                     TOS             equ	16381	;# 
  1123   003FFD                     TOSL            equ	16381	;# 
  1124   003FFE                     TOSH            equ	16382	;# 
  1125   003FFF                     TOSU            equ	16383	;# 
  1126   0039A3                     _PIR3bits       set	14755
  1127   003A13                     _RC3PPS         set	14867
  1128   003A15                     _RC5PPS         set	14869
  1129   003AE1                     _SPI1SDIPPS     set	15073
  1130   003A0A                     _RB2PPS         set	14858
  1131   003A09                     _RB1PPS         set	14857
  1132   003AE6                     _I2C2SDAPPS     set	15078
  1133   003AE5                     _I2C2SCLPPS     set	15077
  1134   003A16                     _RC6PPS         set	14870
  1135   003AE7                     _U1RXPPS        set	15079
  1136   003A52                     _ODCONB         set	14930
  1137   003A60                     _ANSELC         set	14944
  1138   003A50                     _ANSELB         set	14928
  1139   003A40                     _ANSELA         set	14912
  1140   003DF5                     _U1BRG          set	15861
  1141   003D19                     _SPI1BAUD       set	15641
  1142   003D1C                     _SPI1CLK        set	15644
  1143   003D15                     _SPI1CON1       set	15637
  1144   003D14                     _SPI1CON0       set	15636
  1145   003D65                     _I2C2CLK        set	15717
  1146   003D5D                     _I2C2CON0       set	15709
  1147   003DF4                     _U1CON2         set	15860
  1148   003DF3                     _U1CON1         set	15859
  1149   003DF2                     _U1CON0         set	15858
  1150   003D10                     _SPI1RXB        set	15632
  1151   003D17                     _SPI1STATUSbits set	15639
  1152   003D11                     _SPI1TXB        set	15633
  1153   003D16                     _SPI1CON2bits   set	15638
  1154   003D13                     _SPI1TCNTH      set	15635
  1155   003D12                     _SPI1TCNTL      set	15634
  1156   003D18                     _SPI1TWIDTH     set	15640
  1157   003D14                     _SPI1CON0bits   set	15636
  1158   003DEA                     _U1TXB          set	15850
  1159   003FCC                     _PORTCbits      set	16332
  1160   003FCC                     _PORTC          set	16332
  1161   003FCB                     _PORTB          set	16331
  1162   003FC4                     _TRISC          set	16324
  1163   003FC3                     _TRISB          set	16323
  1164   003FC2                     _TRISA          set	16322
  1165   003FCB                     _PORTBbits      set	16331
  1166   003FCA                     _PORTAbits      set	16330
  1167                           
  1168                           	psect	smallconst
  1169   001000                     __psmallconst:
  1170                           	callstack 0
  1171   001000  00                 	db	0
  1172   001001                     STR_1:
  1173   001001  30                 	db	48	;'0'
  1174   001002  31                 	db	49	;'1'
  1175   001003  32                 	db	50	;'2'
  1176   001004  33                 	db	51	;'3'
  1177   001005  34                 	db	52	;'4'
  1178   001006  35                 	db	53	;'5'
  1179   001007  36                 	db	54	;'6'
  1180   001008  37                 	db	55	;'7'
  1181   001009  38                 	db	56	;'8'
  1182   00100A  39                 	db	57	;'9'
  1183   00100B  41                 	db	65	;'A'
  1184   00100C  42                 	db	66	;'B'
  1185   00100D  43                 	db	67	;'C'
  1186   00100E  44                 	db	68	;'D'
  1187   00100F  45                 	db	69	;'E'
  1188   001010  46                 	db	70	;'F'
  1189   001011  00                 	db	0
  1190   001012                     STR_2:
  1191   001012  5B                 	db	91	;'['
  1192   001013  30                 	db	48	;'0'
  1193   001014  78                 	db	120	;'x'
  1194   001015  25                 	db	37
  1195   001016  30                 	db	48	;'0'
  1196   001017  33                 	db	51	;'3'
  1197   001018  58                 	db	88	;'X'
  1198   001019  5D                 	db	93	;']'
  1199   00101A  3D                 	db	61	;'='
  1200   00101B  25                 	db	37
  1201   00101C  73                 	db	115	;'s'
  1202   00101D  00                 	db	0
  1203   00101E                     STR_3:
  1204   00101E  28                 	db	40
  1205   00101F  6E                 	db	110	;'n'
  1206   001020  75                 	db	117	;'u'
  1207   001021  6C                 	db	108	;'l'
  1208   001022  6C                 	db	108	;'l'
  1209   001023  29                 	db	41
  1210   001024  00                 	db	0
  1211   001025  00                 	db	0	; dummy byte at the end
  1212   001000                     __smallconst    set	__psmallconst
  1213   001000                     __mediumconst   set	__psmallconst
  1214   000002                     __activetblptr  equ	2
  1215                           
  1216                           ; #config settings
  1217                           
  1218                           	psect	cinit
  1219   001D52                     __pcinit:
  1220                           	callstack 0
  1221   001D52                     start_initialization:
  1222                           	callstack 0
  1223   001D52                     __initialization:
  1224                           	callstack 0
  1225                           
  1226                           ; Clear objects allocated to BANK0 (36 bytes)
  1227   001D52  EE00  F060         	lfsr	0,__pbssBANK0
  1228   001D56  0E24               	movlw	36
  1229   001D58                     clear_0:
  1230   001D58  6AEE               	clrf	postinc0,c
  1231   001D5A  06E8               	decf	wreg,f,c
  1232   001D5C  E1FD               	bnz	clear_0
  1233                           
  1234                           ; Clear objects allocated to COMRAM (1 bytes)
  1235   001D5E  6A5F               	clrf	__pbssCOMRAM& (0+255),c
  1236   001D60                     end_of_initialization:
  1237                           	callstack 0
  1238   001D60                     __end_of__initialization:
  1239                           	callstack 0
  1240   001D60  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1241   001D62  6EF8               	movwf	tblptru,c
  1242   001D64  0100               	movlb	0
  1243   001D66  EF46  F009         	goto	_main	;jump to C main() function
  1244                           
  1245                           	psect	bssCOMRAM
  1246   00005F                     __pbssCOMRAM:
  1247                           	callstack 0
  1248   00005F                     _flags:
  1249                           	callstack 0
  1250   00005F                     	ds	1
  1251                           
  1252                           	psect	bssBANK0
  1253   000060                     __pbssBANK0:
  1254                           	callstack 0
  1255   000060                     _width:
  1256                           	callstack 0
  1257   000060                     	ds	2
  1258   000062                     _prec:
  1259                           	callstack 0
  1260   000062                     	ds	2
  1261   000064                     _dbuf:
  1262                           	callstack 0
  1263   000064                     	ds	32
  1264                           
  1265                           	psect	cstackCOMRAM
  1266   000001                     __pcstackCOMRAM:
  1267                           	callstack 0
  1268   000001                     ?_read_prec_or_width:
  1269                           	callstack 0
  1270   000001                     Lcd_Port@a:
  1271                           	callstack 0
  1272   000001                     u8_hex@out:
  1273                           	callstack 0
  1274   000001                     uart_send_string@s:
  1275                           	callstack 0
  1276   000001                     read_prec_or_width@fmt:
  1277                           	callstack 0
  1278   000001                     eeprom_read_8@addr:
  1279                           	callstack 0
  1280   000001                     eeprom_write_8@addr:
  1281                           	callstack 0
  1282   000001                     fputc@c:
  1283                           	callstack 0
  1284   000001                     
  1285                           ; 1 bytes @ 0x0
  1286   000001                     	ds	1
  1287   000002                     Lcd_Write_Char@temp:
  1288                           	callstack 0
  1289   000002                     u8_hex@v:
  1290                           	callstack 0
  1291   000002                     read_prec_or_width@ap:
  1292                           	callstack 0
  1293   000002                     ??_Lcd_Cmd:
  1294   000002                     
  1295                           ; 1 bytes @ 0x1
  1296   000002                     	ds	1
  1297   000003                     Lcd_Cmd@a:
  1298                           	callstack 0
  1299   000003                     Lcd_Write_Char@y:
  1300                           	callstack 0
  1301   000003                     eeprom_write_8@data:
  1302                           	callstack 0
  1303   000003                     fputc@fp:
  1304                           	callstack 0
  1305   000003                     ??_u8_hex:
  1306   000003                     ??_eeprom_read_8:
  1307   000003                     ??_read_prec_or_width:
  1308                           
  1309                           ; 1 bytes @ 0x2
  1310   000003                     	ds	1
  1311   000004                     Lcd_Set_Cursor@b:
  1312                           	callstack 0
  1313   000004                     Lcd_Write_Char@a:
  1314                           	callstack 0
  1315   000004                     ??_fputc:
  1316   000004                     ??_Lcd_Init:
  1317   000004                     ??_eeprom_write_8:
  1318                           
  1319                           ; 1 bytes @ 0x3
  1320   000004                     	ds	1
  1321   000005                     Lcd_Set_Cursor@a:
  1322                           	callstack 0
  1323   000005                     Lcd_Write_String@a:
  1324                           	callstack 0
  1325   000005                     u8_hex@h:
  1326                           	callstack 0
  1327   000005                     read_prec_or_width@c:
  1328                           	callstack 0
  1329   000005                     
  1330                           ; 1 bytes @ 0x4
  1331   000005                     	ds	1
  1332   000006                     Lcd_Set_Cursor@z:
  1333                           	callstack 0
  1334   000006                     eeprom_read_8@b1:
  1335                           	callstack 0
  1336   000006                     Lcd_Write_String@i:
  1337                           	callstack 0
  1338   000006                     read_prec_or_width@n:
  1339                           	callstack 0
  1340   000006                     
  1341                           ; 1 bytes @ 0x5
  1342   000006                     	ds	1
  1343   000007                     Lcd_Set_Cursor@y:
  1344                           	callstack 0
  1345   000007                     eeprom_read_8@b2:
  1346                           	callstack 0
  1347   000007                     eeprom_write_8@b1:
  1348                           	callstack 0
  1349                           
  1350                           ; 1 bytes @ 0x6
  1351   000007                     	ds	1
  1352   000008                     Lcd_Set_Cursor@temp:
  1353                           	callstack 0
  1354   000008                     eeprom_read_8@val2:
  1355                           	callstack 0
  1356   000008                     eeprom_write_8@b2:
  1357                           	callstack 0
  1358                           
  1359                           ; 1 bytes @ 0x7
  1360   000008                     	ds	1
  1361   000009                     eeprom_read_8@val3:
  1362                           	callstack 0
  1363   000009                     eeprom_write_8@b3:
  1364                           	callstack 0
  1365   000009                     stoa@fp:
  1366                           	callstack 0
  1367   000009                     fputs@s:
  1368                           	callstack 0
  1369                           
  1370                           ; 1 bytes @ 0x8
  1371   000009                     	ds	1
  1372   00000A                     stoa@s:
  1373                           	callstack 0
  1374   00000A                     fputs@fp:
  1375                           	callstack 0
  1376                           
  1377                           ; 1 bytes @ 0x9
  1378   00000A                     	ds	1
  1379   00000B                     fputs@c:
  1380                           	callstack 0
  1381   00000B                     ??_stoa:
  1382                           
  1383                           ; 1 bytes @ 0xA
  1384   00000B                     	ds	1
  1385   00000C                     fputs@i:
  1386                           	callstack 0
  1387                           
  1388                           ; 2 bytes @ 0xB
  1389   00000C                     	ds	1
  1390   00000D                     stoa@p:
  1391                           	callstack 0
  1392                           
  1393                           ; 2 bytes @ 0xC
  1394   00000D                     	ds	1
  1395   00000E                     pad@fp:
  1396                           	callstack 0
  1397                           
  1398                           ; 1 bytes @ 0xD
  1399   00000E                     	ds	1
  1400   00000F                     pad@buf:
  1401                           	callstack 0
  1402   00000F                     stoa@w:
  1403                           	callstack 0
  1404                           
  1405                           ; 2 bytes @ 0xE
  1406   00000F                     	ds	1
  1407   000010                     pad@p:
  1408                           	callstack 0
  1409                           
  1410                           ; 2 bytes @ 0xF
  1411   000010                     	ds	1
  1412   000011                     stoa@cp:
  1413                           	callstack 0
  1414                           
  1415                           ; 2 bytes @ 0x10
  1416   000011                     	ds	1
  1417   000012                     ??_pad:
  1418                           
  1419                           ; 1 bytes @ 0x11
  1420   000012                     	ds	1
  1421   000013                     pad@i:
  1422                           	callstack 0
  1423   000013                     stoa@l:
  1424                           	callstack 0
  1425                           
  1426                           ; 2 bytes @ 0x12
  1427   000013                     	ds	2
  1428   000015                     xtoa@fp:
  1429                           	callstack 0
  1430                           
  1431                           ; 1 bytes @ 0x14
  1432   000015                     	ds	1
  1433   000016                     xtoa@d:
  1434                           	callstack 0
  1435                           
  1436                           ; 2 bytes @ 0x15
  1437   000016                     	ds	2
  1438   000018                     ??_xtoa:
  1439                           
  1440                           ; 1 bytes @ 0x17
  1441   000018                     	ds	3
  1442   00001B                     xtoa@p:
  1443                           	callstack 0
  1444                           
  1445                           ; 1 bytes @ 0x1A
  1446   00001B                     	ds	1
  1447   00001C                     xtoa@w:
  1448                           	callstack 0
  1449                           
  1450                           ; 2 bytes @ 0x1B
  1451   00001C                     	ds	2
  1452   00001E                     xtoa@c:
  1453                           	callstack 0
  1454                           
  1455                           ; 1 bytes @ 0x1D
  1456   00001E                     	ds	1
  1457   00001F                     xtoa@i:
  1458                           	callstack 0
  1459                           
  1460                           ; 2 bytes @ 0x1E
  1461   00001F                     	ds	2
  1462   000021                     vfpfcnvrt@fp:
  1463                           	callstack 0
  1464                           
  1465                           ; 1 bytes @ 0x20
  1466   000021                     	ds	1
  1467   000022                     vfpfcnvrt@fmt:
  1468                           	callstack 0
  1469                           
  1470                           ; 1 bytes @ 0x21
  1471   000022                     	ds	1
  1472   000023                     vfpfcnvrt@ap:
  1473                           	callstack 0
  1474                           
  1475                           ; 2 bytes @ 0x22
  1476   000023                     	ds	2
  1477   000025                     ??_vfpfcnvrt:
  1478                           
  1479                           ; 1 bytes @ 0x24
  1480   000025                     	ds	1
  1481   000026                     vfpfcnvrt@convarg:
  1482                           	callstack 0
  1483                           
  1484                           ; 4 bytes @ 0x25
  1485   000026                     	ds	4
  1486   00002A                     vfpfcnvrt@cp:
  1487                           	callstack 0
  1488                           
  1489                           ; 1 bytes @ 0x29
  1490   00002A                     	ds	1
  1491   00002B                     vfpfcnvrt@done:
  1492                           	callstack 0
  1493                           
  1494                           ; 1 bytes @ 0x2A
  1495   00002B                     	ds	1
  1496   00002C                     ?_vfprintf:
  1497                           	callstack 0
  1498   00002C                     vfprintf@fp:
  1499                           	callstack 0
  1500                           
  1501                           ; 1 bytes @ 0x2B
  1502   00002C                     	ds	1
  1503   00002D                     vfprintf@fmt:
  1504                           	callstack 0
  1505                           
  1506                           ; 1 bytes @ 0x2C
  1507   00002D                     	ds	1
  1508   00002E                     vfprintf@ap:
  1509                           	callstack 0
  1510                           
  1511                           ; 1 bytes @ 0x2D
  1512   00002E                     	ds	1
  1513   00002F                     vfprintf@cfmt:
  1514                           	callstack 0
  1515   00002F                     
  1516                           ; 1 bytes @ 0x2E
  1517   00002F                     	ds	1
  1518   000030                     ?_sprintf:
  1519                           	callstack 0
  1520   000030                     sprintf@s:
  1521                           	callstack 0
  1522                           
  1523                           ; 1 bytes @ 0x2F
  1524   000030                     	ds	1
  1525   000031                     sprintf@fmt:
  1526                           	callstack 0
  1527                           
  1528                           ; 1 bytes @ 0x30
  1529   000031                     	ds	5
  1530   000036                     sprintf@ap:
  1531                           	callstack 0
  1532   000036                     
  1533                           ; 1 bytes @ 0x35
  1534   000036                     	ds	1
  1535   000037                     sprintf@f:
  1536                           	callstack 0
  1537                           
  1538                           ; 11 bytes @ 0x36
  1539   000037                     	ds	11
  1540   000042                     ??_main:
  1541                           
  1542                           ; 1 bytes @ 0x41
  1543   000042                     	ds	2
  1544   000044                     main@buf:
  1545                           	callstack 0
  1546                           
  1547                           ; 16 bytes @ 0x43
  1548   000044                     	ds	16
  1549   000054                     main@hx:
  1550                           	callstack 0
  1551                           
  1552                           ; 8 bytes @ 0x53
  1553   000054                     	ds	8
  1554   00005C                     main@data:
  1555                           	callstack 0
  1556                           
  1557                           ; 1 bytes @ 0x5B
  1558   00005C                     	ds	1
  1559   00005D                     main@r:
  1560                           	callstack 0
  1561                           
  1562                           ; 1 bytes @ 0x5C
  1563   00005D                     	ds	1
  1564   00005E                     main@etatC0:
  1565                           	callstack 0
  1566                           
  1567                           ; 1 bytes @ 0x5D
  1568   00005E                     	ds	1
  1569                           
  1570 ;;
  1571 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1572 ;;
  1573 ;; *************** function _main *****************
  1574 ;; Defined at:
  1575 ;;		line 196 in file "EXO4SPI26K83.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  buf            16   67[COMRAM] unsigned char [16]
  1580 ;;  hx              8   83[COMRAM] unsigned char [8]
  1581 ;;  addr            2    0        unsigned short 
  1582 ;;  r               1   92[COMRAM] unsigned char 
  1583 ;;  data            1   91[COMRAM] unsigned char 
  1584 ;;  etatC0          1   93[COMRAM] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Locals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;Total ram usage:       29 bytes
  1599 ;; Hardware stack levels required when called: 7
  1600 ;; This function calls:
  1601 ;;		_Lcd_Clear
  1602 ;;		_Lcd_Init
  1603 ;;		_Lcd_Set_Cursor
  1604 ;;		_Lcd_Write_String
  1605 ;;		_eeprom_read_8
  1606 ;;		_eeprom_write_8
  1607 ;;		_sprintf
  1608 ;;		_u8_hex
  1609 ;;		_uart_send_string
  1610 ;; This function is called by:
  1611 ;;		Startup code after reset
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text0
  1616   00128C                     __ptext0:
  1617                           	callstack 0
  1618   00128C                     _main:
  1619                           	callstack 24
  1620   00128C                     
  1621                           ;EXO4SPI26K83.c: 197:     char etatC0 = 1;
  1622   00128C  0E01               	movlw	1
  1623   00128E  6E5E               	movwf	main@etatC0^0,c
  1624                           
  1625                           ;EXO4SPI26K83.c: 200:     TRISA = 0b11000000;
  1626   001290  0EC0               	movlw	192
  1627   001292  6EC2               	movwf	194,c	;volatile
  1628   001294                     
  1629                           ;EXO4SPI26K83.c: 201:     TRISB = 0;
  1630   001294  6AC3               	clrf	195,c	;volatile
  1631                           
  1632                           ;EXO4SPI26K83.c: 202:     TRISC = 0b10010011;
  1633   001296  0E93               	movlw	147
  1634   001298  6EC4               	movwf	196,c	;volatile
  1635   00129A                     
  1636                           ;EXO4SPI26K83.c: 205:     ANSELA = 0;
  1637   00129A  013A               	movlb	58	; () banked
  1638   00129C  6B40               	clrf	64,b	;volatile
  1639   00129E                     
  1640                           ; BSR set to: 58
  1641                           ;EXO4SPI26K83.c: 206:     ANSELB = 0;
  1642   00129E  6B50               	clrf	80,b	;volatile
  1643   0012A0                     
  1644                           ; BSR set to: 58
  1645                           ;EXO4SPI26K83.c: 207:     ANSELC = 0;
  1646   0012A0  6B60               	clrf	96,b	;volatile
  1647                           
  1648                           ;EXO4SPI26K83.c: 208:     ODCONB = 0b00000110;
  1649   0012A2  0E06               	movlw	6
  1650   0012A4  6F52               	movwf	82,b	;volatile
  1651   0012A6                     
  1652                           ; BSR set to: 58
  1653                           ;EXO4SPI26K83.c: 209:     PORTB = 0;
  1654   0012A6  6ACB               	clrf	203,c	;volatile
  1655   0012A8                     
  1656                           ; BSR set to: 58
  1657                           ;EXO4SPI26K83.c: 210:     PORTC = 0;
  1658   0012A8  6ACC               	clrf	204,c	;volatile
  1659   0012AA                     
  1660                           ; BSR set to: 58
  1661                           ;EXO4SPI26K83.c: 211:     PORTBbits.RB3 = 0;
  1662   0012AA  96CB               	bcf	203,3,c	;volatile
  1663                           
  1664                           ;EXO4SPI26K83.c: 215:     U1RXPPS = 0b00010111;
  1665   0012AC  0E17               	movlw	23
  1666   0012AE  6FE7               	movwf	231,b	;volatile
  1667                           
  1668                           ;EXO4SPI26K83.c: 216:     RC6PPS = 0b00010011;
  1669   0012B0  0E13               	movlw	19
  1670   0012B2  6F16               	movwf	22,b	;volatile
  1671                           
  1672                           ;EXO4SPI26K83.c: 218:     I2C2SCLPPS = 0b00001001;
  1673   0012B4  0E09               	movlw	9
  1674   0012B6  6FE5               	movwf	229,b	;volatile
  1675                           
  1676                           ;EXO4SPI26K83.c: 219:     I2C2SDAPPS = 0b00001010;
  1677   0012B8  0E0A               	movlw	10
  1678   0012BA  6FE6               	movwf	230,b	;volatile
  1679                           
  1680                           ;EXO4SPI26K83.c: 220:     RB1PPS = 0b00100011;
  1681   0012BC  0E23               	movlw	35
  1682   0012BE  6F09               	movwf	9,b	;volatile
  1683                           
  1684                           ;EXO4SPI26K83.c: 221:     RB2PPS = 0b00100100;
  1685   0012C0  0E24               	movlw	36
  1686   0012C2  6F0A               	movwf	10,b	;volatile
  1687                           
  1688                           ;EXO4SPI26K83.c: 223:     SPI1SDIPPS = 0b00010100;
  1689   0012C4  0E14               	movlw	20
  1690   0012C6  6FE1               	movwf	225,b	;volatile
  1691                           
  1692                           ;EXO4SPI26K83.c: 224:     RC5PPS = 0b00011111;
  1693   0012C8  0E1F               	movlw	31
  1694   0012CA  6F15               	movwf	21,b	;volatile
  1695                           
  1696                           ;EXO4SPI26K83.c: 225:     RC3PPS = 0b00011110;
  1697   0012CC  0E1E               	movlw	30
  1698   0012CE  6F13               	movwf	19,b	;volatile
  1699                           
  1700                           ;EXO4SPI26K83.c: 228:     U1CON0 = 0b10100000;
  1701   0012D0  0EA0               	movlw	160
  1702   0012D2  013D               	movlb	61	; () banked
  1703   0012D4  6FF2               	movwf	242,b	;volatile
  1704                           
  1705                           ;EXO4SPI26K83.c: 229:     U1CON1 = 0b10000000;
  1706   0012D6  0E80               	movlw	128
  1707   0012D8  6FF3               	movwf	243,b	;volatile
  1708   0012DA                     
  1709                           ; BSR set to: 61
  1710                           ;EXO4SPI26K83.c: 230:     U1CON2 = 0;
  1711   0012DA  6BF4               	clrf	244,b	;volatile
  1712                           
  1713                           ;EXO4SPI26K83.c: 231:     U1BRG = 1666;
  1714   0012DC  0E06               	movlw	6
  1715   0012DE  6FF6               	movwf	246,b	;volatile
  1716   0012E0  0E82               	movlw	130
  1717   0012E2  6FF5               	movwf	245,b	;volatile
  1718                           
  1719                           ;EXO4SPI26K83.c: 235:     I2C2CON0 = 0b10000100;
  1720   0012E4  0E84               	movlw	132
  1721   0012E6  6F5D               	movwf	93,b	;volatile
  1722   0012E8                     
  1723                           ; BSR set to: 61
  1724                           ;EXO4SPI26K83.c: 236:     I2C2CLK = 0b00000000;
  1725   0012E8  6B65               	clrf	101,b	;volatile
  1726                           
  1727                           ;EXO4SPI26K83.c: 240:     SPI1CON0 = 0b00000010;
  1728   0012EA  0E02               	movlw	2
  1729   0012EC  6F14               	movwf	20,b	;volatile
  1730                           
  1731                           ;EXO4SPI26K83.c: 241:     SPI1CON1 = 0b11000000;
  1732   0012EE  0EC0               	movlw	192
  1733   0012F0  6F15               	movwf	21,b	;volatile
  1734   0012F2                     
  1735                           ; BSR set to: 61
  1736                           ;EXO4SPI26K83.c: 243:     SPI1TWIDTH = 0;
  1737   0012F2  6B18               	clrf	24,b	;volatile
  1738   0012F4                     
  1739                           ; BSR set to: 61
  1740                           ;EXO4SPI26K83.c: 244:     SPI1TCNTL = 0;
  1741   0012F4  6B12               	clrf	18,b	;volatile
  1742   0012F6                     
  1743                           ; BSR set to: 61
  1744                           ;EXO4SPI26K83.c: 245:     SPI1TCNTH = 0;
  1745   0012F6  6B13               	clrf	19,b	;volatile
  1746                           
  1747                           ;EXO4SPI26K83.c: 247:     SPI1CLK = 0b00000010;
  1748   0012F8  0E02               	movlw	2
  1749   0012FA  6F1C               	movwf	28,b	;volatile
  1750                           
  1751                           ;EXO4SPI26K83.c: 248:     SPI1BAUD = 100;
  1752   0012FC  0E64               	movlw	100
  1753   0012FE  6F19               	movwf	25,b	;volatile
  1754   001300                     
  1755                           ; BSR set to: 61
  1756                           ;EXO4SPI26K83.c: 251:     Lcd_Init();
  1757   001300  EC1B  F00D         	call	_Lcd_Init	;wreg free
  1758   001304                     
  1759                           ;EXO4SPI26K83.c: 252:     Lcd_Clear();
  1760   001304  ECB5  F00E         	call	_Lcd_Clear	;wreg free
  1761   001308                     
  1762                           ;EXO4SPI26K83.c: 253:     PORTBbits.RB5 = 1;
  1763   001308  8ACB               	bsf	203,5,c	;volatile
  1764   00130A                     
  1765                           ;EXO4SPI26K83.c: 254:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1766   00130A  0E09               	movlw	9
  1767   00130C  6E43               	movwf	(??_main+1)^0,c
  1768   00130E  0E1E               	movlw	30
  1769   001310  6E42               	movwf	??_main^0,c
  1770   001312  0EE4               	movlw	228
  1771   001314                     u1237:
  1772   001314  2EE8               	decfsz	wreg,f,c
  1773   001316  D7FE               	bra	u1237
  1774   001318  2E42               	decfsz	??_main^0,f,c
  1775   00131A  D7FC               	bra	u1237
  1776   00131C  2E43               	decfsz	(??_main+1)^0,f,c
  1777   00131E  D7FA               	bra	u1237
  1778   001320  D000               	nop2	
  1779   001322                     l1918:
  1780                           
  1781                           ;EXO4SPI26K83.c: 257:     {;EXO4SPI26K83.c: 258:         _delay((unsigned long)((100)*(6
      +                          4000000/4000.0)));
  1782   001322  0E09               	movlw	9
  1783   001324  6E43               	movwf	(??_main+1)^0,c
  1784   001326  0E1E               	movlw	30
  1785   001328  6E42               	movwf	??_main^0,c
  1786   00132A  0EE4               	movlw	228
  1787   00132C                     u1247:
  1788   00132C  2EE8               	decfsz	wreg,f,c
  1789   00132E  D7FE               	bra	u1247
  1790   001330  2E42               	decfsz	??_main^0,f,c
  1791   001332  D7FC               	bra	u1247
  1792   001334  2E43               	decfsz	(??_main+1)^0,f,c
  1793   001336  D7FA               	bra	u1247
  1794   001338  D000               	nop2	
  1795   00133A                     
  1796                           ;EXO4SPI26K83.c: 259:         PORTBbits.RB4 = !PORTBbits.RB4;
  1797   00133A  A8CB               	btfss	203,4,c	;volatile
  1798   00133C  EFA2  F009         	goto	u1171
  1799   001340  EFA6  F009         	goto	u1170
  1800   001344                     u1171:
  1801   001344  6A42               	clrf	??_main^0,c
  1802   001346  2A42               	incf	??_main^0,f,c
  1803   001348  EFA7  F009         	goto	u1188
  1804   00134C                     u1170:
  1805   00134C  6A42               	clrf	??_main^0,c
  1806   00134E                     u1188:
  1807   00134E  3A42               	swapf	??_main^0,f,c
  1808   001350  50CB               	movf	203,w,c	;volatile
  1809   001352  1842               	xorwf	??_main^0,w,c
  1810   001354  0BEF               	andlw	-17
  1811   001356  1842               	xorwf	??_main^0,w,c
  1812   001358  6ECB               	movwf	203,c	;volatile
  1813   00135A                     
  1814                           ;EXO4SPI26K83.c: 261:         if (PORTCbits.RC0 == 0 && etatC0 == 1)
  1815   00135A  B0CC               	btfsc	204,0,c	;volatile
  1816   00135C  EFB2  F009         	goto	u1191
  1817   001360  EFB4  F009         	goto	u1190
  1818   001364                     u1191:
  1819   001364  EFED  F009         	goto	l1946
  1820   001368                     u1190:
  1821   001368  045E               	decf	main@etatC0^0,w,c
  1822   00136A  A4D8               	btfss	status,2,c
  1823   00136C  EFBA  F009         	goto	u1201
  1824   001370  EFBC  F009         	goto	u1200
  1825   001374                     u1201:
  1826   001374  EFED  F009         	goto	l1946
  1827   001378                     u1200:
  1828   001378                     
  1829                           ;EXO4SPI26K83.c: 264:             uint8_t data = 0xA4;
  1830   001378  0EA4               	movlw	164
  1831   00137A  6E5C               	movwf	main@data^0,c
  1832   00137C                     
  1833                           ;EXO4SPI26K83.c: 265:             char buf[16], hx[8];;EXO4SPI26K83.c: 267:             
      +                          eeprom_write_8(addr, data);
  1834   00137C  6A02               	clrf	(eeprom_write_8@addr+1)^0,c
  1835   00137E  0E00               	movlw	0
  1836   001380  6E01               	movwf	eeprom_write_8@addr^0,c
  1837   001382  0EA4               	movlw	164
  1838   001384  6E03               	movwf	eeprom_write_8@data^0,c
  1839   001386  EC39  F00B         	call	_eeprom_write_8	;wreg free
  1840   00138A                     
  1841                           ;EXO4SPI26K83.c: 268:             uint8_t r = eeprom_read_8(addr);
  1842   00138A  6A02               	clrf	(eeprom_read_8@addr+1)^0,c
  1843   00138C  0E00               	movlw	0
  1844   00138E  6E01               	movwf	eeprom_read_8@addr^0,c
  1845   001390  ECEC  F00B         	call	_eeprom_read_8	;wreg free
  1846   001394  6E5D               	movwf	main@r^0,c
  1847   001396                     
  1848                           ;EXO4SPI26K83.c: 270:             u8_hex(hx, r);
  1849   001396  0E54               	movlw	low main@hx
  1850   001398  6E01               	movwf	u8_hex@out^0,c
  1851   00139A  C05D  F002         	movff	main@r,u8_hex@v
  1852   00139E  ECDB  F00C         	call	_u8_hex	;wreg free
  1853   0013A2                     
  1854                           ;EXO4SPI26K83.c: 271:             sprintf(buf, "[0x%03X]=%s", addr, hx);
  1855   0013A2  0E44               	movlw	low main@buf
  1856   0013A4  6E30               	movwf	sprintf@s^0,c
  1857   0013A6  0E12               	movlw	low STR_2
  1858   0013A8  6E31               	movwf	sprintf@fmt^0,c
  1859   0013AA  6A33               	clrf	(?_sprintf+3)^0,c
  1860   0013AC  0E00               	movlw	0
  1861   0013AE  6E32               	movwf	(?_sprintf+2)^0,c
  1862   0013B0  0E54               	movlw	low main@hx
  1863   0013B2  6E34               	movwf	(?_sprintf+4)^0,c
  1864   0013B4  6A35               	clrf	(?_sprintf+5)^0,c
  1865   0013B6  EC81  F00E         	call	_sprintf	;wreg free
  1866   0013BA                     
  1867                           ;EXO4SPI26K83.c: 273:             Lcd_Clear();
  1868   0013BA  ECB5  F00E         	call	_Lcd_Clear	;wreg free
  1869   0013BE                     
  1870                           ;EXO4SPI26K83.c: 274:             Lcd_Set_Cursor(1,1);
  1871   0013BE  0E01               	movlw	1
  1872   0013C0  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1873   0013C2  0E01               	movlw	1
  1874   0013C4  EC8C  F00D         	call	_Lcd_Set_Cursor
  1875   0013C8                     
  1876                           ;EXO4SPI26K83.c: 275:             Lcd_Write_String(buf);
  1877   0013C8  0E44               	movlw	low main@buf
  1878   0013CA  6E05               	movwf	Lcd_Write_String@a^0,c
  1879   0013CC  EC66  F00E         	call	_Lcd_Write_String	;wreg free
  1880   0013D0                     
  1881                           ;EXO4SPI26K83.c: 277:             uart_send_string(buf);
  1882   0013D0  0E44               	movlw	low main@buf
  1883   0013D2  6E01               	movwf	uart_send_string@s^0,c
  1884   0013D4  EC59  F00D         	call	_uart_send_string	;wreg free
  1885   0013D8                     
  1886                           ;EXO4SPI26K83.c: 279:             etatC0 = 0;
  1887   0013D8  6A5E               	clrf	main@etatC0^0,c
  1888   0013DA                     l1946:
  1889                           
  1890                           ;EXO4SPI26K83.c: 281:         if (PORTCbits.RC0 == 1 && etatC0 == 0)
  1891   0013DA  A0CC               	btfss	204,0,c	;volatile
  1892   0013DC  EFF2  F009         	goto	u1211
  1893   0013E0  EFF4  F009         	goto	u1210
  1894   0013E4                     u1211:
  1895   0013E4  EF91  F009         	goto	l1918
  1896   0013E8                     u1210:
  1897   0013E8  505E               	movf	main@etatC0^0,w,c
  1898   0013EA  A4D8               	btfss	status,2,c
  1899   0013EC  EFFA  F009         	goto	u1221
  1900   0013F0  EFFC  F009         	goto	u1220
  1901   0013F4                     u1221:
  1902   0013F4  EF91  F009         	goto	l1918
  1903   0013F8                     u1220:
  1904   0013F8                     
  1905                           ;EXO4SPI26K83.c: 282:         {;EXO4SPI26K83.c: 283:             etatC0 = 1;
  1906   0013F8  0E01               	movlw	1
  1907   0013FA  6E5E               	movwf	main@etatC0^0,c
  1908   0013FC                     
  1909                           ;EXO4SPI26K83.c: 284:             _delay((unsigned long)((10)*(64000000/4000.0)));
  1910   0013FC  0ED0               	movlw	208
  1911   0013FE  6E42               	movwf	??_main^0,c
  1912   001400  0ECA               	movlw	202
  1913   001402                     u1257:
  1914   001402  2EE8               	decfsz	wreg,f,c
  1915   001404  D7FE               	bra	u1257
  1916   001406  2E42               	decfsz	??_main^0,f,c
  1917   001408  D7FC               	bra	u1257
  1918   00140A  EF91  F009         	goto	l1918
  1919   00140E  EFFE  F07F         	goto	start
  1920   001412                     __end_of_main:
  1921                           	callstack 0
  1922                           
  1923 ;; *************** function _uart_send_string *****************
  1924 ;; Defined at:
  1925 ;;		line 105 in file "EXO4SPI26K83.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  s               1    0[COMRAM] PTR const unsigned char 
  1928 ;;		 -> main@buf(16), 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;		None
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1940 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;Total ram usage:        1 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text1
  1954   001AB2                     __ptext1:
  1955                           	callstack 0
  1956   001AB2                     _uart_send_string:
  1957                           	callstack 30
  1958   001AB2                     
  1959                           ;EXO4SPI26K83.c: 106:     while (*s) {
  1960   001AB2  EF6A  F00D         	goto	l1820
  1961   001AB6                     l135:
  1962   001AB6  0139               	movlb	57	; () banked
  1963   001AB8  A9A3               	btfss	163,4,b	;volatile
  1964   001ABA  EF61  F00D         	goto	u1051
  1965   001ABE  EF63  F00D         	goto	u1050
  1966   001AC2                     u1051:
  1967   001AC2  EF5B  F00D         	goto	l135
  1968   001AC6                     u1050:
  1969   001AC6                     
  1970                           ; BSR set to: 57
  1971                           ;EXO4SPI26K83.c: 108:         U1TXB = *s++;
  1972   001AC6  5001               	movf	uart_send_string@s^0,w,c
  1973   001AC8  6ED9               	movwf	fsr2l,c
  1974   001ACA  6ADA               	clrf	fsr2h,c
  1975   001ACC  50DF               	movf	indf2,w,c
  1976   001ACE  013D               	movlb	61	; () banked
  1977   001AD0  6FEA               	movwf	234,b	;volatile
  1978   001AD2                     
  1979                           ; BSR set to: 61
  1980   001AD2  2A01               	incf	uart_send_string@s^0,f,c
  1981   001AD4                     l1820:
  1982                           
  1983                           ;EXO4SPI26K83.c: 106:     while (*s) {
  1984   001AD4  5001               	movf	uart_send_string@s^0,w,c
  1985   001AD6  6ED9               	movwf	fsr2l,c
  1986   001AD8  6ADA               	clrf	fsr2h,c
  1987   001ADA  50DF               	movf	indf2,w,c
  1988   001ADC  A4D8               	btfss	status,2,c
  1989   001ADE  EF73  F00D         	goto	u1061
  1990   001AE2  EF75  F00D         	goto	u1060
  1991   001AE6                     u1061:
  1992   001AE6  EF5B  F00D         	goto	l135
  1993   001AEA                     u1060:
  1994   001AEA                     l139:
  1995   001AEA  0139               	movlb	57	; () banked
  1996   001AEC  A9A3               	btfss	163,4,b	;volatile
  1997   001AEE  EF7B  F00D         	goto	u1071
  1998   001AF2  EF7D  F00D         	goto	u1070
  1999   001AF6                     u1071:
  2000   001AF6  EF75  F00D         	goto	l139
  2001   001AFA                     u1070:
  2002   001AFA                     
  2003                           ; BSR set to: 57
  2004                           ;EXO4SPI26K83.c: 111:     U1TXB = '\r';
  2005   001AFA  0E0D               	movlw	13
  2006   001AFC  013D               	movlb	61	; () banked
  2007   001AFE  6FEA               	movwf	234,b	;volatile
  2008   001B00                     l142:
  2009   001B00  0139               	movlb	57	; () banked
  2010   001B02  A9A3               	btfss	163,4,b	;volatile
  2011   001B04  EF86  F00D         	goto	u1081
  2012   001B08  EF88  F00D         	goto	u1080
  2013   001B0C                     u1081:
  2014   001B0C  EF80  F00D         	goto	l142
  2015   001B10                     u1080:
  2016   001B10                     
  2017                           ; BSR set to: 57
  2018                           ;EXO4SPI26K83.c: 113:     U1TXB = '\n';
  2019   001B10  0E0A               	movlw	10
  2020   001B12  013D               	movlb	61	; () banked
  2021   001B14  6FEA               	movwf	234,b	;volatile
  2022   001B16                     
  2023                           ; BSR set to: 61
  2024   001B16  0012               	return		;funcret
  2025   001B18                     __end_of_uart_send_string:
  2026                           	callstack 0
  2027                           
  2028 ;; *************** function _u8_hex *****************
  2029 ;; Defined at:
  2030 ;;		line 100 in file "EXO4SPI26K83.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;  out             1    0[COMRAM] PTR unsigned char 
  2033 ;;		 -> main@hx(8), 
  2034 ;;  v               1    1[COMRAM] unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  h               1    4[COMRAM] PTR const unsigned char 
  2037 ;;		 -> STR_1(17), 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2047 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;Total ram usage:        5 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text2
  2061   0019B6                     __ptext2:
  2062                           	callstack 0
  2063   0019B6                     _u8_hex:
  2064                           	callstack 30
  2065   0019B6                     
  2066                           ;EXO4SPI26K83.c: 101:     const char *h="0123456789ABCDEF";
  2067   0019B6  0E01               	movlw	low STR_1
  2068   0019B8  6E05               	movwf	u8_hex@h^0,c
  2069   0019BA                     
  2070                           ;EXO4SPI26K83.c: 102:     out[0]='0'; out[1]='x'; out[2]=h[v>>4]; out[3]=h[v&0xF]; out[4
      +                          ]=0;
  2071   0019BA  5001               	movf	u8_hex@out^0,w,c
  2072   0019BC  6ED9               	movwf	fsr2l,c
  2073   0019BE  6ADA               	clrf	fsr2h,c
  2074   0019C0  0E30               	movlw	48
  2075   0019C2  6EDF               	movwf	indf2,c
  2076   0019C4  5001               	movf	u8_hex@out^0,w,c
  2077   0019C6  6ED9               	movwf	fsr2l,c
  2078   0019C8  6ADA               	clrf	fsr2h,c
  2079   0019CA  0E01               	movlw	1
  2080   0019CC  26D9               	addwf	fsr2l,f,c
  2081   0019CE  0E78               	movlw	120
  2082   0019D0  6EDF               	movwf	indf2,c
  2083   0019D2  C002  F003         	movff	u8_hex@v,??_u8_hex
  2084   0019D6  3A03               	swapf	??_u8_hex^0,f,c
  2085   0019D8  0E0F               	movlw	15
  2086   0019DA  1603               	andwf	??_u8_hex^0,f,c
  2087   0019DC  5005               	movf	u8_hex@h^0,w,c
  2088   0019DE  2403               	addwf	??_u8_hex^0,w,c
  2089   0019E0  6E04               	movwf	(??_u8_hex+1)^0,c
  2090   0019E2  0060  F013  FFF6   	movff	??_u8_hex+1,tblptrl
  2091   0019E8                     	if	1	;There is more than 1 active tblptr byte
  2092   0019E8  0E10               	movlw	high __smallconst
  2093   0019EA  6EF7               	movwf	tblptrh,c
  2094   0019EC                     	endif
  2095   0019EC                     	if	0	;tblptru may be non-zero
  2096   0019EC                     	endif
  2097   0019EC                     	if	0	;tblptru may be non-zero
  2098   0019EC                     	endif
  2099   0019EC  5001               	movf	u8_hex@out^0,w,c
  2100   0019EE  6ED9               	movwf	fsr2l,c
  2101   0019F0  6ADA               	clrf	fsr2h,c
  2102   0019F2  0E02               	movlw	2
  2103   0019F4  26D9               	addwf	fsr2l,f,c
  2104   0019F6  0008               	tblrd		*
  2105   0019F8  006F FFD7 FFDF     	movff	tablat,indf2
  2106   0019FE  C002  F003         	movff	u8_hex@v,??_u8_hex
  2107   001A02  0E0F               	movlw	15
  2108   001A04  1603               	andwf	??_u8_hex^0,f,c
  2109   001A06  5005               	movf	u8_hex@h^0,w,c
  2110   001A08  2403               	addwf	??_u8_hex^0,w,c
  2111   001A0A  6E04               	movwf	(??_u8_hex+1)^0,c
  2112   001A0C  0060  F013  FFF6   	movff	??_u8_hex+1,tblptrl
  2113   001A12                     	if	1	;There is more than 1 active tblptr byte
  2114   001A12  0E10               	movlw	high __smallconst
  2115   001A14  6EF7               	movwf	tblptrh,c
  2116   001A16                     	endif
  2117   001A16                     	if	0	;tblptru may be non-zero
  2118   001A16                     	endif
  2119   001A16                     	if	0	;tblptru may be non-zero
  2120   001A16                     	endif
  2121   001A16  5001               	movf	u8_hex@out^0,w,c
  2122   001A18  6ED9               	movwf	fsr2l,c
  2123   001A1A  6ADA               	clrf	fsr2h,c
  2124   001A1C  0E03               	movlw	3
  2125   001A1E  26D9               	addwf	fsr2l,f,c
  2126   001A20  0008               	tblrd		*
  2127   001A22  006F FFD7 FFDF     	movff	tablat,indf2
  2128   001A28  5001               	movf	u8_hex@out^0,w,c
  2129   001A2A  6ED9               	movwf	fsr2l,c
  2130   001A2C  6ADA               	clrf	fsr2h,c
  2131   001A2E  0E04               	movlw	4
  2132   001A30  26D9               	addwf	fsr2l,f,c
  2133   001A32  6ADF               	clrf	indf2,c
  2134   001A34  0012               	return		;funcret
  2135   001A36                     __end_of_u8_hex:
  2136                           	callstack 0
  2137                           
  2138 ;; *************** function _sprintf *****************
  2139 ;; Defined at:
  2140 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\nf_sprintf.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  s               1   47[COMRAM] PTR unsigned char 
  2143 ;;		 -> main@buf(16), 
  2144 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  2145 ;;		 -> STR_2(12), 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  f              11   54[COMRAM] struct _IO_FILE
  2148 ;;  ret             2    0        int 
  2149 ;;  ap              1   53[COMRAM] PTR void [1]
  2150 ;;		 -> ?_sprintf(2), 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  2   47[COMRAM] int 
  2153 ;; Registers used:
  2154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2160 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;Total ram usage:       18 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; Hardware stack levels required when called: 6
  2167 ;; This function calls:
  2168 ;;		_vfprintf
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text3
  2175   001D02                     __ptext3:
  2176                           	callstack 0
  2177   001D02                     _sprintf:
  2178                           	callstack 24
  2179   001D02  0E32               	movlw	low (?_sprintf+2)
  2180   001D04  6E36               	movwf	sprintf@ap^0,c
  2181   001D06  C030  F037         	movff	sprintf@s,sprintf@f
  2182   001D0A  6A3A               	clrf	(sprintf@f+3)^0,c
  2183   001D0C  0E00               	movlw	0
  2184   001D0E  6E39               	movwf	(sprintf@f+2)^0,c
  2185   001D10  6A41               	clrf	(sprintf@f+10)^0,c
  2186   001D12  0E00               	movlw	0
  2187   001D14  6E40               	movwf	(sprintf@f+9)^0,c
  2188   001D16  0E37               	movlw	low sprintf@f
  2189   001D18  6E2C               	movwf	vfprintf@fp^0,c
  2190   001D1A  C031  F02D         	movff	sprintf@fmt,vfprintf@fmt
  2191   001D1E  0E36               	movlw	low sprintf@ap
  2192   001D20  6E2E               	movwf	vfprintf@ap^0,c
  2193   001D22  ECED  F00D         	call	_vfprintf	;wreg free
  2194   001D26  5030               	movf	sprintf@s^0,w,c
  2195   001D28  2439               	addwf	(sprintf@f+2)^0,w,c
  2196   001D2A  6ED9               	movwf	fsr2l,c
  2197   001D2C  6ADA               	clrf	fsr2h,c
  2198   001D2E  6ADF               	clrf	indf2,c
  2199   001D30  0012               	return		;funcret
  2200   001D32                     __end_of_sprintf:
  2201                           	callstack 0
  2202                           
  2203 ;; *************** function _vfprintf *****************
  2204 ;; Defined at:
  2205 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  fp              1   43[COMRAM] PTR struct _IO_FILE
  2208 ;;		 -> sprintf@f(11), 
  2209 ;;  fmt             1   44[COMRAM] PTR const unsigned char 
  2210 ;;		 -> STR_2(12), 
  2211 ;;  ap              1   45[COMRAM] PTR PTR void 
  2212 ;;		 -> sprintf@ap(1), 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  cfmt            1   46[COMRAM] PTR unsigned char 
  2215 ;;		 -> STR_2(12), 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  2   43[COMRAM] int 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;Total ram usage:        4 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 5
  2232 ;; This function calls:
  2233 ;;		_vfpfcnvrt
  2234 ;; This function is called by:
  2235 ;;		_sprintf
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text4
  2240   001BDA                     __ptext4:
  2241                           	callstack 0
  2242   001BDA                     _vfprintf:
  2243                           	callstack 24
  2244   001BDA                     
  2245                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.10\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2246   001BDA  C02D  F02F         	movff	vfprintf@fmt,vfprintf@cfmt
  2247                           
  2248                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2249   001BDE  EFFA  F00D         	goto	l1772
  2250   001BE2                     l1770:
  2251                           
  2252                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2253   001BE2  C02C  F021         	movff	vfprintf@fp,vfpfcnvrt@fp
  2254   001BE6  0E2F               	movlw	low vfprintf@cfmt
  2255   001BE8  6E22               	movwf	vfpfcnvrt@fmt^0,c
  2256   001BEA  C02E  F023         	movff	vfprintf@ap,vfpfcnvrt@ap
  2257   001BEE  6A24               	clrf	(vfpfcnvrt@ap+1)^0,c
  2258   001BF0  EC13  F008         	call	_vfpfcnvrt	;wreg free
  2259   001BF4                     l1772:
  2260                           
  2261                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2262   001BF4  0060  F0BF  FFF6   	movff	vfprintf@cfmt,tblptrl
  2263   001BFA                     	if	1	;There is more than 1 active tblptr byte
  2264   001BFA  0E10               	movlw	high __smallconst
  2265   001BFC  6EF7               	movwf	tblptrh,c
  2266   001BFE                     	endif
  2267   001BFE                     	if	0	;tblptru may be non-zero
  2268   001BFE                     	endif
  2269   001BFE                     	if	0	;tblptru may be non-zero
  2270   001BFE                     	endif
  2271   001BFE  0008               	tblrd		*
  2272   001C00  50F5               	movf	tablat,w,c
  2273   001C02  0900               	iorlw	0
  2274   001C04  A4D8               	btfss	status,2,c
  2275   001C06  EF07  F00E         	goto	u1011
  2276   001C0A  EF09  F00E         	goto	u1010
  2277   001C0E                     u1011:
  2278   001C0E  EFF1  F00D         	goto	l1770
  2279   001C12                     u1010:
  2280   001C12                     
  2281                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2282   001C12  6A2D               	clrf	(?_vfprintf+1)^0,c
  2283   001C14  0E00               	movlw	0
  2284   001C16  6E2C               	movwf	?_vfprintf^0,c
  2285   001C18  0012               	return		;funcret
  2286   001C1A                     __end_of_vfprintf:
  2287                           	callstack 0
  2288                           
  2289 ;; *************** function _vfpfcnvrt *****************
  2290 ;; Defined at:
  2291 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  fp              1   32[COMRAM] PTR struct _IO_FILE
  2294 ;;		 -> sprintf@f(11), 
  2295 ;;  fmt             1   33[COMRAM] PTR PTR unsigned char 
  2296 ;;		 -> vfprintf@cfmt(1), 
  2297 ;;  ap              2   34[COMRAM] PTR PTR void 
  2298 ;;		 -> sprintf@ap(1), 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  convarg         4   37[COMRAM] struct .
  2301 ;;  done            1   42[COMRAM] _Bool 
  2302 ;;  cp              1   41[COMRAM] PTR unsigned char 
  2303 ;;		 -> STR_2(12), 
  2304 ;;  c               1    0        unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;Total ram usage:       11 bytes
  2319 ;; Hardware stack levels used: 1
  2320 ;; Hardware stack levels required when called: 4
  2321 ;; This function calls:
  2322 ;;		_fputc
  2323 ;;		_read_prec_or_width
  2324 ;;		_stoa
  2325 ;;		_xtoa
  2326 ;; This function is called by:
  2327 ;;		_vfprintf
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           	psect	text5
  2332   001026                     __ptext5:
  2333                           	callstack 0
  2334   001026                     _vfpfcnvrt:
  2335                           	callstack 24
  2336   001026                     
  2337                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2338   001026  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2339   001028  6ED9               	movwf	fsr2l,c
  2340   00102A  6ADA               	clrf	fsr2h,c
  2341   00102C  006F FF7F FFF6     	movff	indf2,tblptrl
  2342   001032                     	if	1	;There is more than 1 active tblptr byte
  2343   001032  0E10               	movlw	high __smallconst
  2344   001034  6EF7               	movwf	tblptrh,c
  2345   001036                     	endif
  2346   001036                     	if	0	;tblptru may be non-zero
  2347   001036                     	endif
  2348   001036                     	if	0	;tblptru may be non-zero
  2349   001036                     	endif
  2350   001036  0008               	tblrd		*
  2351   001038  50F5               	movf	tablat,w,c
  2352   00103A  0A25               	xorlw	37
  2353   00103C  A4D8               	btfss	status,2,c
  2354   00103E  EF23  F008         	goto	u921
  2355   001042  EF25  F008         	goto	u920
  2356   001046                     u921:
  2357   001046  EF33  F009         	goto	l1762
  2358   00104A                     u920:
  2359   00104A                     
  2360                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2361   00104A  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2362   00104C  6ED9               	movwf	fsr2l,c
  2363   00104E  6ADA               	clrf	fsr2h,c
  2364   001050  2ADF               	incf	indf2,f,c
  2365   001052                     
  2366                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2367   001052  0100               	movlb	0	; () banked
  2368   001054  6B61               	clrf	(_width+1)& (0+255),b
  2369   001056  0E00               	movlw	0
  2370   001058  6F60               	movwf	_width& (0+255),b
  2371   00105A  C060  F05F         	movff	_width,_flags
  2372   00105E                     
  2373                           ; BSR set to: 0
  2374                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2375   00105E  6962               	setf	_prec& (0+255),b
  2376   001060  6963               	setf	(_prec+1)& (0+255),b
  2377   001062                     
  2378                           ; BSR set to: 0
  2379                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2380   001062  6A2B               	clrf	vfpfcnvrt@done^0,c
  2381                           
  2382                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2383   001064  EF4F  F008         	goto	l1712
  2384   001068                     l1702:
  2385                           
  2386                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2387   001068  825F               	bsf	_flags^0,1,c
  2388   00106A                     
  2389                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2390   00106A  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2391   00106C  6ED9               	movwf	fsr2l,c
  2392   00106E  6ADA               	clrf	fsr2h,c
  2393   001070  2ADF               	incf	indf2,f,c
  2394                           
  2395                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2396   001072  EF4F  F008         	goto	l1712
  2397   001076                     l1706:
  2398                           
  2399                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2400   001076  0E01               	movlw	1
  2401   001078  6E2B               	movwf	vfpfcnvrt@done^0,c
  2402                           
  2403                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2404   00107A  EF4F  F008         	goto	l1712
  2405   00107E                     l1710:
  2406   00107E  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2407   001080  6ED9               	movwf	fsr2l,c
  2408   001082  6ADA               	clrf	fsr2h,c
  2409   001084  006F FF7F FFF6     	movff	indf2,tblptrl
  2410   00108A                     	if	1	;There is more than 1 active tblptr byte
  2411   00108A  0E10               	movlw	high __smallconst
  2412   00108C  6EF7               	movwf	tblptrh,c
  2413   00108E                     	endif
  2414   00108E                     	if	0	;tblptru may be non-zero
  2415   00108E                     	endif
  2416   00108E                     	if	0	;tblptru may be non-zero
  2417   00108E                     	endif
  2418   00108E  0008               	tblrd		*
  2419   001090  50F5               	movf	tablat,w,c
  2420                           
  2421                           ; Switch size 1, requested type "simple"
  2422                           ; Number of cases is 1, Range of values is 48 to 48
  2423                           ; switch strategies available:
  2424                           ; Name         Instructions Cycles
  2425                           ; simple_byte            4     3 (average)
  2426                           ;	Chosen strategy is simple_byte
  2427   001092  0A30               	xorlw	48	; case 48
  2428   001094  B4D8               	btfsc	status,2,c
  2429   001096  EF34  F008         	goto	l1702
  2430   00109A  EF3B  F008         	goto	l1706
  2431   00109E                     l1712:
  2432                           
  2433                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2434   00109E  502B               	movf	vfpfcnvrt@done^0,w,c
  2435   0010A0  B4D8               	btfsc	status,2,c
  2436   0010A2  EF55  F008         	goto	u931
  2437   0010A6  EF57  F008         	goto	u930
  2438   0010AA                     u931:
  2439   0010AA  EF3F  F008         	goto	l1710
  2440   0010AE                     u930:
  2441   0010AE                     
  2442                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2443   0010AE  C022  F001         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2444   0010B2  C023  F002         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2445   0010B6  EC95  F00B         	call	_read_prec_or_width	;wreg free
  2446   0010BA  C001  F060         	movff	?_read_prec_or_width,_width
  2447   0010BE  C002  F061         	movff	?_read_prec_or_width+1,_width+1
  2448   0010C2                     
  2449                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2450   0010C2  0100               	movlb	0	; () banked
  2451   0010C4  BF61               	btfsc	(_width+1)& (0+255),7,b
  2452   0010C6  EF69  F008         	goto	u940
  2453   0010CA  EF67  F008         	goto	u941
  2454   0010CE                     u941:
  2455   0010CE  EF6E  F008         	goto	l1720
  2456   0010D2                     u940:
  2457   0010D2                     
  2458                           ; BSR set to: 0
  2459                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2460   0010D2  805F               	bsf	_flags^0,0,c
  2461                           
  2462                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2463   0010D4  6D60               	negf	_width& (0+255),b
  2464   0010D6  1F61               	comf	(_width+1)& (0+255),f,b
  2465   0010D8  B0D8               	btfsc	status,0,c
  2466   0010DA  2B61               	incf	(_width+1)& (0+255),f,b
  2467   0010DC                     l1720:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1439:   if (0
  2471   0010DC  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2472   0010DE  6ED9               	movwf	fsr2l,c
  2473   0010E0  6ADA               	clrf	fsr2h,c
  2474   0010E2  50DF               	movf	indf2,w,c
  2475   0010E4  6E2A               	movwf	vfpfcnvrt@cp^0,c
  2476   0010E6                     
  2477                           ; BSR set to: 0
  2478   0010E6  0060  F0AB  FFF6   	movff	vfpfcnvrt@cp,tblptrl
  2479   0010EC                     	if	1	;There is more than 1 active tblptr byte
  2480   0010EC  0E10               	movlw	high __smallconst
  2481   0010EE  6EF7               	movwf	tblptrh,c
  2482   0010F0                     	endif
  2483   0010F0                     	if	0	;tblptru may be non-zero
  2484   0010F0                     	endif
  2485   0010F0                     	if	0	;tblptru may be non-zero
  2486   0010F0                     	endif
  2487   0010F0  0008               	tblrd		*
  2488   0010F2  50F5               	movf	tablat,w,c
  2489   0010F4  0A58               	xorlw	88
  2490   0010F6  A4D8               	btfss	status,2,c
  2491   0010F8  EF80  F008         	goto	u951
  2492   0010FC  EF82  F008         	goto	u950
  2493   001100                     u951:
  2494   001100  EFB1  F008         	goto	l1053
  2495   001104                     u950:
  2496   001104                     
  2497                           ; BSR set to: 0
  2498                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2499   001104  0060  F08F  FFD9   	movff	vfpfcnvrt@ap,fsr2l
  2500   00110A  0060  F093  FFDA   	movff	vfpfcnvrt@ap+1,fsr2h
  2501   001110  0E02               	movlw	2
  2502   001112  26DF               	addwf	indf2,f,c
  2503   001114  5CDF               	subwf	indf2,w,c
  2504   001116  6ED9               	movwf	fsr2l,c
  2505   001118  6ADA               	clrf	fsr2h,c
  2506   00111A  006F FF78  F026    	movff	postinc2,vfpfcnvrt@convarg
  2507   001120  006F FF78  F027    	movff	postinc2,vfpfcnvrt@convarg+1
  2508   001126                     
  2509                           ; BSR set to: 0
  2510                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2511   001126  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2512   001128  6ED9               	movwf	fsr2l,c
  2513   00112A  6ADA               	clrf	fsr2h,c
  2514   00112C  282A               	incf	vfpfcnvrt@cp^0,w,c
  2515   00112E  6EDF               	movwf	indf2,c
  2516                           
  2517                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  2518   001130  EFA4  F008         	goto	l1734
  2519   001134                     l1728:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (void) xtoa(fp,convarg.uint);;	Return value of _vfpfcnvrt is never used
  2523   001134  C021  F015         	movff	vfpfcnvrt@fp,xtoa@fp
  2524   001138  C026  F016         	movff	vfpfcnvrt@convarg,xtoa@d
  2525   00113C  C027  F017         	movff	vfpfcnvrt@convarg+1,xtoa@d+1
  2526   001140  ECBE  F00A         	call	_xtoa	;wreg free
  2527   001144  EF45  F009         	goto	l1058
  2528   001148                     l1734:
  2529                           
  2530                           ; BSR set to: 0
  2531   001148  0060  F0AB  FFF6   	movff	vfpfcnvrt@cp,tblptrl
  2532   00114E                     	if	1	;There is more than 1 active tblptr byte
  2533   00114E  0E10               	movlw	high __smallconst
  2534   001150  6EF7               	movwf	tblptrh,c
  2535   001152                     	endif
  2536   001152                     	if	0	;tblptru may be non-zero
  2537   001152                     	endif
  2538   001152                     	if	0	;tblptru may be non-zero
  2539   001152                     	endif
  2540   001152  0008               	tblrd		*
  2541   001154  50F5               	movf	tablat,w,c
  2542                           
  2543                           ; Switch size 1, requested type "simple"
  2544                           ; Number of cases is 1, Range of values is 88 to 88
  2545                           ; switch strategies available:
  2546                           ; Name         Instructions Cycles
  2547                           ; simple_byte            4     3 (average)
  2548                           ;	Chosen strategy is simple_byte
  2549   001156  0A58               	xorlw	88	; case 88
  2550   001158  B4D8               	btfsc	status,2,c
  2551   00115A  EF9A  F008         	goto	l1728
  2552   00115E  EFB1  F008         	goto	l1053
  2553   001162                     l1053:
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  2557   001162  6A2B               	clrf	vfpfcnvrt@done^0,c
  2558   001164                     
  2559                           ; BSR set to: 0
  2560                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  2561   001164  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2562   001166  6ED9               	movwf	fsr2l,c
  2563   001168  6ADA               	clrf	fsr2h,c
  2564   00116A  006F FF7F FFF6     	movff	indf2,tblptrl
  2565   001170                     	if	1	;There is more than 1 active tblptr byte
  2566   001170  0E10               	movlw	high __smallconst
  2567   001172  6EF7               	movwf	tblptrh,c
  2568   001174                     	endif
  2569   001174                     	if	0	;tblptru may be non-zero
  2570   001174                     	endif
  2571   001174                     	if	0	;tblptru may be non-zero
  2572   001174                     	endif
  2573   001174  0008               	tblrd		*
  2574   001176  50F5               	movf	tablat,w,c
  2575   001178  0A73               	xorlw	115
  2576   00117A  A4D8               	btfss	status,2,c
  2577   00117C  EFC2  F008         	goto	u961
  2578   001180  EFC4  F008         	goto	u960
  2579   001184                     u961:
  2580   001184  EFCC  F008         	goto	l1742
  2581   001188                     u960:
  2582   001188                     
  2583                           ; BSR set to: 0
  2584                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  2585   001188  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2586   00118A  6ED9               	movwf	fsr2l,c
  2587   00118C  6ADA               	clrf	fsr2h,c
  2588   00118E  2ADF               	incf	indf2,f,c
  2589   001190                     l1740:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  2593   001190  0E01               	movlw	1
  2594   001192  6E2B               	movwf	vfpfcnvrt@done^0,c
  2595                           
  2596                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1660:   }
  2597   001194  EF11  F009         	goto	l1752
  2598   001198                     l1742:
  2599                           
  2600                           ; BSR set to: 0
  2601   001198  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2602   00119A  6ED9               	movwf	fsr2l,c
  2603   00119C  6ADA               	clrf	fsr2h,c
  2604   00119E  006F FF7F FFF6     	movff	indf2,tblptrl
  2605   0011A4                     	if	1	;There is more than 1 active tblptr byte
  2606   0011A4  0E10               	movlw	high __smallconst
  2607   0011A6  6EF7               	movwf	tblptrh,c
  2608   0011A8                     	endif
  2609   0011A8                     	if	0	;tblptru may be non-zero
  2610   0011A8                     	endif
  2611   0011A8                     	if	0	;tblptru may be non-zero
  2612   0011A8                     	endif
  2613   0011A8  0008               	tblrd		*
  2614   0011AA  50F5               	movf	tablat,w,c
  2615   0011AC  0A6C               	xorlw	108
  2616   0011AE  A4D8               	btfss	status,2,c
  2617   0011B0  EFDC  F008         	goto	u971
  2618   0011B4  EFDE  F008         	goto	u970
  2619   0011B8                     u971:
  2620   0011B8  EF11  F009         	goto	l1752
  2621   0011BC                     u970:
  2622   0011BC                     
  2623                           ; BSR set to: 0
  2624   0011BC  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2625   0011BE  6ED9               	movwf	fsr2l,c
  2626   0011C0  6ADA               	clrf	fsr2h,c
  2627   0011C2  50DF               	movf	indf2,w,c
  2628   0011C4  6E25               	movwf	??_vfpfcnvrt^0,c
  2629   0011C6  0E01               	movlw	1
  2630   0011C8  2625               	addwf	??_vfpfcnvrt^0,f,c
  2631   0011CA  0060  F097  FFF6   	movff	??_vfpfcnvrt,tblptrl
  2632   0011D0                     	if	1	;There is more than 1 active tblptr byte
  2633   0011D0  0E10               	movlw	high __smallconst
  2634   0011D2  6EF7               	movwf	tblptrh,c
  2635   0011D4                     	endif
  2636   0011D4                     	if	0	;tblptru may be non-zero
  2637   0011D4                     	endif
  2638   0011D4                     	if	0	;tblptru may be non-zero
  2639   0011D4                     	endif
  2640   0011D4  0008               	tblrd		*
  2641   0011D6  50F5               	movf	tablat,w,c
  2642   0011D8  0A6C               	xorlw	108
  2643   0011DA  A4D8               	btfss	status,2,c
  2644   0011DC  EFF2  F008         	goto	u981
  2645   0011E0  EFF4  F008         	goto	u980
  2646   0011E4                     u981:
  2647   0011E4  EF11  F009         	goto	l1752
  2648   0011E8                     u980:
  2649   0011E8                     
  2650                           ; BSR set to: 0
  2651   0011E8  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2652   0011EA  6ED9               	movwf	fsr2l,c
  2653   0011EC  6ADA               	clrf	fsr2h,c
  2654   0011EE  50DF               	movf	indf2,w,c
  2655   0011F0  6E25               	movwf	??_vfpfcnvrt^0,c
  2656   0011F2  0E02               	movlw	2
  2657   0011F4  2625               	addwf	??_vfpfcnvrt^0,f,c
  2658   0011F6  0060  F097  FFF6   	movff	??_vfpfcnvrt,tblptrl
  2659   0011FC                     	if	1	;There is more than 1 active tblptr byte
  2660   0011FC  0E10               	movlw	high __smallconst
  2661   0011FE  6EF7               	movwf	tblptrh,c
  2662   001200                     	endif
  2663   001200                     	if	0	;tblptru may be non-zero
  2664   001200                     	endif
  2665   001200                     	if	0	;tblptru may be non-zero
  2666   001200                     	endif
  2667   001200  0008               	tblrd		*
  2668   001202  50F5               	movf	tablat,w,c
  2669   001204  0A73               	xorlw	115
  2670   001206  A4D8               	btfss	status,2,c
  2671   001208  EF08  F009         	goto	u991
  2672   00120C  EF0A  F009         	goto	u990
  2673   001210                     u991:
  2674   001210  EF11  F009         	goto	l1752
  2675   001214                     u990:
  2676   001214                     
  2677                           ; BSR set to: 0
  2678                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  2679   001214  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2680   001216  6ED9               	movwf	fsr2l,c
  2681   001218  6ADA               	clrf	fsr2h,c
  2682   00121A  0E03               	movlw	3
  2683   00121C  26DF               	addwf	indf2,f,c
  2684   00121E  EFC8  F008         	goto	l1740
  2685   001222                     l1752:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  2689   001222  502B               	movf	vfpfcnvrt@done^0,w,c
  2690   001224  B4D8               	btfsc	status,2,c
  2691   001226  EF17  F009         	goto	u1001
  2692   00122A  EF19  F009         	goto	u1000
  2693   00122E                     u1001:
  2694   00122E  EF2D  F009         	goto	l1758
  2695   001232                     u1000:
  2696   001232                     
  2697                           ; BSR set to: 0
  2698                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1682:    return (
      +                          void) stoa(fp, (*(char * *)__va_arg(*(char * **)ap, (char *)0)));;	Return value of _vfpf
      +                          cnvrt is never used
  2699   001232  C021  F009         	movff	vfpfcnvrt@fp,stoa@fp
  2700   001236  0060  F08F  FFD9   	movff	vfpfcnvrt@ap,fsr2l
  2701   00123C  0060  F093  FFDA   	movff	vfpfcnvrt@ap+1,fsr2h
  2702   001242  0E02               	movlw	2
  2703   001244  26DF               	addwf	indf2,f,c
  2704   001246  5CDF               	subwf	indf2,w,c
  2705   001248  6ED9               	movwf	fsr2l,c
  2706   00124A  6ADA               	clrf	fsr2h,c
  2707   00124C  006F FF78  F00A    	movff	postinc2,stoa@s
  2708   001252  EC09  F00A         	call	_stoa	;wreg free
  2709   001256  EF45  F009         	goto	l1058
  2710   00125A                     l1758:
  2711                           
  2712                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2713   00125A  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2714   00125C  6ED9               	movwf	fsr2l,c
  2715   00125E  6ADA               	clrf	fsr2h,c
  2716   001260  2ADF               	incf	indf2,f,c
  2717   001262  EF45  F009         	goto	l1058
  2718   001266                     l1762:
  2719                           
  2720                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2721   001266  5022               	movf	vfpfcnvrt@fmt^0,w,c
  2722   001268  6ED9               	movwf	fsr2l,c
  2723   00126A  6ADA               	clrf	fsr2h,c
  2724   00126C  006F FF7F FFF6     	movff	indf2,tblptrl
  2725   001272                     	if	1	;There is more than 1 active tblptr byte
  2726   001272  0E10               	movlw	high __smallconst
  2727   001274  6EF7               	movwf	tblptrh,c
  2728   001276                     	endif
  2729   001276                     	if	0	;tblptru may be non-zero
  2730   001276                     	endif
  2731   001276                     	if	0	;tblptru may be non-zero
  2732   001276                     	endif
  2733   001276  0008               	tblrd		*
  2734   001278  50F5               	movf	tablat,w,c
  2735   00127A  6E01               	movwf	fputc@c^0,c
  2736   00127C  6A02               	clrf	(fputc@c+1)^0,c
  2737   00127E  C021  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2738   001282  EC43  F00C         	call	_fputc	;wreg free
  2739   001286  EF2D  F009         	goto	l1758
  2740   00128A                     l1058:
  2741   00128A  0012               	return		;funcret
  2742   00128C                     __end_of_vfpfcnvrt:
  2743                           	callstack 0
  2744                           
  2745 ;; *************** function _xtoa *****************
  2746 ;; Defined at:
  2747 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2750 ;;		 -> sprintf@f(11), 
  2751 ;;  d               2   21[COMRAM] unsigned int 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  i               2   30[COMRAM] int 
  2754 ;;  w               2   27[COMRAM] int 
  2755 ;;  c               1   29[COMRAM] unsigned char 
  2756 ;;  p               1   26[COMRAM] _Bool 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      void 
  2759 ;; Registers used:
  2760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;Total ram usage:       12 bytes
  2771 ;; Hardware stack levels used: 1
  2772 ;; Hardware stack levels required when called: 3
  2773 ;; This function calls:
  2774 ;;		_pad
  2775 ;; This function is called by:
  2776 ;;		_vfpfcnvrt
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text6
  2781   00157C                     __ptext6:
  2782                           	callstack 0
  2783   00157C                     _xtoa:
  2784                           	callstack 24
  2785   00157C                     
  2786                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1055: static void
      +                           xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\comm
      +                          on\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.
      +                          c: 1059:  char c;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 
      +                          1063:     int i, w;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c
      +                          : 1067:  _Bool p = 1;
  2787   00157C  0E01               	movlw	1
  2788   00157E  6E1B               	movwf	xtoa@p^0,c
  2789   001580                     
  2790                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  2791   001580  C060  F01C         	movff	_width,xtoa@w
  2792   001584  C061  F01D         	movff	_width+1,xtoa@w+1
  2793                           
  2794                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  2795   001588  6A20               	clrf	(xtoa@i+1)^0,c
  2796   00158A  0E1F               	movlw	31
  2797   00158C  6E1F               	movwf	xtoa@i^0,c
  2798   00158E                     
  2799                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  2800   00158E  0100               	movlb	0	; () banked
  2801   001590  6B83               	clrf	(_dbuf+31)& (0+255),b
  2802                           
  2803                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  2804   001592  EFFA  F00A         	goto	l1664
  2805   001596                     l1646:
  2806                           
  2807                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1107:         --i;
  2808   001596  061F               	decf	xtoa@i^0,f,c
  2809   001598  A0D8               	btfss	status,0,c
  2810   00159A  0620               	decf	(xtoa@i+1)^0,f,c
  2811   00159C                     
  2812                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  2813   00159C  5016               	movf	xtoa@d^0,w,c
  2814   00159E  0B0F               	andlw	15
  2815   0015A0  6E1E               	movwf	xtoa@c^0,c
  2816   0015A2                     
  2817                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  2818   0015A2  0E0A               	movlw	10
  2819   0015A4  601E               	cpfslt	xtoa@c^0,c
  2820   0015A6  EFD7  F00A         	goto	u831
  2821   0015AA  EFD9  F00A         	goto	u830
  2822   0015AE                     u831:
  2823   0015AE  EFDD  F00A         	goto	l1654
  2824   0015B2                     u830:
  2825   0015B2                     
  2826                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  2827   0015B2  0E30               	movlw	48
  2828   0015B4  261E               	addwf	xtoa@c^0,f,c
  2829                           
  2830                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1111:   }
  2831   0015B6  EFDF  F00A         	goto	l1656
  2832   0015BA                     l1654:
  2833                           
  2834                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  2835   0015BA  0E37               	movlw	55
  2836   0015BC  261E               	addwf	xtoa@c^0,f,c
  2837   0015BE                     l1656:
  2838                           
  2839                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  2840   0015BE  501F               	movf	xtoa@i^0,w,c
  2841   0015C0  0F64               	addlw	low _dbuf
  2842   0015C2  6ED9               	movwf	fsr2l,c
  2843   0015C4  6ADA               	clrf	fsr2h,c
  2844   0015C6  0060  F07B  FFDF   	movff	xtoa@c,indf2
  2845   0015CC                     
  2846                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  2847   0015CC  6A1B               	clrf	xtoa@p^0,c
  2848   0015CE                     
  2849                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  2850   0015CE  061C               	decf	xtoa@w^0,f,c
  2851   0015D0  A0D8               	btfss	status,0,c
  2852   0015D2  061D               	decf	(xtoa@w+1)^0,f,c
  2853   0015D4                     
  2854                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  2855   0015D4  C016  F018         	movff	xtoa@d,??_xtoa
  2856   0015D8  C017  F019         	movff	xtoa@d+1,??_xtoa+1
  2857   0015DC  0E04               	movlw	4
  2858   0015DE  6E1A               	movwf	(??_xtoa+2)^0,c
  2859   0015E0                     u845:
  2860   0015E0  90D8               	bcf	status,0,c
  2861   0015E2  3219               	rrcf	(??_xtoa+1)^0,f,c
  2862   0015E4  3218               	rrcf	??_xtoa^0,f,c
  2863   0015E6  2E1A               	decfsz	(??_xtoa+2)^0,f,c
  2864   0015E8  EFF0  F00A         	goto	u845
  2865   0015EC  C018  F016         	movff	??_xtoa,xtoa@d
  2866   0015F0  C019  F017         	movff	??_xtoa+1,xtoa@d+1
  2867   0015F4                     l1664:
  2868                           
  2869                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  2870   0015F4  BE20               	btfsc	(xtoa@i+1)^0,7,c
  2871   0015F6  EF06  F00B         	goto	u851
  2872   0015FA  5020               	movf	(xtoa@i+1)^0,w,c
  2873   0015FC  E109               	bnz	u850
  2874   0015FE  0E02               	movlw	2
  2875   001600  5C1F               	subwf	xtoa@i^0,w,c
  2876   001602  A0D8               	btfss	status,0,c
  2877   001604  EF06  F00B         	goto	u851
  2878   001608  EF08  F00B         	goto	u850
  2879   00160C                     u851:
  2880   00160C  EF2D  F00B         	goto	l1674
  2881   001610                     u850:
  2882   001610  5016               	movf	xtoa@d^0,w,c
  2883   001612  1017               	iorwf	(xtoa@d+1)^0,w,c
  2884   001614  A4D8               	btfss	status,2,c
  2885   001616  EF0F  F00B         	goto	u861
  2886   00161A  EF11  F00B         	goto	u860
  2887   00161E                     u861:
  2888   00161E  EFCB  F00A         	goto	l1646
  2889   001622                     u860:
  2890   001622  501B               	movf	xtoa@p^0,w,c
  2891   001624  A4D8               	btfss	status,2,c
  2892   001626  EF17  F00B         	goto	u871
  2893   00162A  EF19  F00B         	goto	u870
  2894   00162E                     u871:
  2895   00162E  EFCB  F00A         	goto	l1646
  2896   001632                     u870:
  2897   001632  BE1D               	btfsc	(xtoa@w+1)^0,7,c
  2898   001634  EF24  F00B         	goto	u881
  2899   001638  501D               	movf	(xtoa@w+1)^0,w,c
  2900   00163A  E108               	bnz	u880
  2901   00163C  041C               	decf	xtoa@w^0,w,c
  2902   00163E  A0D8               	btfss	status,0,c
  2903   001640  EF24  F00B         	goto	u881
  2904   001644  EF26  F00B         	goto	u880
  2905   001648                     u881:
  2906   001648  EF2D  F00B         	goto	l1674
  2907   00164C                     u880:
  2908   00164C  B25F               	btfsc	_flags^0,1,c
  2909   00164E  EF2B  F00B         	goto	u891
  2910   001652  EF2D  F00B         	goto	u890
  2911   001656                     u891:
  2912   001656  EFCB  F00A         	goto	l1646
  2913   00165A                     u890:
  2914   00165A                     l1674:
  2915                           
  2916                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  2917   00165A  C015  F00E         	movff	xtoa@fp,pad@fp
  2918   00165E  501F               	movf	xtoa@i^0,w,c
  2919   001660  0F64               	addlw	low _dbuf
  2920   001662  6E0F               	movwf	pad@buf^0,c
  2921   001664  C01C  F010         	movff	xtoa@w,pad@p
  2922   001668  C01D  F011         	movff	xtoa@w+1,pad@p+1
  2923   00166C  EC99  F00C         	call	_pad	;wreg free
  2924   001670  0012               	return		;funcret
  2925   001672                     __end_of_xtoa:
  2926                           	callstack 0
  2927                           
  2928 ;; *************** function _pad *****************
  2929 ;; Defined at:
  2930 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2933 ;;		 -> sprintf@f(11), 
  2934 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2935 ;;		 -> dbuf(32), 
  2936 ;;  p               2   15[COMRAM] int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  i               2   18[COMRAM] int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:        7 bytes
  2953 ;; Hardware stack levels used: 1
  2954 ;; Hardware stack levels required when called: 2
  2955 ;; This function calls:
  2956 ;;		_fputc
  2957 ;;		_fputs
  2958 ;; This function is called by:
  2959 ;;		_xtoa
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text7
  2964   001932                     __ptext7:
  2965                           	callstack 0
  2966   001932                     _pad:
  2967                           	callstack 24
  2968   001932                     
  2969                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2970   001932  A05F               	btfss	_flags^0,0,c
  2971   001934  EF9E  F00C         	goto	u701
  2972   001938  EFA0  F00C         	goto	u700
  2973   00193C                     u701:
  2974   00193C  EFA6  F00C         	goto	l1596
  2975   001940                     u700:
  2976   001940                     
  2977                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2978   001940  C00F  F009         	movff	pad@buf,fputs@s
  2979   001944  C00E  F00A         	movff	pad@fp,fputs@fp
  2980   001948  EC2D  F00E         	call	_fputs	;wreg free
  2981   00194C                     l1596:
  2982                           
  2983                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2984   00194C  BE11               	btfsc	(pad@p+1)^0,7,c
  2985   00194E  EFAD  F00C         	goto	u710
  2986   001952  EFAB  F00C         	goto	u711
  2987   001956                     u711:
  2988   001956  EFB0  F00C         	goto	l997
  2989   00195A                     u710:
  2990   00195A                     
  2991                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2992   00195A  6A11               	clrf	(pad@p+1)^0,c
  2993   00195C  0E00               	movlw	0
  2994   00195E  6E10               	movwf	pad@p^0,c
  2995   001960                     l997:
  2996                           
  2997                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2998   001960  6A14               	clrf	(pad@i+1)^0,c
  2999   001962  0E00               	movlw	0
  3000   001964  6E13               	movwf	pad@i^0,c
  3001                           
  3002                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3003   001966  EFBE  F00C         	goto	l1604
  3004   00196A                     l1600:
  3005                           
  3006                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3007   00196A  6A02               	clrf	(fputc@c+1)^0,c
  3008   00196C  0E20               	movlw	32
  3009   00196E  6E01               	movwf	fputc@c^0,c
  3010   001970  C00E  F003         	movff	pad@fp,fputc@fp
  3011   001974  EC43  F00C         	call	_fputc	;wreg free
  3012   001978                     
  3013                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3014   001978  4A13               	infsnz	pad@i^0,f,c
  3015   00197A  2A14               	incf	(pad@i+1)^0,f,c
  3016   00197C                     l1604:
  3017                           
  3018                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3019   00197C  5010               	movf	pad@p^0,w,c
  3020   00197E  5C13               	subwf	pad@i^0,w,c
  3021   001980  5014               	movf	(pad@i+1)^0,w,c
  3022   001982  0A80               	xorlw	128
  3023   001984  6E12               	movwf	??_pad^0,c
  3024   001986  5011               	movf	(pad@p+1)^0,w,c
  3025   001988  0A80               	xorlw	128
  3026   00198A  5812               	subwfb	??_pad^0,w,c
  3027   00198C  A0D8               	btfss	status,0,c
  3028   00198E  EFCB  F00C         	goto	u721
  3029   001992  EFCD  F00C         	goto	u720
  3030   001996                     u721:
  3031   001996  EFB5  F00C         	goto	l1600
  3032   00199A                     u720:
  3033   00199A                     
  3034                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3035   00199A  B05F               	btfsc	_flags^0,0,c
  3036   00199C  EFD2  F00C         	goto	u731
  3037   0019A0  EFD4  F00C         	goto	u730
  3038   0019A4                     u731:
  3039   0019A4  EFDA  F00C         	goto	l1002
  3040   0019A8                     u730:
  3041   0019A8                     
  3042                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3043   0019A8  C00F  F009         	movff	pad@buf,fputs@s
  3044   0019AC  C00E  F00A         	movff	pad@fp,fputs@fp
  3045   0019B0  EC2D  F00E         	call	_fputs	;wreg free
  3046   0019B4                     l1002:
  3047   0019B4  0012               	return		;funcret
  3048   0019B6                     __end_of_pad:
  3049                           	callstack 0
  3050                           
  3051 ;; *************** function _fputs *****************
  3052 ;; Defined at:
  3053 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\nf_fputs.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  s               1    8[COMRAM] PTR const unsigned char 
  3056 ;;		 -> dbuf(32), 
  3057 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  3058 ;;		 -> sprintf@f(11), 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  i               2   11[COMRAM] int 
  3061 ;;  c               1   10[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  2    8[COMRAM] int 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:        5 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; Hardware stack levels required when called: 1
  3078 ;; This function calls:
  3079 ;;		_fputc
  3080 ;; This function is called by:
  3081 ;;		_pad
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text8
  3086   001C5A                     __ptext8:
  3087                           	callstack 0
  3088   001C5A                     _fputs:
  3089                           	callstack 24
  3090   001C5A  6A0D               	clrf	(fputs@i+1)^0,c
  3091   001C5C  0E00               	movlw	0
  3092   001C5E  6E0C               	movwf	fputs@i^0,c
  3093   001C60  EF3B  F00E         	goto	l1590
  3094   001C64                     l1586:
  3095   001C64  C00B  F001         	movff	fputs@c,fputc@c
  3096   001C68  6A02               	clrf	(fputc@c+1)^0,c
  3097   001C6A  C00A  F003         	movff	fputs@fp,fputc@fp
  3098   001C6E  EC43  F00C         	call	_fputc	;wreg free
  3099   001C72  4A0C               	infsnz	fputs@i^0,f,c
  3100   001C74  2A0D               	incf	(fputs@i+1)^0,f,c
  3101   001C76                     l1590:
  3102   001C76  5009               	movf	fputs@s^0,w,c
  3103   001C78  240C               	addwf	fputs@i^0,w,c
  3104   001C7A  6ED9               	movwf	fsr2l,c
  3105   001C7C  6ADA               	clrf	fsr2h,c
  3106   001C7E  50DF               	movf	indf2,w,c
  3107   001C80  6E0B               	movwf	fputs@c^0,c
  3108   001C82  500B               	movf	fputs@c^0,w,c
  3109   001C84  A4D8               	btfss	status,2,c
  3110   001C86  EF47  F00E         	goto	u691
  3111   001C8A  EF49  F00E         	goto	u690
  3112   001C8E                     u691:
  3113   001C8E  EF32  F00E         	goto	l1586
  3114   001C92                     u690:
  3115   001C92  0012               	return		;funcret
  3116   001C94                     __end_of_fputs:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _stoa *****************
  3120 ;; Defined at:
  3121 ;;		line 942 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  fp              1    8[COMRAM] PTR struct _IO_FILE
  3124 ;;		 -> sprintf@f(11), 
  3125 ;;  s               1    9[COMRAM] PTR unsigned char 
  3126 ;;		 -> ?_sprintf(2), main@hx(8), 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  l               2   18[COMRAM] int 
  3129 ;;  cp              2   16[COMRAM] PTR unsigned char 
  3130 ;;		 -> STR_3(7), ?_sprintf(2), main@hx(8), 
  3131 ;;  w               2   14[COMRAM] int 
  3132 ;;  p               2   12[COMRAM] int 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:       12 bytes
  3147 ;; Hardware stack levels used: 1
  3148 ;; Hardware stack levels required when called: 1
  3149 ;; This function calls:
  3150 ;;		_fputc
  3151 ;; This function is called by:
  3152 ;;		_vfpfcnvrt
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text9
  3157   001412                     __ptext9:
  3158                           	callstack 0
  3159   001412                     _stoa:
  3160                           	callstack 26
  3161   001412                     
  3162                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 942: static void 
      +                          stoa(FILE *fp, char *s);C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\dopr
      +                          nt.c: 943: {;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 944: 
      +                              char *cp;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 945:
      +                               int l, p;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 947
      +                          :  int w;;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 951:    
      +                           cp = s;
  3163   001412  C00A  F011         	movff	stoa@s,stoa@cp
  3164   001416  6A12               	clrf	(stoa@cp+1)^0,c
  3165                           
  3166                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 952:     if (!cp)
      +                           {
  3167   001418  5011               	movf	stoa@cp^0,w,c
  3168   00141A  1012               	iorwf	(stoa@cp+1)^0,w,c
  3169   00141C  A4D8               	btfss	status,2,c
  3170   00141E  EF13  F00A         	goto	u741
  3171   001422  EF15  F00A         	goto	u740
  3172   001426                     u741:
  3173   001426  EF1B  F00A         	goto	l1612
  3174   00142A                     u740:
  3175   00142A                     
  3176                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 953:         cp =
      +                           "(null)";
  3177   00142A  0E1E               	movlw	low STR_3
  3178   00142C  6E11               	movwf	stoa@cp^0,c
  3179   00142E  5011               	movf	stoa@cp^0,w,c
  3180   001430  A4D8               	btfss	status,2,c
  3181   001432  0E10               	movlw	high __smallconst
  3182   001434  6E12               	movwf	(stoa@cp+1)^0,c
  3183   001436                     l1612:
  3184                           
  3185                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 957:  for (l = 0;
      +                           cp[l] != '\0'; l++) {
  3186   001436  6A14               	clrf	(stoa@l+1)^0,c
  3187   001438  0E00               	movlw	0
  3188   00143A  6E13               	movwf	stoa@l^0,c
  3189   00143C  EF22  F00A         	goto	l1616
  3190   001440                     l1614:
  3191   001440  4A13               	infsnz	stoa@l^0,f,c
  3192   001442  2A14               	incf	(stoa@l+1)^0,f,c
  3193   001444                     l1616:
  3194   001444  5013               	movf	stoa@l^0,w,c
  3195   001446  2411               	addwf	stoa@cp^0,w,c
  3196   001448  6E0B               	movwf	??_stoa^0,c
  3197   00144A  5014               	movf	(stoa@l+1)^0,w,c
  3198   00144C  2012               	addwfc	(stoa@cp+1)^0,w,c
  3199   00144E  6E0C               	movwf	(??_stoa+1)^0,c
  3200   001450  0060  F02F  FFF6   	movff	??_stoa,tblptrl
  3201   001456  0060  F033  FFF7   	movff	??_stoa+1,tblptrh
  3202   00145C  0E00               	movlw	low (__smallconst shr (0+16))
  3203   00145E  6EF8               	movwf	tblptru,c
  3204   001460  0E0F               	movlw	(high __ramtop+-1)
  3205   001462  64F7               	cpfsgt	tblptrh,c
  3206   001464  D003               	bra	u757
  3207   001466  0008               	tblrd		*
  3208   001468  50F5               	movf	tablat,w,c
  3209   00146A  D007               	bra	u750
  3210   00146C                     u757:
  3211   00146C  006F FFDB FFE1     	movff	tblptrl,fsr1l
  3212   001472  006F FFDF FFE2     	movff	tblptrh,fsr1h
  3213   001478  50E7               	movf	indf1,w,c
  3214   00147A                     u750:
  3215   00147A  0900               	iorlw	0
  3216   00147C  A4D8               	btfss	status,2,c
  3217   00147E  EF43  F00A         	goto	u761
  3218   001482  EF45  F00A         	goto	u760
  3219   001486                     u761:
  3220   001486  EF20  F00A         	goto	l1614
  3221   00148A                     u760:
  3222   00148A                     
  3223                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 965:     p = l;
  3224   00148A  C013  F00D         	movff	stoa@l,stoa@p
  3225   00148E  C014  F00E         	movff	stoa@l+1,stoa@p+1
  3226                           
  3227                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 969:     w = widt
      +                          h;
  3228   001492  C060  F00F         	movff	_width,stoa@w
  3229   001496  C061  F010         	movff	_width+1,stoa@w+1
  3230                           
  3231                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 970:     if (!(fl
      +                          ags & (1 << 0))) {
  3232   00149A  B05F               	btfsc	_flags^0,0,c
  3233   00149C  EF52  F00A         	goto	u771
  3234   0014A0  EF54  F00A         	goto	u770
  3235   0014A4                     u771:
  3236   0014A4  EF8F  F00A         	goto	l1630
  3237   0014A8                     u770:
  3238   0014A8  EF5F  F00A         	goto	l1624
  3239   0014AC                     l1620:
  3240                           
  3241                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 972:             
      +                          fputc(' ', fp);
  3242   0014AC  6A02               	clrf	(fputc@c+1)^0,c
  3243   0014AE  0E20               	movlw	32
  3244   0014B0  6E01               	movwf	fputc@c^0,c
  3245   0014B2  C009  F003         	movff	stoa@fp,fputc@fp
  3246   0014B6  EC43  F00C         	call	_fputc	;wreg free
  3247   0014BA                     
  3248                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 973:             
      +                          ++l;
  3249   0014BA  4A13               	infsnz	stoa@l^0,f,c
  3250   0014BC  2A14               	incf	(stoa@l+1)^0,f,c
  3251   0014BE                     l1624:
  3252                           
  3253                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 971:         whil
      +                          e (l < w) {
  3254   0014BE  500F               	movf	stoa@w^0,w,c
  3255   0014C0  5C13               	subwf	stoa@l^0,w,c
  3256   0014C2  5014               	movf	(stoa@l+1)^0,w,c
  3257   0014C4  0A80               	xorlw	128
  3258   0014C6  6E0B               	movwf	??_stoa^0,c
  3259   0014C8  5010               	movf	(stoa@w+1)^0,w,c
  3260   0014CA  0A80               	xorlw	128
  3261   0014CC  580B               	subwfb	??_stoa^0,w,c
  3262   0014CE  A0D8               	btfss	status,0,c
  3263   0014D0  EF6C  F00A         	goto	u781
  3264   0014D4  EF6E  F00A         	goto	u780
  3265   0014D8                     u781:
  3266   0014D8  EF56  F00A         	goto	l1620
  3267   0014DC                     u780:
  3268   0014DC  EF8F  F00A         	goto	l1630
  3269   0014E0                     l1626:
  3270                           
  3271                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 980:         fput
      +                          c(*cp, fp);
  3272   0014E0  0060  F047  FFF6   	movff	stoa@cp,tblptrl
  3273   0014E6  0060  F04B  FFF7   	movff	stoa@cp+1,tblptrh
  3274   0014EC  0E00               	movlw	low (__smallconst shr (0+16))
  3275   0014EE  6EF8               	movwf	tblptru,c
  3276   0014F0  0E0F               	movlw	(high __ramtop+-1)
  3277   0014F2  64F7               	cpfsgt	tblptrh,c
  3278   0014F4  D003               	bra	u797
  3279   0014F6  0008               	tblrd		*
  3280   0014F8  50F5               	movf	tablat,w,c
  3281   0014FA  D007               	bra	u790
  3282   0014FC                     u797:
  3283   0014FC  006F FFDB FFE1     	movff	tblptrl,fsr1l
  3284   001502  006F FFDF FFE2     	movff	tblptrh,fsr1h
  3285   001508  50E7               	movf	indf1,w,c
  3286   00150A                     u790:
  3287   00150A  6E0B               	movwf	??_stoa^0,c
  3288   00150C  500B               	movf	??_stoa^0,w,c
  3289   00150E  6E01               	movwf	fputc@c^0,c
  3290   001510  6A02               	clrf	(fputc@c+1)^0,c
  3291   001512  C009  F003         	movff	stoa@fp,fputc@fp
  3292   001516  EC43  F00C         	call	_fputc	;wreg free
  3293   00151A                     
  3294                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 981:         ++cp
      +                          ;
  3295   00151A  4A11               	infsnz	stoa@cp^0,f,c
  3296   00151C  2A12               	incf	(stoa@cp+1)^0,f,c
  3297   00151E                     l1630:
  3298                           
  3299                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 979:     while (p
      +                          --) {
  3300   00151E  060D               	decf	stoa@p^0,f,c
  3301   001520  A0D8               	btfss	status,0,c
  3302   001522  060E               	decf	(stoa@p+1)^0,f,c
  3303   001524  280D               	incf	stoa@p^0,w,c
  3304   001526  E106               	bnz	u801
  3305   001528  280E               	incf	(stoa@p+1)^0,w,c
  3306   00152A  A4D8               	btfss	status,2,c
  3307   00152C  EF9A  F00A         	goto	u801
  3308   001530  EF9C  F00A         	goto	u800
  3309   001534                     u801:
  3310   001534  EF70  F00A         	goto	l1626
  3311   001538                     u800:
  3312   001538                     
  3313                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 986:     if (flag
      +                          s & (1 << 0)) {
  3314   001538  A05F               	btfss	_flags^0,0,c
  3315   00153A  EFA1  F00A         	goto	u811
  3316   00153E  EFA3  F00A         	goto	u810
  3317   001542                     u811:
  3318   001542  EFBD  F00A         	goto	l1021
  3319   001546                     u810:
  3320   001546  EFAE  F00A         	goto	l1638
  3321   00154A                     l1634:
  3322                           
  3323                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 988:             
      +                          fputc(' ', fp);
  3324   00154A  6A02               	clrf	(fputc@c+1)^0,c
  3325   00154C  0E20               	movlw	32
  3326   00154E  6E01               	movwf	fputc@c^0,c
  3327   001550  C009  F003         	movff	stoa@fp,fputc@fp
  3328   001554  EC43  F00C         	call	_fputc	;wreg free
  3329   001558                     
  3330                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 989:             
      +                          ++l;
  3331   001558  4A13               	infsnz	stoa@l^0,f,c
  3332   00155A  2A14               	incf	(stoa@l+1)^0,f,c
  3333   00155C                     l1638:
  3334                           
  3335                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 987:         whil
      +                          e (l < w) {
  3336   00155C  500F               	movf	stoa@w^0,w,c
  3337   00155E  5C13               	subwf	stoa@l^0,w,c
  3338   001560  5014               	movf	(stoa@l+1)^0,w,c
  3339   001562  0A80               	xorlw	128
  3340   001564  6E0B               	movwf	??_stoa^0,c
  3341   001566  5010               	movf	(stoa@w+1)^0,w,c
  3342   001568  0A80               	xorlw	128
  3343   00156A  580B               	subwfb	??_stoa^0,w,c
  3344   00156C  A0D8               	btfss	status,0,c
  3345   00156E  EFBB  F00A         	goto	u821
  3346   001572  EFBD  F00A         	goto	u820
  3347   001576                     u821:
  3348   001576  EFA5  F00A         	goto	l1634
  3349   00157A                     u820:
  3350   00157A                     l1021:
  3351   00157A  0012               	return		;funcret
  3352   00157C                     __end_of_stoa:
  3353                           	callstack 0
  3354                           
  3355 ;; *************** function _fputc *****************
  3356 ;; Defined at:
  3357 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\nf_fputc.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  c               2    0[COMRAM] int 
  3360 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3361 ;;		 -> sprintf@f(11), 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;		None
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  2    0[COMRAM] int 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3373 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;Total ram usage:        8 bytes
  3378 ;; Hardware stack levels used: 1
  3379 ;; This function calls:
  3380 ;;		_putch
  3381 ;; This function is called by:
  3382 ;;		_pad
  3383 ;;		_stoa
  3384 ;;		_vfpfcnvrt
  3385 ;;		_fputs
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text10
  3390   001886                     __ptext10:
  3391                           	callstack 0
  3392   001886                     _fputc:
  3393                           	callstack 24
  3394   001886  5003               	movf	fputc@fp^0,w,c
  3395   001888  B4D8               	btfsc	status,2,c
  3396   00188A  EF49  F00C         	goto	u651
  3397   00188E  EF4B  F00C         	goto	u650
  3398   001892                     u651:
  3399   001892  EF53  F00C         	goto	l1574
  3400   001896                     u650:
  3401   001896  5003               	movf	fputc@fp^0,w,c
  3402   001898  A4D8               	btfss	status,2,c
  3403   00189A  EF51  F00C         	goto	u661
  3404   00189E  EF53  F00C         	goto	u660
  3405   0018A2                     u661:
  3406   0018A2  EF58  F00C         	goto	l1576
  3407   0018A6                     u660:
  3408   0018A6                     l1574:
  3409   0018A6  5001               	movf	fputc@c^0,w,c
  3410   0018A8  ECBC  F00E         	call	_putch
  3411   0018AC  EF98  F00C         	goto	l1081
  3412   0018B0                     l1576:
  3413   0018B0  5003               	movf	fputc@fp^0,w,c
  3414   0018B2  6ED9               	movwf	fsr2l,c
  3415   0018B4  6ADA               	clrf	fsr2h,c
  3416   0018B6  0E09               	movlw	9
  3417   0018B8  26D9               	addwf	fsr2l,f,c
  3418   0018BA  50DE               	movf	postinc2,w,c
  3419   0018BC  10DE               	iorwf	postinc2,w,c
  3420   0018BE  B4D8               	btfsc	status,2,c
  3421   0018C0  EF64  F00C         	goto	u671
  3422   0018C4  EF66  F00C         	goto	u670
  3423   0018C8                     u671:
  3424   0018C8  EF7F  F00C         	goto	l1580
  3425   0018CC                     u670:
  3426   0018CC  5003               	movf	fputc@fp^0,w,c
  3427   0018CE  6ED9               	movwf	fsr2l,c
  3428   0018D0  6ADA               	clrf	fsr2h,c
  3429   0018D2  0E09               	movlw	9
  3430   0018D4  26D9               	addwf	fsr2l,f,c
  3431   0018D6  5003               	movf	fputc@fp^0,w,c
  3432   0018D8  6EE1               	movwf	fsr1l,c
  3433   0018DA  6AE2               	clrf	fsr1h,c
  3434   0018DC  0E02               	movlw	2
  3435   0018DE  26E1               	addwf	fsr1l,f,c
  3436   0018E0  50DE               	movf	postinc2,w,c
  3437   0018E2  5CE6               	subwf	postinc1,w,c
  3438   0018E4  50E6               	movf	postinc1,w,c
  3439   0018E6  0A80               	xorlw	128
  3440   0018E8  6E08               	movwf	(??_fputc+4)^0,c
  3441   0018EA  50DE               	movf	postinc2,w,c
  3442   0018EC  0A80               	xorlw	128
  3443   0018EE  5808               	subwfb	(??_fputc+4)^0,w,c
  3444   0018F0  B0D8               	btfsc	status,0,c
  3445   0018F2  EF7D  F00C         	goto	u681
  3446   0018F6  EF7F  F00C         	goto	u680
  3447   0018FA                     u681:
  3448   0018FA  EF98  F00C         	goto	l1081
  3449   0018FE                     u680:
  3450   0018FE                     l1580:
  3451   0018FE  5003               	movf	fputc@fp^0,w,c
  3452   001900  6ED9               	movwf	fsr2l,c
  3453   001902  6ADA               	clrf	fsr2h,c
  3454   001904  0E02               	movlw	2
  3455   001906  26D9               	addwf	fsr2l,f,c
  3456   001908  50DF               	movf	indf2,w,c
  3457   00190A  6E04               	movwf	??_fputc^0,c
  3458   00190C  5003               	movf	fputc@fp^0,w,c
  3459   00190E  6ED9               	movwf	fsr2l,c
  3460   001910  6ADA               	clrf	fsr2h,c
  3461   001912  50DF               	movf	indf2,w,c
  3462   001914  2404               	addwf	??_fputc^0,w,c
  3463   001916  6ED9               	movwf	fsr2l,c
  3464   001918  6ADA               	clrf	fsr2h,c
  3465   00191A  0060  F007  FFDF   	movff	fputc@c,indf2
  3466   001920  5003               	movf	fputc@fp^0,w,c
  3467   001922  6ED9               	movwf	fsr2l,c
  3468   001924  6ADA               	clrf	fsr2h,c
  3469   001926  0E02               	movlw	2
  3470   001928  26D9               	addwf	fsr2l,f,c
  3471   00192A  2ADE               	incf	postinc2,f,c
  3472   00192C  0E00               	movlw	0
  3473   00192E  22DD               	addwfc	postdec2,f,c
  3474   001930                     l1081:
  3475   001930  0012               	return		;funcret
  3476   001932                     __end_of_fputc:
  3477                           	callstack 0
  3478                           
  3479 ;; *************** function _putch *****************
  3480 ;; Defined at:
  3481 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\putch.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  c               1    wreg     unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  c               1    0[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used: 1
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_fputc
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text11
  3509   001D78                     __ptext11:
  3510                           	callstack 0
  3511   001D78                     _putch:
  3512                           	callstack 23
  3513   001D78  0012               	return		;funcret
  3514   001D7A                     __end_of_putch:
  3515                           	callstack 0
  3516                           
  3517 ;; *************** function _read_prec_or_width *****************
  3518 ;; Defined at:
  3519 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  fmt             1    0[COMRAM] PTR PTR const unsigned c
  3522 ;;		 -> vfprintf@cfmt(1), 
  3523 ;;  ap              1    1[COMRAM] PTR PTR void [1]
  3524 ;;		 -> sprintf@ap(1), 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  c               1    4[COMRAM] unsigned char 
  3527 ;;  n               2    5[COMRAM] int 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  2    0[COMRAM] int 
  3530 ;; Registers used:
  3531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;Total ram usage:        7 bytes
  3542 ;; Hardware stack levels used: 1
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_vfpfcnvrt
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text12
  3551   00172A                     __ptext12:
  3552                           	callstack 0
  3553   00172A                     _read_prec_or_width:
  3554                           	callstack 27
  3555   00172A                     
  3556                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  3557   00172A  6A07               	clrf	(read_prec_or_width@n+1)^0,c
  3558   00172C  0E00               	movlw	0
  3559   00172E  6E06               	movwf	read_prec_or_width@n^0,c
  3560   001730                     
  3561                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  3562   001730  5001               	movf	read_prec_or_width@fmt^0,w,c
  3563   001732  6ED9               	movwf	fsr2l,c
  3564   001734  6ADA               	clrf	fsr2h,c
  3565   001736  006F FF7F FFF6     	movff	indf2,tblptrl
  3566   00173C                     	if	1	;There is more than 1 active tblptr byte
  3567   00173C  0E10               	movlw	high __smallconst
  3568   00173E  6EF7               	movwf	tblptrh,c
  3569   001740                     	endif
  3570   001740                     	if	0	;tblptru may be non-zero
  3571   001740                     	endif
  3572   001740                     	if	0	;tblptru may be non-zero
  3573   001740                     	endif
  3574   001740  0008               	tblrd		*
  3575   001742  50F5               	movf	tablat,w,c
  3576   001744  0A2A               	xorlw	42
  3577   001746  A4D8               	btfss	status,2,c
  3578   001748  EFA8  F00B         	goto	u901
  3579   00174C  EFAA  F00B         	goto	u900
  3580   001750                     u901:
  3581   001750  EFD3  F00B         	goto	l1690
  3582   001754                     u900:
  3583   001754                     
  3584                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  3585   001754  5001               	movf	read_prec_or_width@fmt^0,w,c
  3586   001756  6ED9               	movwf	fsr2l,c
  3587   001758  6ADA               	clrf	fsr2h,c
  3588   00175A  2ADF               	incf	indf2,f,c
  3589   00175C                     
  3590                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  3591   00175C  5002               	movf	read_prec_or_width@ap^0,w,c
  3592   00175E  6ED9               	movwf	fsr2l,c
  3593   001760  6ADA               	clrf	fsr2h,c
  3594   001762  0E02               	movlw	2
  3595   001764  26DF               	addwf	indf2,f,c
  3596   001766  5CDF               	subwf	indf2,w,c
  3597   001768  6ED9               	movwf	fsr2l,c
  3598   00176A  6ADA               	clrf	fsr2h,c
  3599   00176C  006F FF78  F006    	movff	postinc2,read_prec_or_width@n
  3600   001772  006F FF78  F007    	movff	postinc2,read_prec_or_width@n+1
  3601                           
  3602                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  3603   001778  EFE7  F00B         	goto	l1037
  3604   00177C                     l1686:
  3605                           
  3606                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  3607   00177C  0E0A               	movlw	10
  3608   00177E  0206               	mulwf	read_prec_or_width@n^0,c
  3609   001780  006F FFCC  F003    	movff	prodl,??_read_prec_or_width
  3610   001786  006F FFD0  F004    	movff	prodh,??_read_prec_or_width+1
  3611   00178C  0207               	mulwf	(read_prec_or_width@n+1)^0,c
  3612   00178E  50F3               	movf	prodl,w,c
  3613   001790  2604               	addwf	(??_read_prec_or_width+1)^0,f,c
  3614   001792  5005               	movf	read_prec_or_width@c^0,w,c
  3615   001794  2403               	addwf	??_read_prec_or_width^0,w,c
  3616   001796  6E06               	movwf	read_prec_or_width@n^0,c
  3617   001798  0E00               	movlw	0
  3618   00179A  2004               	addwfc	(??_read_prec_or_width+1)^0,w,c
  3619   00179C  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  3620   00179E                     
  3621                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  3622   00179E  5001               	movf	read_prec_or_width@fmt^0,w,c
  3623   0017A0  6ED9               	movwf	fsr2l,c
  3624   0017A2  6ADA               	clrf	fsr2h,c
  3625   0017A4  2ADF               	incf	indf2,f,c
  3626   0017A6                     l1690:
  3627                           
  3628                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  3629   0017A6  5001               	movf	read_prec_or_width@fmt^0,w,c
  3630   0017A8  6ED9               	movwf	fsr2l,c
  3631   0017AA  6ADA               	clrf	fsr2h,c
  3632   0017AC  006F FF7F FFF6     	movff	indf2,tblptrl
  3633   0017B2                     	if	1	;There is more than 1 active tblptr byte
  3634   0017B2  0E10               	movlw	high __smallconst
  3635   0017B4  6EF7               	movwf	tblptrh,c
  3636   0017B6                     	endif
  3637   0017B6                     	if	0	;tblptru may be non-zero
  3638   0017B6                     	endif
  3639   0017B6                     	if	0	;tblptru may be non-zero
  3640   0017B6                     	endif
  3641   0017B6  0008               	tblrd		*
  3642   0017B8  50F5               	movf	tablat,w,c
  3643   0017BA  0FD0               	addlw	208
  3644   0017BC  6E05               	movwf	read_prec_or_width@c^0,c
  3645   0017BE  0E09               	movlw	9
  3646   0017C0  6405               	cpfsgt	read_prec_or_width@c^0,c
  3647   0017C2  EFE5  F00B         	goto	u911
  3648   0017C6  EFE7  F00B         	goto	u910
  3649   0017CA                     u911:
  3650   0017CA  EFBE  F00B         	goto	l1686
  3651   0017CE                     u910:
  3652   0017CE                     l1037:
  3653                           
  3654                           ;C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  3655   0017CE  C006  F001         	movff	read_prec_or_width@n,?_read_prec_or_width
  3656   0017D2  C007  F002         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  3657   0017D6  0012               	return		;funcret
  3658   0017D8                     __end_of_read_prec_or_width:
  3659                           	callstack 0
  3660                           
  3661 ;; *************** function _eeprom_write_8 *****************
  3662 ;; Defined at:
  3663 ;;		line 168 in file "EXO4SPI26K83.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  addr            2    0[COMRAM] unsigned short 
  3666 ;;  data            1    2[COMRAM] unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  b3              1    8[COMRAM] unsigned char 
  3669 ;;  b2              1    7[COMRAM] unsigned char 
  3670 ;;  b1              1    6[COMRAM] unsigned char 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3680 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;Total ram usage:        9 bytes
  3685 ;; Hardware stack levels used: 1
  3686 ;; Hardware stack levels required when called: 1
  3687 ;; This function calls:
  3688 ;;		_eeprom_EWEN
  3689 ;; This function is called by:
  3690 ;;		_main
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text13
  3695   001672                     __ptext13:
  3696                           	callstack 0
  3697   001672                     _eeprom_write_8:
  3698                           	callstack 29
  3699   001672                     
  3700                           ;EXO4SPI26K83.c: 169:     uint8_t b1 = (0b101 << 5) | ((addr >> 4) & 0x1F);
  3701   001672  C001  F004         	movff	eeprom_write_8@addr,??_eeprom_write_8
  3702   001676  C002  F005         	movff	eeprom_write_8@addr+1,??_eeprom_write_8+1
  3703   00167A  0E04               	movlw	4
  3704   00167C  6E06               	movwf	(??_eeprom_write_8+2)^0,c
  3705   00167E                     u1135:
  3706   00167E  90D8               	bcf	status,0,c
  3707   001680  3205               	rrcf	(??_eeprom_write_8+1)^0,f,c
  3708   001682  3204               	rrcf	??_eeprom_write_8^0,f,c
  3709   001684  2E06               	decfsz	(??_eeprom_write_8+2)^0,f,c
  3710   001686  EF3F  F00B         	goto	u1135
  3711   00168A  5004               	movf	??_eeprom_write_8^0,w,c
  3712   00168C  0B1F               	andlw	31
  3713   00168E  09A0               	iorlw	160
  3714   001690  6E07               	movwf	eeprom_write_8@b1^0,c
  3715                           
  3716                           ;EXO4SPI26K83.c: 170:     uint8_t b2 = ((addr & 0x0F) << 4) | ((data >> 4) & 0x0F);
  3717   001692  C003  F004         	movff	eeprom_write_8@data,??_eeprom_write_8
  3718   001696  3A04               	swapf	??_eeprom_write_8^0,f,c
  3719   001698  0E0F               	movlw	15
  3720   00169A  1604               	andwf	??_eeprom_write_8^0,f,c
  3721   00169C  0E0F               	movlw	15
  3722   00169E  1604               	andwf	??_eeprom_write_8^0,f,c
  3723   0016A0  C001  F005         	movff	eeprom_write_8@addr,??_eeprom_write_8+1
  3724   0016A4  0E0F               	movlw	15
  3725   0016A6  1605               	andwf	(??_eeprom_write_8+1)^0,f,c
  3726   0016A8  3805               	swapf	(??_eeprom_write_8+1)^0,w,c
  3727   0016AA  0BF0               	andlw	240
  3728   0016AC  1004               	iorwf	??_eeprom_write_8^0,w,c
  3729   0016AE  6E08               	movwf	eeprom_write_8@b2^0,c
  3730                           
  3731                           ;EXO4SPI26K83.c: 171:     uint8_t b3 = ((data & 0x0F) << 4) | 0x0F;
  3732   0016B0  C003  F004         	movff	eeprom_write_8@data,??_eeprom_write_8
  3733   0016B4  0E0F               	movlw	15
  3734   0016B6  1604               	andwf	??_eeprom_write_8^0,f,c
  3735   0016B8  3804               	swapf	??_eeprom_write_8^0,w,c
  3736   0016BA  0BF0               	andlw	240
  3737   0016BC  090F               	iorlw	15
  3738   0016BE  6E09               	movwf	eeprom_write_8@b3^0,c
  3739   0016C0                     
  3740                           ;EXO4SPI26K83.c: 173:     eeprom_EWEN();
  3741   0016C0  EC0D  F00E         	call	_eeprom_EWEN	;wreg free
  3742   0016C4                     
  3743                           ;EXO4SPI26K83.c: 175:     PORTBbits.RB3 = 1;
  3744   0016C4  86CB               	bsf	203,3,c	;volatile
  3745   0016C6                     
  3746                           ;EXO4SPI26K83.c: 176:     SPI1TWIDTH = 4;
  3747   0016C6  0E04               	movlw	4
  3748   0016C8  013D               	movlb	61	; () banked
  3749   0016CA  6F18               	movwf	24,b	;volatile
  3750   0016CC                     
  3751                           ; BSR set to: 61
  3752                           ;EXO4SPI26K83.c: 177:     SPI1TCNTL = 2;
  3753   0016CC  0E02               	movlw	2
  3754   0016CE  6F12               	movwf	18,b	;volatile
  3755   0016D0                     
  3756                           ; BSR set to: 61
  3757                           ;EXO4SPI26K83.c: 178:     SPI1TCNTH = 0;
  3758   0016D0  6B13               	clrf	19,b	;volatile
  3759   0016D2                     
  3760                           ; BSR set to: 61
  3761                           ;EXO4SPI26K83.c: 179:     SPI1CON2bits.TXR = 1;
  3762   0016D2  8316               	bsf	22,1,b	;volatile
  3763   0016D4                     
  3764                           ; BSR set to: 61
  3765                           ;EXO4SPI26K83.c: 180:     SPI1CON0bits.EN = 1;
  3766   0016D4  8F14               	bsf	20,7,b	;volatile
  3767   0016D6                     
  3768                           ; BSR set to: 61
  3769                           ;EXO4SPI26K83.c: 182:     SPI1TXB = b1;
  3770   0016D6  0060  F01F  FD11   	movff	eeprom_write_8@b1,15633	;volatile
  3771   0016DC                     l169:
  3772                           
  3773                           ; BSR set to: 61
  3774   0016DC  AB17               	btfss	23,5,b	;volatile
  3775   0016DE  EF73  F00B         	goto	u1141
  3776   0016E2  EF75  F00B         	goto	u1140
  3777   0016E6                     u1141:
  3778   0016E6  EF6E  F00B         	goto	l169
  3779   0016EA                     u1140:
  3780   0016EA                     
  3781                           ; BSR set to: 61
  3782                           ;EXO4SPI26K83.c: 184:     SPI1TXB = b2;
  3783   0016EA  0060  F023  FD11   	movff	eeprom_write_8@b2,15633	;volatile
  3784   0016F0                     l172:
  3785                           
  3786                           ; BSR set to: 61
  3787   0016F0  AB17               	btfss	23,5,b	;volatile
  3788   0016F2  EF7D  F00B         	goto	u1151
  3789   0016F6  EF7F  F00B         	goto	u1150
  3790   0016FA                     u1151:
  3791   0016FA  EF78  F00B         	goto	l172
  3792   0016FE                     u1150:
  3793   0016FE                     
  3794                           ; BSR set to: 61
  3795                           ;EXO4SPI26K83.c: 186:     SPI1TXB = b3;
  3796   0016FE  0060  F027  FD11   	movff	eeprom_write_8@b3,15633	;volatile
  3797   001704                     l175:
  3798                           
  3799                           ; BSR set to: 61
  3800   001704  AB17               	btfss	23,5,b	;volatile
  3801   001706  EF87  F00B         	goto	u1161
  3802   00170A  EF89  F00B         	goto	u1160
  3803   00170E                     u1161:
  3804   00170E  EF82  F00B         	goto	l175
  3805   001712                     u1160:
  3806   001712                     
  3807                           ; BSR set to: 61
  3808                           ;EXO4SPI26K83.c: 189:     SPI1CON2bits.TXR = 0;
  3809   001712  9316               	bcf	22,1,b	;volatile
  3810                           
  3811                           ;EXO4SPI26K83.c: 190:     PORTBbits.RB3 = 0;
  3812   001714  96CB               	bcf	203,3,c	;volatile
  3813                           
  3814                           ;EXO4SPI26K83.c: 191:     SPI1CON0bits.EN = 0;
  3815   001716  9F14               	bcf	20,7,b	;volatile
  3816   001718                     
  3817                           ; BSR set to: 61
  3818                           ;EXO4SPI26K83.c: 193:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3819   001718  0E68               	movlw	104
  3820   00171A  6E04               	movwf	??_eeprom_write_8^0,c
  3821   00171C  0EE4               	movlw	228
  3822   00171E                     u1267:
  3823   00171E  2EE8               	decfsz	wreg,f,c
  3824   001720  D7FE               	bra	u1267
  3825   001722  2E04               	decfsz	??_eeprom_write_8^0,f,c
  3826   001724  D7FC               	bra	u1267
  3827   001726  D000               	nop2	
  3828   001728  0012               	return		;funcret
  3829   00172A                     __end_of_eeprom_write_8:
  3830                           	callstack 0
  3831                           
  3832 ;; *************** function _eeprom_EWEN *****************
  3833 ;; Defined at:
  3834 ;;		line 116 in file "EXO4SPI26K83.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		wreg, status,2
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        0 bytes
  3853 ;; Hardware stack levels used: 1
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		_eeprom_write_8
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text14
  3862   001C1A                     __ptext14:
  3863                           	callstack 0
  3864   001C1A                     _eeprom_EWEN:
  3865                           	callstack 29
  3866   001C1A                     
  3867                           ;EXO4SPI26K83.c: 117:     SPI1CON0bits.EN = 1;
  3868   001C1A  013D               	movlb	61	; () banked
  3869   001C1C  8F14               	bsf	20,7,b	;volatile
  3870                           
  3871                           ;EXO4SPI26K83.c: 118:     PORTBbits.RB3 = 1;
  3872   001C1E  86CB               	bsf	203,3,c	;volatile
  3873   001C20                     
  3874                           ; BSR set to: 61
  3875                           ;EXO4SPI26K83.c: 119:     SPI1TWIDTH = 4;
  3876   001C20  0E04               	movlw	4
  3877   001C22  6F18               	movwf	24,b	;volatile
  3878                           
  3879                           ;EXO4SPI26K83.c: 120:     SPI1TCNTL = 1;
  3880   001C24  0E01               	movlw	1
  3881   001C26  6F12               	movwf	18,b	;volatile
  3882   001C28                     
  3883                           ; BSR set to: 61
  3884                           ;EXO4SPI26K83.c: 121:     SPI1TCNTH = 0;
  3885   001C28  6B13               	clrf	19,b	;volatile
  3886   001C2A                     
  3887                           ; BSR set to: 61
  3888                           ;EXO4SPI26K83.c: 122:     SPI1CON2bits.TXR = 1;
  3889   001C2A  8316               	bsf	22,1,b	;volatile
  3890   001C2C                     
  3891                           ; BSR set to: 61
  3892                           ;EXO4SPI26K83.c: 123:     SPI1CON0bits.EN = 1;
  3893   001C2C  8F14               	bsf	20,7,b	;volatile
  3894                           
  3895                           ;EXO4SPI26K83.c: 125:     SPI1TXB = 0b10011000;
  3896   001C2E  0E98               	movlw	152
  3897   001C30  6F11               	movwf	17,b	;volatile
  3898   001C32                     l148:
  3899                           
  3900                           ; BSR set to: 61
  3901   001C32  AB17               	btfss	23,5,b	;volatile
  3902   001C34  EF1E  F00E         	goto	u411
  3903   001C38  EF20  F00E         	goto	u410
  3904   001C3C                     u411:
  3905   001C3C  EF19  F00E         	goto	l148
  3906   001C40                     u410:
  3907   001C40                     
  3908                           ; BSR set to: 61
  3909                           ;EXO4SPI26K83.c: 127:     SPI1TXB = 0b00001111;
  3910   001C40  0E0F               	movlw	15
  3911   001C42  6F11               	movwf	17,b	;volatile
  3912   001C44                     l151:
  3913                           
  3914                           ; BSR set to: 61
  3915   001C44  AB17               	btfss	23,5,b	;volatile
  3916   001C46  EF27  F00E         	goto	u421
  3917   001C4A  EF29  F00E         	goto	u420
  3918   001C4E                     u421:
  3919   001C4E  EF22  F00E         	goto	l151
  3920   001C52                     u420:
  3921   001C52                     
  3922                           ; BSR set to: 61
  3923                           ;EXO4SPI26K83.c: 130:     SPI1CON2bits.TXR = 0;
  3924   001C52  9316               	bcf	22,1,b	;volatile
  3925                           
  3926                           ;EXO4SPI26K83.c: 131:     PORTBbits.RB3 = 0;
  3927   001C54  96CB               	bcf	203,3,c	;volatile
  3928                           
  3929                           ;EXO4SPI26K83.c: 132:     SPI1CON0bits.EN = 0;
  3930   001C56  9F14               	bcf	20,7,b	;volatile
  3931   001C58                     
  3932                           ; BSR set to: 61
  3933   001C58  0012               	return		;funcret
  3934   001C5A                     __end_of_eeprom_EWEN:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _eeprom_read_8 *****************
  3938 ;; Defined at:
  3939 ;;		line 135 in file "EXO4SPI26K83.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  addr            2    0[COMRAM] unsigned short 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  val3            1    8[COMRAM] unsigned char 
  3944 ;;  val2            1    7[COMRAM] unsigned char 
  3945 ;;  b2              1    6[COMRAM] unsigned char 
  3946 ;;  b1              1    5[COMRAM] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;Total ram usage:        9 bytes
  3961 ;; Hardware stack levels used: 1
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text15
  3970   0017D8                     __ptext15:
  3971                           	callstack 0
  3972   0017D8                     _eeprom_read_8:
  3973                           	callstack 30
  3974   0017D8                     
  3975                           ;EXO4SPI26K83.c: 136:     uint8_t b1 = (0b110 << 5) | ((addr >> 4) & 0x1F);
  3976   0017D8  C001  F003         	movff	eeprom_read_8@addr,??_eeprom_read_8
  3977   0017DC  C002  F004         	movff	eeprom_read_8@addr+1,??_eeprom_read_8+1
  3978   0017E0  0E04               	movlw	4
  3979   0017E2  6E05               	movwf	(??_eeprom_read_8+2)^0,c
  3980   0017E4                     u1095:
  3981   0017E4  90D8               	bcf	status,0,c
  3982   0017E6  3204               	rrcf	(??_eeprom_read_8+1)^0,f,c
  3983   0017E8  3203               	rrcf	??_eeprom_read_8^0,f,c
  3984   0017EA  2E05               	decfsz	(??_eeprom_read_8+2)^0,f,c
  3985   0017EC  EFF2  F00B         	goto	u1095
  3986   0017F0  5003               	movf	??_eeprom_read_8^0,w,c
  3987   0017F2  0B1F               	andlw	31
  3988   0017F4  09C0               	iorlw	192
  3989   0017F6  6E06               	movwf	eeprom_read_8@b1^0,c
  3990                           
  3991                           ;EXO4SPI26K83.c: 137:     uint8_t b2 = ((addr & 0x0F) << 4) | 0x0F;
  3992   0017F8  C001  F003         	movff	eeprom_read_8@addr,??_eeprom_read_8
  3993   0017FC  0E0F               	movlw	15
  3994   0017FE  1603               	andwf	??_eeprom_read_8^0,f,c
  3995   001800  3803               	swapf	??_eeprom_read_8^0,w,c
  3996   001802  0BF0               	andlw	240
  3997   001804  090F               	iorlw	15
  3998   001806  6E07               	movwf	eeprom_read_8@b2^0,c
  3999   001808                     
  4000                           ;EXO4SPI26K83.c: 138:     uint8_t val2, val3;;EXO4SPI26K83.c: 140:     PORTBbits.RB3 = 1
      +                          ;
  4001   001808  86CB               	bsf	203,3,c	;volatile
  4002   00180A                     
  4003                           ;EXO4SPI26K83.c: 141:     SPI1TWIDTH = 0;
  4004   00180A  013D               	movlb	61	; () banked
  4005   00180C  6B18               	clrf	24,b	;volatile
  4006   00180E                     
  4007                           ; BSR set to: 61
  4008                           ;EXO4SPI26K83.c: 142:     SPI1TCNTL = 3;
  4009   00180E  0E03               	movlw	3
  4010   001810  6F12               	movwf	18,b	;volatile
  4011   001812                     
  4012                           ; BSR set to: 61
  4013                           ;EXO4SPI26K83.c: 143:     SPI1TCNTH = 0;
  4014   001812  6B13               	clrf	19,b	;volatile
  4015   001814                     
  4016                           ; BSR set to: 61
  4017                           ;EXO4SPI26K83.c: 144:     SPI1CON2bits.TXR = 1;
  4018   001814  8316               	bsf	22,1,b	;volatile
  4019   001816                     
  4020                           ; BSR set to: 61
  4021                           ;EXO4SPI26K83.c: 145:     SPI1CON2bits.RXR = 1;
  4022   001816  8116               	bsf	22,0,b	;volatile
  4023   001818                     
  4024                           ; BSR set to: 61
  4025                           ;EXO4SPI26K83.c: 146:     SPI1CON0bits.EN = 1;
  4026   001818  8F14               	bsf	20,7,b	;volatile
  4027   00181A                     
  4028                           ; BSR set to: 61
  4029                           ;EXO4SPI26K83.c: 148:     SPI1TXB = b1;
  4030   00181A  0060  F01B  FD11   	movff	eeprom_read_8@b1,15633	;volatile
  4031   001820                     l157:
  4032                           
  4033                           ; BSR set to: 61
  4034   001820  AB17               	btfss	23,5,b	;volatile
  4035   001822  EF15  F00C         	goto	u1101
  4036   001826  EF17  F00C         	goto	u1100
  4037   00182A                     u1101:
  4038   00182A  EF10  F00C         	goto	l157
  4039   00182E                     u1100:
  4040   00182E                     
  4041                           ; BSR set to: 61
  4042                           ;EXO4SPI26K83.c: 150:     (void)SPI1RXB;
  4043   00182E  5110               	movf	16,w,b	;volatile
  4044   001830                     
  4045                           ; BSR set to: 61
  4046                           ;EXO4SPI26K83.c: 152:     SPI1TXB = b2;
  4047   001830  0060  F01F  FD11   	movff	eeprom_read_8@b2,15633	;volatile
  4048   001836                     l160:
  4049                           
  4050                           ; BSR set to: 61
  4051   001836  AB17               	btfss	23,5,b	;volatile
  4052   001838  EF20  F00C         	goto	u1111
  4053   00183C  EF22  F00C         	goto	u1110
  4054   001840                     u1111:
  4055   001840  EF1B  F00C         	goto	l160
  4056   001844                     u1110:
  4057   001844                     
  4058                           ; BSR set to: 61
  4059                           ;EXO4SPI26K83.c: 154:     val2 = SPI1RXB;
  4060   001844  006F F440  F008    	movff	15632,eeprom_read_8@val2	;volatile
  4061                           
  4062                           ;EXO4SPI26K83.c: 156:     SPI1TXB = 0xFF;
  4063   00184A  6911               	setf	17,b	;volatile
  4064   00184C                     l163:
  4065                           
  4066                           ; BSR set to: 61
  4067   00184C  AB17               	btfss	23,5,b	;volatile
  4068   00184E  EF2B  F00C         	goto	u1121
  4069   001852  EF2D  F00C         	goto	u1120
  4070   001856                     u1121:
  4071   001856  EF26  F00C         	goto	l163
  4072   00185A                     u1120:
  4073   00185A                     
  4074                           ; BSR set to: 61
  4075                           ;EXO4SPI26K83.c: 158:     val3 = SPI1RXB;
  4076   00185A  006F F440  F009    	movff	15632,eeprom_read_8@val3	;volatile
  4077                           
  4078                           ;EXO4SPI26K83.c: 160:     SPI1CON2bits.RXR = 0;
  4079   001860  9116               	bcf	22,0,b	;volatile
  4080                           
  4081                           ;EXO4SPI26K83.c: 161:     SPI1CON2bits.TXR = 0;
  4082   001862  9316               	bcf	22,1,b	;volatile
  4083                           
  4084                           ;EXO4SPI26K83.c: 162:     PORTBbits.RB3 = 0;
  4085   001864  96CB               	bcf	203,3,c	;volatile
  4086                           
  4087                           ;EXO4SPI26K83.c: 163:     SPI1CON0bits.EN = 0;
  4088   001866  9F14               	bcf	20,7,b	;volatile
  4089   001868                     
  4090                           ; BSR set to: 61
  4091                           ;EXO4SPI26K83.c: 165:     return (uint8_t)(((val2 & 0x0F) << 4) | ((val3 >> 4) & 0x0F));
  4092   001868  C009  F003         	movff	eeprom_read_8@val3,??_eeprom_read_8
  4093   00186C  3A03               	swapf	??_eeprom_read_8^0,f,c
  4094   00186E  0E0F               	movlw	15
  4095   001870  1603               	andwf	??_eeprom_read_8^0,f,c
  4096   001872  0E0F               	movlw	15
  4097   001874  1603               	andwf	??_eeprom_read_8^0,f,c
  4098   001876  C008  F004         	movff	eeprom_read_8@val2,??_eeprom_read_8+1
  4099   00187A  0E0F               	movlw	15
  4100   00187C  1604               	andwf	(??_eeprom_read_8+1)^0,f,c
  4101   00187E  3804               	swapf	(??_eeprom_read_8+1)^0,w,c
  4102   001880  0BF0               	andlw	240
  4103   001882  1003               	iorwf	??_eeprom_read_8^0,w,c
  4104   001884                     
  4105                           ; BSR set to: 61
  4106   001884  0012               	return		;funcret
  4107   001886                     __end_of_eeprom_read_8:
  4108                           	callstack 0
  4109                           
  4110 ;; *************** function _Lcd_Write_String *****************
  4111 ;; Defined at:
  4112 ;;		line 94 in file "./lcd.h"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  a               1    4[COMRAM] PTR unsigned char 
  4115 ;;		 -> main@buf(16), 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  i               2    5[COMRAM] int 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4127 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;Total ram usage:        3 bytes
  4132 ;; Hardware stack levels used: 1
  4133 ;; Hardware stack levels required when called: 2
  4134 ;; This function calls:
  4135 ;;		_Lcd_Write_Char
  4136 ;; This function is called by:
  4137 ;;		_main
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text16
  4142   001CCC                     __ptext16:
  4143                           	callstack 0
  4144   001CCC                     _Lcd_Write_String:
  4145                           	callstack 28
  4146   001CCC                     
  4147                           ;./lcd.h: 94: void Lcd_Write_String(char *a);./lcd.h: 95: {;./lcd.h: 96:  int i;;./lcd.h
      +                          : 97:  for(i=0;a[i]!='\0';i++)
  4148   001CCC  6A07               	clrf	(Lcd_Write_String@i+1)^0,c
  4149   001CCE  0E00               	movlw	0
  4150   001CD0  6E06               	movwf	Lcd_Write_String@i^0,c
  4151   001CD2  EF74  F00E         	goto	l1800
  4152   001CD6                     l1796:
  4153                           
  4154                           ;./lcd.h: 98:     Lcd_Write_Char(a[i]);
  4155   001CD6  5005               	movf	Lcd_Write_String@a^0,w,c
  4156   001CD8  2406               	addwf	Lcd_Write_String@i^0,w,c
  4157   001CDA  6ED9               	movwf	fsr2l,c
  4158   001CDC  6ADA               	clrf	fsr2h,c
  4159   001CDE  50DF               	movf	indf2,w,c
  4160   001CE0  EC4A  F00E         	call	_Lcd_Write_Char
  4161   001CE4  4A06               	infsnz	Lcd_Write_String@i^0,f,c
  4162   001CE6  2A07               	incf	(Lcd_Write_String@i+1)^0,f,c
  4163   001CE8                     l1800:
  4164   001CE8  5005               	movf	Lcd_Write_String@a^0,w,c
  4165   001CEA  2406               	addwf	Lcd_Write_String@i^0,w,c
  4166   001CEC  6ED9               	movwf	fsr2l,c
  4167   001CEE  6ADA               	clrf	fsr2h,c
  4168   001CF0  50DF               	movf	indf2,w,c
  4169   001CF2  A4D8               	btfss	status,2,c
  4170   001CF4  EF7E  F00E         	goto	u1041
  4171   001CF8  EF80  F00E         	goto	u1040
  4172   001CFC                     u1041:
  4173   001CFC  EF6B  F00E         	goto	l1796
  4174   001D00                     u1040:
  4175   001D00  0012               	return		;funcret
  4176   001D02                     __end_of_Lcd_Write_String:
  4177                           	callstack 0
  4178                           
  4179 ;; *************** function _Lcd_Write_Char *****************
  4180 ;; Defined at:
  4181 ;;		line 78 in file "./lcd.h"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  a               1    wreg     unsigned char 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  a               1    3[COMRAM] unsigned char 
  4186 ;;  y               1    2[COMRAM] unsigned char 
  4187 ;;  temp            1    1[COMRAM] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;Total ram usage:        3 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; Hardware stack levels required when called: 1
  4204 ;; This function calls:
  4205 ;;		_Lcd_Port
  4206 ;; This function is called by:
  4207 ;;		_Lcd_Write_String
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text17
  4212   001C94                     __ptext17:
  4213                           	callstack 0
  4214   001C94                     _Lcd_Write_Char:
  4215                           	callstack 28
  4216                           
  4217                           ;incstack = 0
  4218                           ;Lcd_Write_Char@a stored from wreg
  4219   001C94  6E04               	movwf	Lcd_Write_Char@a^0,c
  4220   001C96                     
  4221                           ;./lcd.h: 78: void Lcd_Write_Char(char a);./lcd.h: 79: {;./lcd.h: 80:    char temp,y;;./
      +                          lcd.h: 81:    temp = a&0x0F;
  4222   001C96  5004               	movf	Lcd_Write_Char@a^0,w,c
  4223   001C98  0B0F               	andlw	15
  4224   001C9A  6E02               	movwf	Lcd_Write_Char@temp^0,c
  4225                           
  4226                           ;./lcd.h: 82:    y = a&0xF0;
  4227   001C9C  5004               	movf	Lcd_Write_Char@a^0,w,c
  4228   001C9E  0BF0               	andlw	240
  4229   001CA0  6E03               	movwf	Lcd_Write_Char@y^0,c
  4230   001CA2                     
  4231                           ;./lcd.h: 83:    PORTAbits.RA0 = 1;
  4232   001CA2  80CA               	bsf	202,0,c	;volatile
  4233   001CA4                     
  4234                           ;./lcd.h: 84:    Lcd_Port(y>>4);
  4235   001CA4  3803               	swapf	Lcd_Write_Char@y^0,w,c
  4236   001CA6  0B0F               	andlw	15
  4237   001CA8  ECBF  F00D         	call	_Lcd_Port
  4238   001CAC                     
  4239                           ;./lcd.h: 85:    PORTAbits.RA1 = 1;
  4240   001CAC  82CA               	bsf	202,1,c	;volatile
  4241   001CAE                     
  4242                           ;./lcd.h: 86:    _delay((unsigned long)((40)*(64000000/4000000.0)));
  4243   001CAE  0ED5               	movlw	213
  4244   001CB0                     u1277:
  4245   001CB0  2EE8               	decfsz	wreg,f,c
  4246   001CB2  D7FE               	bra	u1277
  4247   001CB4  0000               	nop	
  4248   001CB6                     
  4249                           ;./lcd.h: 87:    PORTAbits.RA1 = 0;
  4250   001CB6  92CA               	bcf	202,1,c	;volatile
  4251   001CB8                     
  4252                           ;./lcd.h: 88:    Lcd_Port(temp);
  4253   001CB8  5002               	movf	Lcd_Write_Char@temp^0,w,c
  4254   001CBA  ECBF  F00D         	call	_Lcd_Port
  4255   001CBE                     
  4256                           ;./lcd.h: 89:    PORTAbits.RA1 = 1;
  4257   001CBE  82CA               	bsf	202,1,c	;volatile
  4258   001CC0                     
  4259                           ;./lcd.h: 90:    _delay((unsigned long)((40)*(64000000/4000000.0)));
  4260   001CC0  0ED5               	movlw	213
  4261   001CC2                     u1287:
  4262   001CC2  2EE8               	decfsz	wreg,f,c
  4263   001CC4  D7FE               	bra	u1287
  4264   001CC6  0000               	nop	
  4265   001CC8                     
  4266                           ;./lcd.h: 91:    PORTAbits.RA1 = 0;
  4267   001CC8  92CA               	bcf	202,1,c	;volatile
  4268   001CCA  0012               	return		;funcret
  4269   001CCC                     __end_of_Lcd_Write_Char:
  4270                           	callstack 0
  4271                           
  4272 ;; *************** function _Lcd_Set_Cursor *****************
  4273 ;; Defined at:
  4274 ;;		line 38 in file "./lcd.h"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  a               1    wreg     unsigned char 
  4277 ;;  b               1    3[COMRAM] unsigned char 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  a               1    4[COMRAM] unsigned char 
  4280 ;;  temp            1    7[COMRAM] unsigned char 
  4281 ;;  y               1    6[COMRAM] unsigned char 
  4282 ;;  z               1    5[COMRAM] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4292 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;Total ram usage:        5 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 1
  4299 ;; This function calls:
  4300 ;;		_Lcd_Cmd
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text18
  4307   001B18                     __ptext18:
  4308                           	callstack 0
  4309   001B18                     _Lcd_Set_Cursor:
  4310                           	callstack 29
  4311                           
  4312                           ;incstack = 0
  4313                           ;Lcd_Set_Cursor@a stored from wreg
  4314   001B18  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  4315   001B1A                     
  4316                           ;./lcd.h: 38: void Lcd_Set_Cursor(char a, char b);./lcd.h: 39: {;./lcd.h: 40:  char temp
      +                          ,z,y;;./lcd.h: 41:  if(a == 1)
  4317   001B1A  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  4318   001B1C  A4D8               	btfss	status,2,c
  4319   001B1E  EF93  F00D         	goto	u1021
  4320   001B22  EF95  F00D         	goto	u1020
  4321   001B26                     u1021:
  4322   001B26  EFA6  F00D         	goto	l1786
  4323   001B2A                     u1020:
  4324   001B2A                     
  4325                           ;./lcd.h: 42:  {;./lcd.h: 43:    temp = 0x80 + b - 1;
  4326   001B2A  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4327   001B2C  0F7F               	addlw	127
  4328   001B2E  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4329                           
  4330                           ;./lcd.h: 44:   z = temp>>4;
  4331   001B30  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4332   001B32  0B0F               	andlw	15
  4333   001B34  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4334                           
  4335                           ;./lcd.h: 45:   y = temp & 0x0F;
  4336   001B36  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4337   001B38  0B0F               	andlw	15
  4338   001B3A  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4339   001B3C                     
  4340                           ;./lcd.h: 46:   Lcd_Cmd(z);
  4341   001B3C  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4342   001B3E  EC99  F00E         	call	_Lcd_Cmd
  4343   001B42                     
  4344                           ;./lcd.h: 47:   Lcd_Cmd(y);
  4345   001B42  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4346   001B44  EC99  F00E         	call	_Lcd_Cmd
  4347                           
  4348                           ;./lcd.h: 48:  }
  4349   001B48  EFBE  F00D         	goto	l109
  4350   001B4C                     l1786:
  4351   001B4C  0E02               	movlw	2
  4352   001B4E  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4353   001B50  A4D8               	btfss	status,2,c
  4354   001B52  EFAD  F00D         	goto	u1031
  4355   001B56  EFAF  F00D         	goto	u1030
  4356   001B5A                     u1031:
  4357   001B5A  EFBE  F00D         	goto	l109
  4358   001B5E                     u1030:
  4359   001B5E                     
  4360                           ;./lcd.h: 50:  {;./lcd.h: 51:   temp = 0xC0 + b - 1;
  4361   001B5E  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4362   001B60  0FBF               	addlw	191
  4363   001B62  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4364                           
  4365                           ;./lcd.h: 52:   z = temp>>4;
  4366   001B64  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4367   001B66  0B0F               	andlw	15
  4368   001B68  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4369                           
  4370                           ;./lcd.h: 53:   y = temp & 0x0F;
  4371   001B6A  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4372   001B6C  0B0F               	andlw	15
  4373   001B6E  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4374   001B70                     
  4375                           ;./lcd.h: 54:   Lcd_Cmd(z);
  4376   001B70  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4377   001B72  EC99  F00E         	call	_Lcd_Cmd
  4378   001B76                     
  4379                           ;./lcd.h: 55:   Lcd_Cmd(y);
  4380   001B76  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4381   001B78  EC99  F00E         	call	_Lcd_Cmd
  4382   001B7C                     l109:
  4383   001B7C  0012               	return		;funcret
  4384   001B7E                     __end_of_Lcd_Set_Cursor:
  4385                           	callstack 0
  4386                           
  4387 ;; *************** function _Lcd_Init *****************
  4388 ;; Defined at:
  4389 ;;		line 59 in file "./lcd.h"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;Total ram usage:        2 bytes
  4408 ;; Hardware stack levels used: 1
  4409 ;; Hardware stack levels required when called: 1
  4410 ;; This function calls:
  4411 ;;		_Lcd_Cmd
  4412 ;;		_Lcd_Port
  4413 ;; This function is called by:
  4414 ;;		_main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text19
  4419   001A36                     __ptext19:
  4420                           	callstack 0
  4421   001A36                     _Lcd_Init:
  4422                           	callstack 29
  4423   001A36                     
  4424                           ;./lcd.h: 61:   Lcd_Port(0x00);
  4425   001A36  0E00               	movlw	0
  4426   001A38  ECBF  F00D         	call	_Lcd_Port
  4427   001A3C                     
  4428                           ;./lcd.h: 62:    _delay((unsigned long)((20)*(64000000/4000.0)));
  4429   001A3C  0E02               	movlw	2
  4430   001A3E  6E05               	movwf	(??_Lcd_Init+1)^0,c
  4431   001A40  0EA0               	movlw	160
  4432   001A42  6E04               	movwf	??_Lcd_Init^0,c
  4433   001A44  0E92               	movlw	146
  4434   001A46                     u1297:
  4435   001A46  2EE8               	decfsz	wreg,f,c
  4436   001A48  D7FE               	bra	u1297
  4437   001A4A  2E04               	decfsz	??_Lcd_Init^0,f,c
  4438   001A4C  D7FC               	bra	u1297
  4439   001A4E  2E05               	decfsz	(??_Lcd_Init+1)^0,f,c
  4440   001A50  D7FA               	bra	u1297
  4441   001A52  D000               	nop2	
  4442   001A54                     
  4443                           ;./lcd.h: 63:   Lcd_Cmd(0x03);
  4444   001A54  0E03               	movlw	3
  4445   001A56  EC99  F00E         	call	_Lcd_Cmd
  4446   001A5A                     
  4447                           ;./lcd.h: 64:  _delay((unsigned long)((5)*(64000000/4000.0)));
  4448   001A5A  0E68               	movlw	104
  4449   001A5C  6E04               	movwf	??_Lcd_Init^0,c
  4450   001A5E  0EE4               	movlw	228
  4451   001A60                     u1307:
  4452   001A60  2EE8               	decfsz	wreg,f,c
  4453   001A62  D7FE               	bra	u1307
  4454   001A64  2E04               	decfsz	??_Lcd_Init^0,f,c
  4455   001A66  D7FC               	bra	u1307
  4456   001A68  D000               	nop2	
  4457   001A6A                     
  4458                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  4459   001A6A  0E03               	movlw	3
  4460   001A6C  EC99  F00E         	call	_Lcd_Cmd
  4461   001A70                     
  4462                           ;./lcd.h: 66:  _delay((unsigned long)((11)*(64000000/4000.0)));
  4463   001A70  0EE5               	movlw	229
  4464   001A72  6E04               	movwf	??_Lcd_Init^0,c
  4465   001A74  0E91               	movlw	145
  4466   001A76                     u1317:
  4467   001A76  2EE8               	decfsz	wreg,f,c
  4468   001A78  D7FE               	bra	u1317
  4469   001A7A  2E04               	decfsz	??_Lcd_Init^0,f,c
  4470   001A7C  D7FC               	bra	u1317
  4471   001A7E  0000               	nop	
  4472   001A80                     
  4473                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  4474   001A80  0E03               	movlw	3
  4475   001A82  EC99  F00E         	call	_Lcd_Cmd
  4476   001A86                     
  4477                           ;./lcd.h: 69:   Lcd_Cmd(0x02);
  4478   001A86  0E02               	movlw	2
  4479   001A88  EC99  F00E         	call	_Lcd_Cmd
  4480   001A8C                     
  4481                           ;./lcd.h: 70:   Lcd_Cmd(0x02);
  4482   001A8C  0E02               	movlw	2
  4483   001A8E  EC99  F00E         	call	_Lcd_Cmd
  4484   001A92                     
  4485                           ;./lcd.h: 71:   Lcd_Cmd(0x08);
  4486   001A92  0E08               	movlw	8
  4487   001A94  EC99  F00E         	call	_Lcd_Cmd
  4488   001A98                     
  4489                           ;./lcd.h: 72:   Lcd_Cmd(0x00);
  4490   001A98  0E00               	movlw	0
  4491   001A9A  EC99  F00E         	call	_Lcd_Cmd
  4492   001A9E                     
  4493                           ;./lcd.h: 73:   Lcd_Cmd(0x0C);
  4494   001A9E  0E0C               	movlw	12
  4495   001AA0  EC99  F00E         	call	_Lcd_Cmd
  4496   001AA4                     
  4497                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  4498   001AA4  0E00               	movlw	0
  4499   001AA6  EC99  F00E         	call	_Lcd_Cmd
  4500   001AAA                     
  4501                           ;./lcd.h: 75:   Lcd_Cmd(0x06);
  4502   001AAA  0E06               	movlw	6
  4503   001AAC  EC99  F00E         	call	_Lcd_Cmd
  4504   001AB0  0012               	return		;funcret
  4505   001AB2                     __end_of_Lcd_Init:
  4506                           	callstack 0
  4507                           
  4508 ;; *************** function _Lcd_Clear *****************
  4509 ;; Defined at:
  4510 ;;		line 32 in file "./lcd.h"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used: 1
  4530 ;; Hardware stack levels required when called: 2
  4531 ;; This function calls:
  4532 ;;		_Lcd_Cmd
  4533 ;; This function is called by:
  4534 ;;		_main
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text20
  4539   001D6A                     __ptext20:
  4540                           	callstack 0
  4541   001D6A                     _Lcd_Clear:
  4542                           	callstack 28
  4543   001D6A                     
  4544                           ;./lcd.h: 34:  Lcd_Cmd(0);
  4545   001D6A  0E00               	movlw	0
  4546   001D6C  EC99  F00E         	call	_Lcd_Cmd
  4547                           
  4548                           ;./lcd.h: 35:  Lcd_Cmd(1);
  4549   001D70  0E01               	movlw	1
  4550   001D72  EC99  F00E         	call	_Lcd_Cmd
  4551   001D76  0012               	return		;funcret
  4552   001D78                     __end_of_Lcd_Clear:
  4553                           	callstack 0
  4554                           
  4555 ;; *************** function _Lcd_Cmd *****************
  4556 ;; Defined at:
  4557 ;;		line 23 in file "./lcd.h"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  a               1    wreg     unsigned char 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  a               1    2[COMRAM] unsigned char 
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  1    wreg      void 
  4564 ;; Registers used:
  4565 ;;		wreg, status,2, cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;Total ram usage:        2 bytes
  4576 ;; Hardware stack levels used: 1
  4577 ;; This function calls:
  4578 ;;		_Lcd_Port
  4579 ;; This function is called by:
  4580 ;;		_Lcd_Clear
  4581 ;;		_Lcd_Set_Cursor
  4582 ;;		_Lcd_Init
  4583 ;;		_Lcd_Shift_Right
  4584 ;;		_Lcd_Shift_Left
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text21
  4589   001D32                     __ptext21:
  4590                           	callstack 0
  4591   001D32                     _Lcd_Cmd:
  4592                           	callstack 29
  4593                           
  4594                           ;incstack = 0
  4595                           ;Lcd_Cmd@a stored from wreg
  4596   001D32  6E03               	movwf	Lcd_Cmd@a^0,c
  4597   001D34                     
  4598                           ;./lcd.h: 23: void Lcd_Cmd(char a);./lcd.h: 24: {;./lcd.h: 25:  PORTAbits.RA0 = 0;
  4599   001D34  90CA               	bcf	202,0,c	;volatile
  4600   001D36                     
  4601                           ;./lcd.h: 26:  Lcd_Port(a);
  4602   001D36  5003               	movf	Lcd_Cmd@a^0,w,c
  4603   001D38  ECBF  F00D         	call	_Lcd_Port
  4604   001D3C                     
  4605                           ;./lcd.h: 27:  PORTAbits.RA1 = 1;
  4606   001D3C  82CA               	bsf	202,1,c	;volatile
  4607   001D3E                     
  4608                           ;./lcd.h: 28:     _delay((unsigned long)((4)*(64000000/4000.0)));
  4609   001D3E  0E54               	movlw	84
  4610   001D40  6E02               	movwf	??_Lcd_Cmd^0,c
  4611   001D42  0E1C               	movlw	28
  4612   001D44                     u1327:
  4613   001D44  2EE8               	decfsz	wreg,f,c
  4614   001D46  D7FE               	bra	u1327
  4615   001D48  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  4616   001D4A  D7FC               	bra	u1327
  4617   001D4C  D000               	nop2	
  4618   001D4E                     
  4619                           ;./lcd.h: 29:     PORTAbits.RA1 = 0;
  4620   001D4E  92CA               	bcf	202,1,c	;volatile
  4621   001D50  0012               	return		;funcret
  4622   001D52                     __end_of_Lcd_Cmd:
  4623                           	callstack 0
  4624                           
  4625 ;; *************** function _Lcd_Port *****************
  4626 ;; Defined at:
  4627 ;;		line 1 in file "./lcd.h"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  a               1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  a               1    0[COMRAM] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;Total ram usage:        1 bytes
  4646 ;; Hardware stack levels used: 1
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_Lcd_Cmd
  4651 ;;		_Lcd_Init
  4652 ;;		_Lcd_Write_Char
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text22
  4657   001B7E                     __ptext22:
  4658                           	callstack 0
  4659   001B7E                     _Lcd_Port:
  4660                           	callstack 28
  4661                           
  4662                           ;incstack = 0
  4663                           ;Lcd_Port@a stored from wreg
  4664   001B7E  6E01               	movwf	Lcd_Port@a^0,c
  4665   001B80                     
  4666                           ;./lcd.h: 1: void Lcd_Port(char a);./lcd.h: 2: {;./lcd.h: 3:  if(a & 1)
  4667   001B80  A001               	btfss	Lcd_Port@a^0,0,c
  4668   001B82  EFC5  F00D         	goto	u281
  4669   001B86  EFC7  F00D         	goto	u280
  4670   001B8A                     u281:
  4671   001B8A  EFCA  F00D         	goto	l89
  4672   001B8E                     u280:
  4673   001B8E                     
  4674                           ;./lcd.h: 4:   PORTAbits.RA2 = 1;
  4675   001B8E  84CA               	bsf	202,2,c	;volatile
  4676   001B90  EFCB  F00D         	goto	l1220
  4677   001B94                     l89:
  4678                           
  4679                           ;./lcd.h: 6:   PORTAbits.RA2 = 0;
  4680   001B94  94CA               	bcf	202,2,c	;volatile
  4681   001B96                     l1220:
  4682                           
  4683                           ;./lcd.h: 8:  if(a & 2)
  4684   001B96  A201               	btfss	Lcd_Port@a^0,1,c
  4685   001B98  EFD0  F00D         	goto	u291
  4686   001B9C  EFD2  F00D         	goto	u290
  4687   001BA0                     u291:
  4688   001BA0  EFD5  F00D         	goto	l91
  4689   001BA4                     u290:
  4690   001BA4                     
  4691                           ;./lcd.h: 9:   PORTAbits.RA3 = 1;
  4692   001BA4  86CA               	bsf	202,3,c	;volatile
  4693   001BA6  EFD6  F00D         	goto	l1224
  4694   001BAA                     l91:
  4695                           
  4696                           ;./lcd.h: 11:   PORTAbits.RA3 = 0;
  4697   001BAA  96CA               	bcf	202,3,c	;volatile
  4698   001BAC                     l1224:
  4699                           
  4700                           ;./lcd.h: 13:  if(a & 4)
  4701   001BAC  A401               	btfss	Lcd_Port@a^0,2,c
  4702   001BAE  EFDB  F00D         	goto	u301
  4703   001BB2  EFDD  F00D         	goto	u300
  4704   001BB6                     u301:
  4705   001BB6  EFE0  F00D         	goto	l93
  4706   001BBA                     u300:
  4707   001BBA                     
  4708                           ;./lcd.h: 14:   PORTAbits.RA4 = 1;
  4709   001BBA  88CA               	bsf	202,4,c	;volatile
  4710   001BBC  EFE1  F00D         	goto	l1228
  4711   001BC0                     l93:
  4712                           
  4713                           ;./lcd.h: 16:   PORTAbits.RA4 = 0;
  4714   001BC0  98CA               	bcf	202,4,c	;volatile
  4715   001BC2                     l1228:
  4716                           
  4717                           ;./lcd.h: 18:  if(a & 8)
  4718   001BC2  A601               	btfss	Lcd_Port@a^0,3,c
  4719   001BC4  EFE6  F00D         	goto	u311
  4720   001BC8  EFE8  F00D         	goto	u310
  4721   001BCC                     u311:
  4722   001BCC  EFEB  F00D         	goto	l95
  4723   001BD0                     u310:
  4724   001BD0                     
  4725                           ;./lcd.h: 19:   PORTAbits.RA5 = 1;
  4726   001BD0  8ACA               	bsf	202,5,c	;volatile
  4727   001BD2  EFEC  F00D         	goto	l97
  4728   001BD6                     l95:
  4729                           
  4730                           ;./lcd.h: 21:   PORTAbits.RA5 = 0;
  4731   001BD6  9ACA               	bcf	202,5,c	;volatile
  4732   001BD8                     l97:
  4733   001BD8  0012               	return		;funcret
  4734   001BDA                     __end_of_Lcd_Port:
  4735                           	callstack 0
  4736                           
  4737                           	psect	rparam
  4738   000001                     ___rparam_used  equ	1
  4739   000000                     ___param_bank   equ	0
  4740   000000                     __Lparam        equ	__Lrparam
  4741   000000                     __Hparam        equ	__Hrparam
  4742                           
  4743                           	psect	config
  4744                           
  4745                           ;Config register CONFIG1L @ 0x300000
  4746                           ;	External Oscillator Selection
  4747                           ;	FEXTOSC = OFF, Oscillator not enabled
  4748                           ;	Reset Oscillator Selection
  4749                           ;	RSTOSC = HFINTOSC_64MHZ, HFINTOSC with HFFRQ = 64 MHz and CDIV = 1:1
  4750   300000                     	org	3145728
  4751   300000  8C                 	db	140
  4752                           
  4753                           ;Config register CONFIG1H @ 0x300001
  4754                           ;	Clock out Enable bit
  4755                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  4756                           ;	PRLOCKED One-Way Set Enable bit
  4757                           ;	PR1WAY = OFF, PRLOCK bit can be set and cleared repeatedly
  4758                           ;	Clock Switch Enable bit
  4759                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  4760                           ;	Fail-Safe Clock Monitor Enable bit
  4761                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  4762   300001                     	org	3145729
  4763   300001  FD                 	db	253
  4764                           
  4765                           ;Config register CONFIG2L @ 0x300002
  4766                           ;	MCLR Enable bit
  4767                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  4768                           ;	Power-up timer selection bits
  4769                           ;	PWRTS = PWRT_OFF, PWRT is disabled
  4770                           ;	Multi-vector enable bit
  4771                           ;	MVECEN = OFF, Interrupt contoller does not use vector table to prioritze interrupts
  4772                           ;	IVTLOCK bit One-way set enable bit
  4773                           ;	IVT1WAY = OFF, IVTLOCK bit can be cleared and set repeatedly
  4774                           ;	Low Power BOR Enable bit
  4775                           ;	LPBOREN = OFF, ULPBOR disabled
  4776                           ;	Brown-out Reset Enable bits
  4777                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  4778   300002                     	org	3145730
  4779   300002  E7                 	db	231
  4780                           
  4781                           ;Config register CONFIG2H @ 0x300003
  4782                           ;	Brown-out Reset Voltage Selection bits
  4783                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  4784                           ;	ZCD Disable bit
  4785                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  4786                           ;	PPSLOCK bit One-Way Set Enable bit
  4787                           ;	PPS1WAY = OFF, PPSLOCK bit can be set and cleared repeatedly (subject to the unlock se
      +                          quence)
  4788                           ;	Stack Full/Underflow Reset Enable bit
  4789                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4790                           ;	Debugger Enable bit
  4791                           ;	DEBUG = OFF, Background debugger disabled
  4792                           ;	Extended Instruction Set Enable bit
  4793                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  4794   300003                     	org	3145731
  4795   300003  F7                 	db	247
  4796                           
  4797                           ;Config register CONFIG3L @ 0x300004
  4798                           ;	WDT Period selection bits
  4799                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  4800                           ;	WDT operating mode
  4801                           ;	WDTE = OFF, WDT Disabled; SWDTEN is ignored
  4802   300004                     	org	3145732
  4803   300004  9F                 	db	159
  4804                           
  4805                           ;Config register CONFIG3H @ 0x300005
  4806                           ;	WDT Window Select bits
  4807                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  4808                           ;	WDT input clock selector
  4809                           ;	WDTCCS = SC, Software Control
  4810   300005                     	org	3145733
  4811   300005  FF                 	db	255
  4812                           
  4813                           ;Config register CONFIG4L @ 0x300006
  4814                           ;	Boot Block Size selection bits
  4815                           ;	BBSIZE = BBSIZE_512, Boot Block size is 512 words
  4816                           ;	Boot Block enable bit
  4817                           ;	BBEN = OFF, Boot block disabled
  4818                           ;	Storage Area Flash enable bit
  4819                           ;	SAFEN = OFF, SAF disabled
  4820                           ;	Application Block write protection bit
  4821                           ;	WRTAPP = OFF, Application Block not write protected
  4822   300006                     	org	3145734
  4823   300006  FF                 	db	255
  4824                           
  4825                           ;Config register CONFIG4H @ 0x300007
  4826                           ;	Boot Block Write Protection bit
  4827                           ;	WRTB = OFF, Boot Block not write-protected
  4828                           ;	Configuration Register Write Protection bit
  4829                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
  4830                           ;	Data EEPROM Write Protection bit
  4831                           ;	WRTD = OFF, Data EEPROM not write-protected
  4832                           ;	SAF Write protection bit
  4833                           ;	WRTSAF = OFF, SAF not Write Protected
  4834                           ;	Low Voltage Programming Enable bit
  4835                           ;	LVP = OFF, HV on MCLR/VPP must be used for programming
  4836   300007                     	org	3145735
  4837   300007  DF                 	db	223
  4838                           
  4839                           ;Config register CONFIG5L @ 0x300008
  4840                           ;	PFM and Data EEPROM Code Protection bit
  4841                           ;	CP = OFF, PFM and Data EEPROM code protection disabled
  4842   300008                     	org	3145736
  4843   300008  FF                 	db	255
  4844                           
  4845                           ;Config register CONFIG5H @ 0x300009
  4846                           ;	unspecified, using default values
  4847   300009                     	org	3145737
  4848   300009  FF                 	db	255
  4849                           tosu	equ	0x3FFF
  4850                           tosh	equ	0x3FFE
  4851                           tosl	equ	0x3FFD
  4852                           stkptr	equ	0x3FFC
  4853                           pclatu	equ	0x3FFB
  4854                           pclath	equ	0x3FFA
  4855                           pcl	equ	0x3FF9
  4856                           tblptru	equ	0x3FF8
  4857                           tblptrh	equ	0x3FF7
  4858                           tblptrl	equ	0x3FF6
  4859                           tablat	equ	0x3FF5
  4860                           prodh	equ	0x3FF4
  4861                           prodl	equ	0x3FF3
  4862                           indf0	equ	0x3FEF
  4863                           postinc0	equ	0x3FEE
  4864                           postdec0	equ	0x3FED
  4865                           preinc0	equ	0x3FEC
  4866                           plusw0	equ	0x3FEB
  4867                           fsr0h	equ	0x3FEA
  4868                           fsr0l	equ	0x3FE9
  4869                           wreg	equ	0x3FE8
  4870                           indf1	equ	0x3FE7
  4871                           postinc1	equ	0x3FE6
  4872                           postdec1	equ	0x3FE5
  4873                           preinc1	equ	0x3FE4
  4874                           plusw1	equ	0x3FE3
  4875                           fsr1h	equ	0x3FE2
  4876                           fsr1l	equ	0x3FE1
  4877                           bsr	equ	0x3FE0
  4878                           indf2	equ	0x3FDF
  4879                           postinc2	equ	0x3FDE
  4880                           postdec2	equ	0x3FDD
  4881                           preinc2	equ	0x3FDC
  4882                           plusw2	equ	0x3FDB
  4883                           fsr2h	equ	0x3FDA
  4884                           fsr2l	equ	0x3FD9
  4885                           status	equ	0x3FD8

Data Sizes:
    Strings     36
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1004$buffer	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    S1004$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 8
		 -> main@hx(COMRAM[8]), ?_sprintf(COMRAM[2]), STR_3(CODE[7]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    stoa@s	PTR unsigned char  size(1) Largest target is 8
		 -> main@hx(COMRAM[8]), ?_sprintf(COMRAM[2]), 

    u8_hex@h	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    u8_hex@out	PTR unsigned char  size(1) Largest target is 8
		 -> main@hx(COMRAM[8]), 

    uart_send_string@s	PTR const unsigned char  size(1) Largest target is 16
		 -> main@buf(COMRAM[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _stoa->_fputc
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0    4621
                                             65 COMRAM    29    29      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                      _eeprom_read_8
                     _eeprom_write_8
                            _sprintf
                             _u8_hex
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     1     0      1      46
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _u8_hex                                               5     3      2     201
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    14      6    3007
                                             47 COMRAM    18    12      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2802
                                             43 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     8      4    2660
                                             32 COMRAM    11     7      4
                              _fputc
                 _read_prec_or_width
                               _stoa
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                12     9      3    1057
                                             20 COMRAM    12     9      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4     759
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2     339
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _stoa                                                12    10      2     557
                                              8 COMRAM    12    10      2
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     238
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     182
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eeprom_write_8                                       9     6      3     159
                                              0 COMRAM     9     6      3
                        _eeprom_EWEN
 ---------------------------------------------------------------------------------
 (2) _eeprom_EWEN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eeprom_read_8                                        9     7      2     137
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     2      1     211
                                              4 COMRAM     3     2      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     360
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _eeprom_read_8
   _eeprom_write_8
     _eeprom_EWEN
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
         _stoa
           _fputc
         _xtoa
           _pad
             _fputc
             _fputs
               _fputc
   _u8_hex
   _uart_send_string

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            4095      0       0      0.0%
BITBIGSFRh        1306      0       0      0.0%
BITBIGSFRllll      675      0       0      0.0%
BITBANK15          256      0       0      0.0%
BANK15             256      0       0      0.0%
BITBANK14          256      0       0      0.0%
BANK14             256      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBIGSFRllh       214      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0      36     22.5%
BITBIGSFRlllh      102      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     94      95    100.0%
BITBIGSFRlh          3      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     131      0.0%


Microchip Technology PIC18 Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Thu Oct 16 09:08:33 2025

  __end_of_uart_send_string 1B18                          l91 1BAA                          l93 1BC0  
                        l95 1BD6                          l97 1BD8                          l89 1B94  
         eeprom_read_8@addr 0001           eeprom_read_8@val2 0008           eeprom_read_8@val3 0009  
                       l100 1D50                         l103 1D76                         l112 1AB0  
                       l121 1D00                         l130 1A34                         l115 1CCA  
                       l109 1B7C                         l142 1B00                         l151 1C44  
                       l135 1AB6                         l160 1836                         l153 1C52  
                       l145 1B16                         l162 1844                         l154 1C58  
                       l163 184C                         l171 16EA                         l139 1AEA  
                       l148 1C32                         l172 16F0                         l165 185A  
                       l157 1820                         l166 1884                         l174 16FE  
                       l175 1704                         l177 1712                         l169 16DC  
                       l178 1728                         l979 1D30                         l997 1960  
                       u300 1BBA                         u301 1BB6                         u310 1BD0  
                       u311 1BCC                         u410 1C40                         u411 1C3C  
                       u420 1C52                         u421 1C4E                         u280 1B8E  
                       u281 1B8A                         u290 1BA4                         u291 1BA0  
                       u700 1940                         u701 193C                         u710 195A  
                       u711 1956                         u800 1538                         u720 199A  
                       u801 1534                         u721 1996                         u650 1896  
                       u810 1546                         u730 19A8                         u651 1892  
                       u811 1542                         u731 19A4                         u900 1754  
                       u660 18A6                         u820 157A                         u740 142A  
                       u901 1750                         u661 18A2                         u821 1576  
                       u741 1426                         u910 17CE                         u670 18CC  
                       u750 147A                         u830 15B2                         u911 17CA  
                       u671 18C8                         u831 15AE                         u680 18FE  
                       u760 148A                         u920 104A                         u681 18FA  
                       u761 1486                         u921 1046                         u770 14A8  
                       u690 1C92                         u850 1610                         u930 10AE  
                       u771 14A4                         u691 1C8E                         u851 160C  
                       u931 10AA                         u780 14DC                         u860 1622  
                       u940 10D2                         u781 14D8                         u757 146C  
                       u861 161E                         u845 15E0                         u941 10CE  
                       u790 150A                         u870 1632                         u950 1104  
                       u871 162E                         u951 1100                         u880 164C  
                       u960 1188                         u881 1648                         u961 1184  
                       u890 165A                         u970 11BC                         u891 1656  
                       u971 11B8                         u980 11E8                         u797 14FC  
                       u981 11E4                         u990 1214                         u991 1210  
                       _pad 1932                         wreg 3FE8                        l1000 199A  
                      l1002 19B4                        l1021 157A                        l1016 1538  
                      l1041 17D6                        l1009 148A                        l1033 1670  
                      l1220 1B96                        l1037 17CE                        l1053 1162  
                      l1230 1BD0                        l1222 1BA4                        l1310 1D36  
                      l1224 1BAC                        l1216 1B80                        l1312 1D3C  
                      l1400 1A9E                        l1320 1CA2                        l1081 1930  
                      l1226 1BBA                        l1218 1B8E                        l1314 1D3E  
                      l1402 1AA4                        l1330 1CB8                        l1322 1CA4  
                      l1058 128A                        l1228 1BC2                        l1316 1D4E  
                      l1308 1D34                        l1404 1AAA                        l1332 1CBE  
                      l1324 1CAC                        l1340 1C20                        l1092 1D78  
                      l1069 1C18                        l1334 1CC0                        l1326 1CAE  
                      l1318 1C96                        l1342 1C28                        l1360 1D6A  
                      l1336 1CC8                        l1328 1CB6                        l1344 1C2A  
                      l1600 196A                        l1089 1C92                        l1346 1C2C  
                      l1338 1C1A                        l1610 142A                        l1602 1978  
                      l1380 1A3C                        l1348 1C40                        l1620 14AC  
                      l1612 1436                        l1604 197C                        l1700 1062  
                      l1390 1A80                        l1382 1A54                        l1622 14BA  
                      l1630 151E                        l1614 1440                        l1606 19A8  
                      l1710 107E                        l1702 1068                        l1392 1A86  
                      l1384 1A5A                        l1800 1CE8                        l1624 14BE  
                      l1616 1444                        l1608 1412                        l1640 157C  
                      l1720 10DC                        l1704 106A                        l1712 109E  
                      l1394 1A8C                        l1386 1A6A                        l1378 1A36  
                      l1570 1886                        l1634 154A                        l1626 14E0  
                      l1650 15A2                        l1642 1580                        l1722 10E6  
                      l1714 10AE                        l1706 1076                        l1810 19FE  
                      l1802 19B6                        l1396 1A92                        l1388 1A70  
                      l1580 18FE                        l1572 1896                        l1636 1558  
                      l1628 151A                        l1660 15CE                        l1652 15B2  
                      l1644 158E                        l1740 1190                        l1724 1104  
                      l1716 10C2                        l1812 1A28                        l1804 19BA  
                      l1820 1AD4                        l1900 12DA                        l1398 1A98  
                      l1830 180A                        l1574 18A6                        l1638 155C  
                      l1590 1C76                        l1670 1632                        l1662 15D4  
                      l1654 15BA                        l1646 1596                        l1742 1198  
                      l1734 1148                        l1726 1126                        l1718 10D2  
                      l1806 19C4                        l1822 1AFA                        l1814 1AB2  
                      l1910 1300                        l1902 12E8                        l1840 1818  
                      l1832 180E                        l1680 1730                        l1576 18B0  
                      l1584 1C5A                        l1592 1932                        l1672 164C  
                      l1656 15BE                        l1648 159C                        l1664 15F4  
                      l1744 11BC                        l1752 1222                        l1736 1164  
                      l1728 1134                        l1808 19D2                        l1824 1B10  
                      l1816 1AC6                        l1920 133A                        l1912 1304  
                      l1904 12F2                        l1842 181A                        l1834 1812  
                      l1826 17D8                        l1682 1754                        l1690 17A6  
                      l1578 18CC                        l1586 1C64                        l1594 1940  
                      l1666 1610                        l1674 165A                        l1658 15CC  
                      l1754 1232                        l1746 11E8                        l1738 1188  
                      l1762 1266                        l1770 1BE2                        l1818 1AD2  
                      l1930 138A                        l1922 135A                        l1914 1308  
                      l1906 12F4                        l1780 1B2A                        l1844 182E  
                      l1836 1814                        l1828 1808                        l1860 16CC  
                      l1852 1672                        l1684 175C                        l1588 1C72  
                      l1596 194C                        l1668 1622                        l1748 1214  
                      l1692 1026                        l1772 1BF4                        l1940 13C8  
                      l1932 1396                        l1924 1368                        l1916 130A  
                      l1908 12F6                        l1790 1B70                        l1782 1B3C  
                      l1846 1830                        l1838 1816                        l1870 1718  
                      l1862 16D0                        l1854 16C0                        l1686 177C  
                      l1678 172A                        l1598 195A                        l1758 125A  
                      l1694 104A                        l1774 1C12                        l1950 13F8  
                      l1942 13D0                        l1934 13A2                        l1926 1378  
                      l1918 1322                        l1792 1B76                        l1784 1B42  
                      l1848 1868                        l1864 16D2                        l1856 16C4  
                      l1688 179E                        l1696 1052                        l1768 1BDA  
                      l1880 1D26                        l1872 1D02                        l1952 13FC  
                      l1944 13D8                        l1936 13BA                        l1928 137C  
                      l1786 1B4C                        l1778 1B1A                        l1794 1CCC  
                      l1866 16D4                        l1858 16C6                        l1698 105E  
                      l1874 1D0A                        l1938 13BE                        l1946 13DA  
                      l1890 129E                        l1788 1B5E                        l1796 1CD6  
                      l1868 16D6                        l1876 1D10                        l1948 13E8  
                      l1892 12A0                        l1884 128C                        l1798 1CE4  
                      l1878 1D16                        l1894 12A6                        l1886 1294  
                      ?_pad 000E                        l1896 12A8                        l1888 129A  
                      l1898 12AA                        STR_1 1001                        STR_2 1012  
                      STR_3 101E                        u1000 1232                        u1001 122E  
                      u1010 1C12                        u1011 1C0E                        u1020 1B2A  
                      u1100 182E                        u1021 1B26                        u1101 182A  
                      u1030 1B5E                        u1110 1844                        u1031 1B5A  
                      u1111 1840                        u1040 1D00                        u1120 185A  
                      u1200 1378                        u1041 1CFC                        u1121 1856  
                      u1201 1374                        u1050 1AC6                        u1210 13E8  
                      u1051 1AC2                        u1211 13E4                        u1140 16EA  
                      u1060 1AEA                        u1220 13F8                        u1141 16E6  
                      u1061 1AE6                        u1221 13F4                        u1150 16FE  
                      u1070 1AFA                        u1151 16FA                        u1135 167E  
                      u1071 1AF6                        u1160 1712                        u1080 1B10  
                      u1161 170E                        u1081 1B0C                        u1170 134C  
                      u1307 1A60                        u1171 1344                        u1317 1A76  
                      u1237 1314                        u1190 1368                        u1327 1D44  
                      u1095 17E4                        u1191 1364                        u1247 132C  
                      u1257 1402                        u1267 171E                        u1188 134E  
                      u1277 1CB0                        u1287 1CC2                        u1297 1A46  
         ?_Lcd_Write_String 0005                        _dbuf 0064                        _main 128C  
                      _prec 0062                        pad@i 0013                        pad@p 0010  
                      fsr1h 3FE2                        fsr2h 3FDA                        indf1 3FE7  
                      indf2 3FDF                        fsr1l 3FE1                        fsr2l 3FD9  
                      _stoa 1412                        _xtoa 157C                        prodh 3FF4  
                      prodl 3FF3                        start FFFC          ??_Lcd_Write_String 0006  
           __end_of_Lcd_Cmd 1D52              _SPI1STATUSbits 3D17                ___param_bank 0000  
                     ??_pad 0012             ??_eeprom_read_8 0003                       ?_main 0001  
                     ?_stoa 0009                       ?_xtoa 0015                       _U1BRG 3DF5  
                     _U1TXB 3DEA                vfpfcnvrt@fmt 0022                       _PORTB 3FCB  
                     _PORTC 3FCC                       _TRISA 3FC2                       _TRISB 3FC3  
                     _TRISC 3FC4                       _flags 005F         read_prec_or_width@c 0005  
       read_prec_or_width@n 0006                       _fputc 1886                       _fputs 1C5A  
                     pad@fp 000E                       _width 0060                       _putch 1D78  
                     main@r 005D                       tablat 3FF5                       stoa@l 0013  
                     stoa@p 000D                       stoa@s 000A                       stoa@w 000F  
                     status 3FD8             __end_of_sprintf 1D32                       xtoa@c 001E  
                     xtoa@d 0016                       xtoa@i 001F                       xtoa@p 001B  
                     xtoa@w 001C            __end_of_Lcd_Init 1AB2            __end_of_Lcd_Port 1BDA  
           __initialization 1D52                __end_of_main 1412                __end_of_stoa 157C  
              __end_of_xtoa 1672                      ??_main 0042                      ??_stoa 000B  
                    ??_xtoa 0018               __activetblptr 0002  __end_of_read_prec_or_width 17D8  
                    ?_fputc 0001                      ?_fputs 0009                      _ANSELA 3A40  
                    ?_putch 0001                      _ANSELB 3A50                      _ANSELC 3A60  
                    _U1CON0 3DF2                      _U1CON1 3DF3                      _U1CON2 3DF4  
                    _RB1PPS 3A09                      _RB2PPS 3A0A                      _RC3PPS 3A13  
                    _RC5PPS 3A15                      _ODCONB 3A52                      _RC6PPS 3A16  
                 ??_Lcd_Cmd 0002               vfpfcnvrt@done 002B            ??_eeprom_write_8 0004  
              vfprintf@cfmt 002F                      _u8_hex 19B6        read_prec_or_width@ap 0002  
                    clear_0 1D58                      isa$std 0001                      pad@buf 000F  
                    main@hx 0054                      fputc@c 0001                      fputs@c 000B  
                    fputs@i 000C                      fputs@s 0009                __mediumconst 1000  
                    tblptrh 3FF7                      tblptrl 3FF6                      tblptru 3FF8  
                    stoa@cp 0011                      stoa@fp 0009                      putch@c 0001  
          __end_of_vfprintf 1C1A                   ??_sprintf 0036                      xtoa@fp 0015  
           Lcd_Set_Cursor@a 0005             Lcd_Set_Cursor@b 0004             Lcd_Set_Cursor@y 0007  
           Lcd_Set_Cursor@z 0006                  __accesstop 0060     __end_of__initialization 1D60  
           eeprom_read_8@b1 0006             eeprom_read_8@b2 0007           __end_of_Lcd_Clear 1D78  
             ___rparam_used 0001              __pcstackCOMRAM 0001               __end_of_fputc 1932  
             __end_of_fputs 1C94               __end_of_putch 1D7A           ?_uart_send_string 0001  
        ??_uart_send_string 0002              _Lcd_Set_Cursor 1B18                   ?_Lcd_Init 0001  
                 ?_Lcd_Port 0001                     ??_fputc 0004                     ??_fputs 000B  
                   ??_putch 0001                  __pbssBANK0 0060                     ?_u8_hex 0001  
                   _I2C2CLK 3D65      __end_of_Lcd_Set_Cursor 1B7E                     _U1RXPPS 3AE7  
                   _SPI1CLK 3D1C                     _SPI1RXB 3D10                     _SPI1TXB 3D11  
                ??_Lcd_Init 0004                  ??_Lcd_Port 0001              _Lcd_Write_Char 1C94  
                   _Lcd_Cmd 1D32                     __Hparam 0000                     __Lparam 0000  
                 ?_vfprintf 002C                     u8_hex@h 0005                __psmallconst 1000  
                   u8_hex@v 0002                     __pcinit 1D52                     __ramtop 1000  
           ?_Lcd_Set_Cursor 0004                     __ptext0 128C                     __ptext1 1AB2  
                   __ptext2 19B6                     __ptext3 1D02                     __ptext4 1BDA  
                   __ptext5 1026                     __ptext6 157C                     __ptext7 1932  
                   __ptext8 1C5A                     __ptext9 1412           uart_send_string@s 0001  
     __end_of_eeprom_read_8 1886       read_prec_or_width@fmt 0001                     main@buf 0044  
                   _sprintf 1D02      __end_of_Lcd_Write_Char 1CCC        end_of_initialization 1D60  
                   fputc@fp 0003               __Lmediumconst 0000                     fputs@fp 000A  
        _read_prec_or_width 172A           __end_of_vfpfcnvrt 128C                   _SPI1TCNTH 3D13  
                 _SPI1TCNTL 3D12                     postdec2 3FDD         ?_read_prec_or_width 0001  
                   postinc0 3FEE                     postinc1 3FE6                     postinc2 3FDE  
          vfpfcnvrt@convarg 0026                   Lcd_Port@a 0001                  ??_vfprintf 002F  
                 _PORTAbits 3FCA                   _PORTBbits 3FCB                   _PORTCbits 3FCC  
      ??_read_prec_or_width 0003             ?_Lcd_Write_Char 0001           Lcd_Write_String@a 0005  
         Lcd_Write_String@i 0006               ??_eeprom_EWEN 0001                  main@etatC0 005E  
                 _Lcd_Clear 1D6A              __end_of_u8_hex 1A36                 vfpfcnvrt@ap 0023  
               vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0021            _Lcd_Write_String 1CCC  
       start_initialization 1D52                 __end_of_pad 19B6          eeprom_write_8@addr 0001  
        eeprom_write_8@data 0003         __end_of_eeprom_EWEN 1C5A                 vfprintf@fmt 002D  
                ?_Lcd_Clear 0001                    ??_u8_hex 0003             Lcd_Write_Char@a 0004  
           Lcd_Write_Char@y 0003                 __pbssCOMRAM 005F            eeprom_write_8@b1 0007  
          eeprom_write_8@b2 0008            eeprom_write_8@b3 0009                   u8_hex@out 0001  
                  ?_Lcd_Cmd 0001            ??_Lcd_Set_Cursor 0005                    _I2C2CON0 3D5D  
               __smallconst 1000                    ?_sprintf 0030                  _I2C2SDAPPS 3AE6  
                _I2C2SCLPPS 3AE5                 _eeprom_EWEN 1C1A                _SPI1CON0bits 3D14  
              _SPI1CON2bits 3D16                    Lcd_Cmd@a 0003                    _SPI1BAUD 3D19  
                  _PIR3bits 39A3                    _SPI1CON0 3D14                    _SPI1CON1 3D15  
               ??_Lcd_Clear 0004                   _vfpfcnvrt 1026            ??_Lcd_Write_Char 0002  
                  _Lcd_Init 1A36                    _Lcd_Port 1B7E            _uart_send_string 1AB2  
  __end_of_Lcd_Write_String 1D02                    __Hrparam 0000                  vfprintf@ap 002E  
                  __Lrparam 0000                  vfprintf@fp 002C              _eeprom_write_8 1672  
                ?_vfpfcnvrt 0021                  sprintf@fmt 0031                    __ptext10 1886  
                  __ptext11 1D78                    __ptext20 1D6A                    __ptext12 172A  
                  __ptext21 1D32                    __ptext13 1672                    __ptext22 1B7E  
                  __ptext14 1C1A                    __ptext15 17D8                    __ptext16 1CCC  
                  __ptext17 1C94                    __ptext18 1B18                    __ptext19 1A36  
                  isa$xinst 0000      __end_of_eeprom_write_8 172A                    _vfprintf 1BDA  
                  main@data 005C               _eeprom_read_8 17D8          Lcd_Write_Char@temp 0002  
                 sprintf@ap 0036             ?_eeprom_write_8 0001                  _SPI1SDIPPS 3AE1  
                _SPI1TWIDTH 3D18                 ??_vfpfcnvrt 0025          Lcd_Set_Cursor@temp 0008  
                  sprintf@f 0037                    sprintf@s 0030              ?_eeprom_read_8 0001  
              ?_eeprom_EWEN 0001  
